<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AuraBudgetApp&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AuraBudgetApp&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AuraBudget.Splash&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/MainActivity.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.FastOutSlowInEasing&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import `in`.sitharaj.aurabudget.presentation.navigation.MainNavigationBar&#10;import `in`.sitharaj.aurabudget.presentation.navigation.Screen&#10;import `in`.sitharaj.aurabudget.presentation.screen.*&#10;import `in`.sitharaj.aurabudget.ui.theme.AuraBudgetTheme&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ThemeViewModel&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AuraBudgetScreen()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AuraBudgetScreen() {&#10;    val themeViewModel: ThemeViewModel = hiltViewModel()&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    AuraBudgetTheme(darkTheme = isDarkTheme) {&#10;        val navController = rememberNavController()&#10;        val currentDestination by navController.currentBackStackEntryAsState()&#10;        val currentRoute = currentDestination?.destination?.route&#10;&#10;        // Hide bottom bar on splash screen&#10;        val shouldShowBottomBar = currentRoute != Screen.Splash.route&#10;&#10;        Scaffold(&#10;            bottomBar = {&#10;                AnimatedVisibility(&#10;                    visible = shouldShowBottomBar,&#10;                    enter = slideInVertically(&#10;                        initialOffsetY = { it },&#10;                        animationSpec = tween(&#10;                            durationMillis = 600,&#10;                            easing = FastOutSlowInEasing&#10;                        )&#10;                    ) + fadeIn(&#10;                        animationSpec = tween(&#10;                            durationMillis = 400,&#10;                            delayMillis = 200&#10;                        )&#10;                    ),&#10;                    exit = slideOutVertically(&#10;                        targetOffsetY = { it },&#10;                        animationSpec = tween(300)&#10;                    ) + fadeOut(tween(200))&#10;                ) {&#10;                    MainNavigationBar(navController = navController)&#10;                }&#10;            }&#10;        ) { paddingValues -&gt;&#10;            NavHost(&#10;                navController = navController,&#10;                startDestination = Screen.Splash.route,&#10;                modifier = if (shouldShowBottomBar) Modifier.padding(paddingValues) else Modifier,&#10;                enterTransition = {&#10;                    if (initialState.destination.route == Screen.Splash.route) {&#10;                        // Smooth fade-in when coming from splash&#10;                        fadeIn(&#10;                            animationSpec = tween(&#10;                                durationMillis = 800,&#10;                                easing = FastOutSlowInEasing&#10;                            )&#10;                        ) + slideInVertically(&#10;                            initialOffsetY = { it / 4 },&#10;                            animationSpec = tween(&#10;                                durationMillis = 600,&#10;                                easing = FastOutSlowInEasing&#10;                            )&#10;                        )&#10;                    } else {&#10;                        // Normal transitions between other screens&#10;                        fadeIn(tween(300)) + slideInHorizontally(&#10;                            initialOffsetX = { it / 3 },&#10;                            animationSpec = tween(300)&#10;                        )&#10;                    }&#10;                },&#10;                exitTransition = {&#10;                    if (targetState.destination.route == Screen.Splash.route) {&#10;                        // Fade out when going to splash (shouldn't happen normally)&#10;                        fadeOut(tween(300))&#10;                    } else {&#10;                        // Normal transitions between other screens&#10;                        fadeOut(tween(200)) + slideOutHorizontally(&#10;                            targetOffsetX = { -it / 3 },&#10;                            animationSpec = tween(200)&#10;                        )&#10;                    }&#10;                }&#10;            ) {&#10;                // Splash and Onboarding&#10;                composable(Screen.Splash.route) {&#10;                    SplashScreen(onNavigateToMain = {&#10;                        navController.navigate(Screen.Dashboard.route) {&#10;                            popUpTo(Screen.Splash.route) { inclusive = true }&#10;                        }&#10;                    })&#10;                }&#10;&#10;                // Main Navigation Screens&#10;                composable(Screen.Dashboard.route) {&#10;                    EnhancedDashboardScreen(navController = navController)&#10;                }&#10;&#10;                composable(Screen.Transactions.route) {&#10;                    TransactionsScreen(navController = navController)&#10;                }&#10;&#10;                composable(Screen.Budget.route) {&#10;                    BudgetScreen(navController = navController)&#10;                }&#10;&#10;                composable(Screen.Analytics.route) {&#10;                    AnalyticsScreen(navController = navController)&#10;                }&#10;&#10;                composable(Screen.Settings.route) {&#10;                    SettingsScreen(navController = navController)&#10;                }&#10;&#10;                // Secondary Screens&#10;                composable(&#10;                    route = &quot;${Screen.AddTransaction.route}?type={type}&quot;,&#10;                    arguments = listOf(navArgument(&quot;type&quot;) {&#10;                        type = NavType.StringType&#10;                        defaultValue = &quot;expense&quot;&#10;                    })&#10;                ) { backStackEntry -&gt;&#10;                    val transactionType = backStackEntry.arguments?.getString(&quot;type&quot;) ?: &quot;expense&quot;&#10;                    AddTransactionScreen(&#10;                        navController = navController,&#10;                        transactionType = transactionType&#10;                    )&#10;                }&#10;&#10;                composable(Screen.AddTransaction.route) {&#10;                    AddTransactionScreen(navController = navController)&#10;                }&#10;&#10;                // Transaction Detail - placeholder for now&#10;                composable(&#10;                    route = Screen.TransactionDetail.route,&#10;                    arguments = listOf(navArgument(&quot;transactionId&quot;) { type = NavType.LongType })&#10;                ) {&#10;                    // TransactionDetailScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                // Budget related screens - placeholders for now&#10;                composable(Screen.AddBudget.route) {&#10;                    // AddBudgetScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(&#10;                    route = Screen.BudgetDetail.route,&#10;                    arguments = listOf(navArgument(&quot;budgetId&quot;) { type = NavType.LongType })&#10;                ) {&#10;                    // BudgetDetailScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                // Categories and Goals - placeholders for now&#10;                composable(Screen.Categories.route) {&#10;                    // CategoriesScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(Screen.Goals.route) {&#10;                    // GoalsScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                // Profile and Settings related - placeholders for now&#10;                composable(Screen.Profile.route) {&#10;                    // ProfileScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(Screen.Notifications.route) {&#10;                    // NotificationsScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(Screen.Help.route) {&#10;                    // HelpScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(Screen.About.route) {&#10;                    // AboutScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.FastOutSlowInEasing&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import `in`.sitharaj.aurabudget.presentation.navigation.MainNavigationBar&#10;import `in`.sitharaj.aurabudget.presentation.navigation.Screen&#10;import `in`.sitharaj.aurabudget.presentation.screen.*&#10;import `in`.sitharaj.aurabudget.ui.theme.AuraBudgetTheme&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ThemeViewModel&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AuraBudgetScreen()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AuraBudgetScreen() {&#10;    val themeViewModel: ThemeViewModel = hiltViewModel()&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    AuraBudgetTheme(darkTheme = isDarkTheme) {&#10;        val navController = rememberNavController()&#10;        val currentDestination by navController.currentBackStackEntryAsState()&#10;        val currentRoute = currentDestination?.destination?.route&#10;&#10;        // Hide bottom bar on splash screen&#10;        val shouldShowBottomBar = currentRoute != Screen.Splash.route&#10;&#10;        Scaffold(&#10;            bottomBar = {&#10;                AnimatedVisibility(&#10;                    visible = shouldShowBottomBar,&#10;                    enter = slideInVertically(&#10;                        initialOffsetY = { it },&#10;                        animationSpec = tween(&#10;                            durationMillis = 600,&#10;                            easing = FastOutSlowInEasing&#10;                        )&#10;                    ) + fadeIn(&#10;                        animationSpec = tween(&#10;                            durationMillis = 400,&#10;                            delayMillis = 200&#10;                        )&#10;                    ),&#10;                    exit = slideOutVertically(&#10;                        targetOffsetY = { it },&#10;                        animationSpec = tween(300)&#10;                    ) + fadeOut(tween(200))&#10;                ) {&#10;                    MainNavigationBar(navController = navController)&#10;                }&#10;            }&#10;        ) { paddingValues -&gt;&#10;            NavHost(&#10;                navController = navController,&#10;                startDestination = Screen.Splash.route,&#10;                modifier = if (shouldShowBottomBar) Modifier.padding(paddingValues) else Modifier,&#10;                enterTransition = {&#10;                    if (initialState.destination.route == Screen.Splash.route) {&#10;                        // Smooth fade-in when coming from splash&#10;                        fadeIn(&#10;                            animationSpec = tween(&#10;                                durationMillis = 800,&#10;                                easing = FastOutSlowInEasing&#10;                            )&#10;                        ) + slideInVertically(&#10;                            initialOffsetY = { it / 4 },&#10;                            animationSpec = tween(&#10;                                durationMillis = 600,&#10;                                easing = FastOutSlowInEasing&#10;                            )&#10;                        )&#10;                    } else {&#10;                        // Normal transitions between other screens&#10;                        fadeIn(tween(300)) + slideInHorizontally(&#10;                            initialOffsetX = { it / 3 },&#10;                            animationSpec = tween(300)&#10;                        )&#10;                    }&#10;                },&#10;                exitTransition = {&#10;                    if (targetState.destination.route == Screen.Splash.route) {&#10;                        // Fade out when going to splash (shouldn't happen normally)&#10;                        fadeOut(tween(300))&#10;                    } else {&#10;                        // Normal transitions between other screens&#10;                        fadeOut(tween(200)) + slideOutHorizontally(&#10;                            targetOffsetX = { -it / 3 },&#10;                            animationSpec = tween(200)&#10;                        )&#10;                    }&#10;                }&#10;            ) {&#10;                // Splash and Onboarding&#10;                composable(Screen.Splash.route) {&#10;                    SplashScreen(onNavigateToMain = {&#10;                        navController.navigate(Screen.Dashboard.route) {&#10;                            popUpTo(Screen.Splash.route) { inclusive = true }&#10;                        }&#10;                    })&#10;                }&#10;&#10;                // Main Navigation Screens&#10;                composable(Screen.Dashboard.route) {&#10;                    EnhancedDashboardScreen(navController = navController)&#10;                }&#10;&#10;                composable(Screen.Transactions.route) {&#10;                    TransactionsScreen(navController = navController)&#10;                }&#10;&#10;                composable(Screen.Budget.route) {&#10;                    BudgetScreen(navController = navController)&#10;                }&#10;&#10;                composable(Screen.Analytics.route) {&#10;                    AnalyticsScreen(navController = navController)&#10;                }&#10;&#10;                composable(Screen.Settings.route) {&#10;                    SettingsScreen(navController = navController)&#10;                }&#10;&#10;                // Secondary Screens&#10;                composable(&#10;                    route = &quot;${Screen.AddTransaction.route}?type={type}&quot;,&#10;                    arguments = listOf(navArgument(&quot;type&quot;) {&#10;                        type = NavType.StringType&#10;                        defaultValue = &quot;expense&quot;&#10;                    })&#10;                ) { backStackEntry -&gt;&#10;                    val transactionType = backStackEntry.arguments?.getString(&quot;type&quot;) ?: &quot;expense&quot;&#10;                    AddTransactionScreen(&#10;                        navController = navController,&#10;                        transactionType = transactionType&#10;                    )&#10;                }&#10;&#10;                composable(Screen.AddTransaction.route) {&#10;                    AddTransactionScreen(navController = navController)&#10;                }&#10;&#10;                // Transaction Detail - placeholder for now&#10;                composable(&#10;                    route = Screen.TransactionDetail.route,&#10;                    arguments = listOf(navArgument(&quot;transactionId&quot;) { type = NavType.LongType })&#10;                ) {&#10;                    // TransactionDetailScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                // Budget related screens - placeholders for now&#10;                composable(Screen.AddBudget.route) {&#10;                    // AddBudgetScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(&#10;                    route = Screen.BudgetDetail.route,&#10;                    arguments = listOf(navArgument(&quot;budgetId&quot;) { type = NavType.LongType })&#10;                ) {&#10;                    // BudgetDetailScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                // Categories and Goals - placeholders for now&#10;                composable(Screen.Categories.route) {&#10;                    // CategoriesScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(Screen.Goals.route) {&#10;                    // GoalsScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                // Profile and Settings related - placeholders for now&#10;                composable(Screen.Profile.route) {&#10;                    // ProfileScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(Screen.Notifications.route) {&#10;                    // NotificationsScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(Screen.Help.route) {&#10;                    // HelpScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;&#10;                composable(Screen.About.route) {&#10;                    // AboutScreen placeholder - will implement later&#10;                    Box {}&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/TransactionComponents.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/TransactionComponents.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.components&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.time.LocalDateTime&#10;import java.time.format.DateTimeFormatter&#10;&#10;data class Transaction(&#10;    val id: Long = 0,&#10;    val amount: Double,&#10;    val category: String,&#10;    val description: String,&#10;    val date: LocalDateTime = LocalDateTime.now(),&#10;    val type: TransactionType,&#10;    val categoryIcon: ImageVector = Icons.Default.ShoppingCart&#10;)&#10;&#10;enum class TransactionType {&#10;    INCOME, EXPENSE, TRANSFER&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TransactionItem(&#10;    transaction: Transaction,&#10;    onTransactionClick: (Transaction) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onTransactionClick(transaction) },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.3f)&#10;        ),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Category Icon&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        when (transaction.type) {&#10;                            TransactionType.INCOME -&gt; Color.Green.copy(alpha = 0.2f)&#10;                            TransactionType.EXPENSE -&gt; Color.Red.copy(alpha = 0.2f)&#10;                            TransactionType.TRANSFER -&gt; Color.Blue.copy(alpha = 0.2f)&#10;                        },&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = transaction.categoryIcon,&#10;                    contentDescription = transaction.category,&#10;                    tint = when (transaction.type) {&#10;                        TransactionType.INCOME -&gt; Color.Green&#10;                        TransactionType.EXPENSE -&gt; Color.Red&#10;                        TransactionType.TRANSFER -&gt; Color.Blue&#10;                    },&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Transaction Details&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = transaction.category,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                if (transaction.description.isNotBlank()) {&#10;                    Text(&#10;                        text = transaction.description,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;                Text(&#10;                    text = transaction.date.format(DateTimeFormatter.ofPattern(&quot;MMM dd, HH:mm&quot;)),&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            // Amount&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = &quot;${if (transaction.type == TransactionType.INCOME) &quot;+&quot; else &quot;-&quot;}₹${String.format(&quot;%.2f&quot;, transaction.amount)}&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = when (transaction.type) {&#10;                        TransactionType.INCOME -&gt; Color.Green&#10;                        TransactionType.EXPENSE -&gt; Color.Red&#10;                        TransactionType.TRANSFER -&gt; MaterialTheme.colorScheme.primary&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun TransactionsList(&#10;    transactions: List&lt;Transaction&gt;,&#10;    onTransactionClick: (Transaction) -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    showHeader: Boolean = true&#10;) {&#10;    Column(modifier = modifier) {&#10;        if (showHeader) {&#10;            SectionHeader(&#10;                title = &quot;Recent Transactions&quot;,&#10;                subtitle = &quot;Last ${transactions.size} transactions&quot;,&#10;                actionText = &quot;See All&quot;,&#10;                onActionClick = { /* Navigate to all transactions */ },&#10;                modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;            )&#10;        }&#10;&#10;        LazyColumn(&#10;            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            items(transactions) { transaction -&gt;&#10;                TransactionItem(&#10;                    transaction = transaction,&#10;                    onTransactionClick = onTransactionClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategorySpendingCard(&#10;    categoryName: String,&#10;    amount: Double,&#10;    budget: Double,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val progress = (amount / budget).coerceAtMost(1.0)&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(40.dp)&#10;                        .background(color.copy(alpha = 0.2f), CircleShape),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = icon,&#10;                        contentDescription = categoryName,&#10;                        tint = color,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = categoryName,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    Text(&#10;                        text = &quot;₹${String.format(&quot;%.0f&quot;, amount)} of ₹${String.format(&quot;%.0f&quot;, budget)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = &quot;${(progress * 100).toInt()}%&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = if (progress &gt; 0.8f) Color.Red else MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress.toFloat() },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(6.dp)&#10;                    .clip(RoundedCornerShape(3.dp)),&#10;                color = if (progress &gt; 0.8f) Color.Red else color,&#10;                trackColor = color.copy(alpha = 0.2f)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.components&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.time.LocalDateTime&#10;import java.time.format.DateTimeFormatter&#10;&#10;data class Transaction(&#10;    val id: Long = 0,&#10;    val amount: Double,&#10;    val category: String,&#10;    val description: String,&#10;    val date: LocalDateTime = LocalDateTime.now(),&#10;    val type: TransactionType,&#10;    val categoryIcon: ImageVector = Icons.Default.ShoppingCart&#10;)&#10;&#10;enum class TransactionType {&#10;    INCOME, EXPENSE, TRANSFER&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TransactionItem(&#10;    transaction: Transaction,&#10;    onTransactionClick: (Transaction) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onTransactionClick(transaction) },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.3f)&#10;        ),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Category Icon&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .background(&#10;                        when (transaction.type) {&#10;                            TransactionType.INCOME -&gt; Color.Green.copy(alpha = 0.2f)&#10;                            TransactionType.EXPENSE -&gt; Color.Red.copy(alpha = 0.2f)&#10;                            TransactionType.TRANSFER -&gt; Color.Blue.copy(alpha = 0.2f)&#10;                        },&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = transaction.categoryIcon,&#10;                    contentDescription = transaction.category,&#10;                    tint = when (transaction.type) {&#10;                        TransactionType.INCOME -&gt; Color.Green&#10;                        TransactionType.EXPENSE -&gt; Color.Red&#10;                        TransactionType.TRANSFER -&gt; Color.Blue&#10;                    },&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Transaction Details&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = transaction.category,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                if (transaction.description.isNotBlank()) {&#10;                    Text(&#10;                        text = transaction.description,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;                Text(&#10;                    text = transaction.date.format(DateTimeFormatter.ofPattern(&quot;MMM dd, HH:mm&quot;)),&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            // Amount&#10;            Column(&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = &quot;${if (transaction.type == TransactionType.INCOME) &quot;+&quot; else &quot;-&quot;}₹${String.format(&quot;%.2f&quot;, transaction.amount)}&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = when (transaction.type) {&#10;                        TransactionType.INCOME -&gt; Color.Green&#10;                        TransactionType.EXPENSE -&gt; Color.Red&#10;                        TransactionType.TRANSFER -&gt; MaterialTheme.colorScheme.primary&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun TransactionsList(&#10;    transactions: List&lt;Transaction&gt;,&#10;    onTransactionClick: (Transaction) -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    showHeader: Boolean = true&#10;) {&#10;    Column(modifier = modifier) {&#10;        if (showHeader) {&#10;            SectionHeader(&#10;                title = &quot;Recent Transactions&quot;,&#10;                subtitle = &quot;Last ${transactions.size} transactions&quot;,&#10;                actionText = &quot;See All&quot;,&#10;                onActionClick = { /* Navigate to all transactions */ },&#10;                modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;            )&#10;        }&#10;&#10;        LazyColumn(&#10;            contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            items(transactions) { transaction -&gt;&#10;                TransactionItem(&#10;                    transaction = transaction,&#10;                    onTransactionClick = onTransactionClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategorySpendingCard(&#10;    categoryName: String,&#10;    amount: Double,&#10;    budget: Double,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val progress = (amount / budget).coerceAtMost(1.0)&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(40.dp)&#10;                        .background(color.copy(alpha = 0.2f), CircleShape),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = icon,&#10;                        contentDescription = categoryName,&#10;                        tint = color,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = categoryName,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    Text(&#10;                        text = &quot;₹${String.format(&quot;%.0f&quot;, amount)} of ₹${String.format(&quot;%.0f&quot;, budget)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = &quot;${(progress * 100).toInt()}%&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = if (progress &gt; 0.8f) Color.Red else MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress.toFloat() },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(6.dp)&#10;                    .clip(RoundedCornerShape(3.dp)),&#10;                color = if (progress.toFloat() &gt; 0.8f) Color.Red else color,&#10;                trackColor = color.copy(alpha = 0.2f)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/BudgetScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/BudgetScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.components.SectionHeader&#10;import `in`.sitharaj.aurabudget.presentation.navigation.Screen&#10;&#10;data class BudgetCategory(&#10;    val id: Long,&#10;    val name: String,&#10;    val allocated: Double,&#10;    val spent: Double,&#10;    val icon: ImageVector,&#10;    val color: Color&#10;)&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BudgetScreen(&#10;    navController: NavController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    // Sample budget data&#10;    val totalBudget = 50000.0&#10;    val totalSpent = 32500.0&#10;    val remaining = totalBudget - totalSpent&#10;&#10;    val budgetCategories = listOf(&#10;        BudgetCategory(&#10;            id = 1,&#10;            name = &quot;Food &amp; Dining&quot;,&#10;            allocated = 12000.0,&#10;            spent = 8500.0,&#10;            icon = Icons.Default.Restaurant,&#10;            color = Color(0xFF4CAF50)&#10;        ),&#10;        BudgetCategory(&#10;            id = 2,&#10;            name = &quot;Transportation&quot;,&#10;            allocated = 5000.0,&#10;            spent = 4200.0,&#10;            icon = Icons.Default.DirectionsCar,&#10;            color = Color(0xFF2196F3)&#10;        ),&#10;        BudgetCategory(&#10;            id = 3,&#10;            name = &quot;Shopping&quot;,&#10;            allocated = 8000.0,&#10;            spent = 6800.0,&#10;            icon = Icons.Default.ShoppingBag,&#10;            color = Color(0xFFFF9800)&#10;        ),&#10;        BudgetCategory(&#10;            id = 4,&#10;            name = &quot;Entertainment&quot;,&#10;            allocated = 3000.0,&#10;            spent = 2100.0,&#10;            icon = Icons.Default.Movie,&#10;            color = Color(0xFF9C27B0)&#10;        ),&#10;        BudgetCategory(&#10;            id = 5,&#10;            name = &quot;Utilities&quot;,&#10;            allocated = 6000.0,&#10;            spent = 5500.0,&#10;            icon = Icons.Default.ElectricBolt,&#10;            color = Color(0xFFFF5722)&#10;        ),&#10;        BudgetCategory(&#10;            id = 6,&#10;            name = &quot;Healthcare&quot;,&#10;            allocated = 4000.0,&#10;            spent = 1200.0,&#10;            icon = Icons.Default.LocalHospital,&#10;            color = Color(0xFF00BCD4)&#10;        ),&#10;        BudgetCategory(&#10;            id = 7,&#10;            name = &quot;Education&quot;,&#10;            allocated = 5000.0,&#10;            spent = 2800.0,&#10;            icon = Icons.Default.School,&#10;            color = Color(0xFF795548)&#10;        ),&#10;        BudgetCategory(&#10;            id = 8,&#10;            name = &quot;Savings&quot;,&#10;            allocated = 7000.0,&#10;            spent = 1400.0,&#10;            icon = Icons.Default.Savings,&#10;            color = Color(0xFF607D8B)&#10;        )&#10;    )&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .systemBarsPadding()&#10;    ) {&#10;        // Top App Bar&#10;        TopAppBar(&#10;            title = { Text(&quot;Budget Overview&quot;) },&#10;            actions = {&#10;                IconButton(onClick = { navController.navigate(Screen.AddBudget.route) }) {&#10;                    Icon(Icons.Default.Add, contentDescription = &quot;Add Budget&quot;)&#10;                }&#10;                IconButton(onClick = { /* Settings */ }) {&#10;                    Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                }&#10;            }&#10;        )&#10;&#10;        LazyColumn(&#10;            contentPadding = PaddingValues(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Overall Budget Summary&#10;            item {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    ),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(20.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;This Month's Budget&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Text(&#10;                            text = &quot;₹${String.format(&quot;%.0f&quot;, totalSpent)} of ₹${String.format(&quot;%.0f&quot;, totalBudget)}&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        val progress = (totalSpent / totalBudget).coerceAtMost(1.0).toFloat()&#10;                        LinearProgressIndicator(&#10;                            progress = { progress },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(8.dp)&#10;                                .clip(RoundedCornerShape(4.dp)),&#10;                            color = if (progress &gt; 0.8f) Color.Red else MaterialTheme.colorScheme.primary,&#10;                            trackColor = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.2f)&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Column {&#10;                                Text(&#10;                                    text = &quot;Remaining&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;₹${String.format(&quot;%.0f&quot;, remaining)}&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.SemiBold,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                                )&#10;                            }&#10;                            Column(horizontalAlignment = Alignment.End) {&#10;                                Text(&#10;                                    text = &quot;Progress&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;${(progress * 100).toInt()}%&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.SemiBold,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Budget Categories Section&#10;            item {&#10;                SectionHeader(&#10;                    title = &quot;Budget Categories&quot;,&#10;                    subtitle = &quot;${budgetCategories.size} categories&quot;,&#10;                    actionText = &quot;Manage&quot;,&#10;                    onActionClick = { navController.navigate(Screen.Categories.route) }&#10;                )&#10;            }&#10;&#10;            // Budget Categories List&#10;            items(budgetCategories) { category -&gt;&#10;                BudgetCategoryCard(&#10;                    category = category,&#10;                    onCategoryClick = {&#10;                        navController.navigate(Screen.BudgetDetail.createRoute(category.id))&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Budget Tips Card&#10;            item {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Lightbulb,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                &quot;Budget Tip&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            &quot;You're doing great! Try to save 20% more on entertainment to reach your savings goal faster.&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Bottom spacing&#10;            item {&#10;                Spacer(modifier = Modifier.height(80.dp))&#10;            }&#10;        }&#10;&#10;        // Floating Action Button&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.BottomEnd&#10;        ) {&#10;            FloatingActionButton(&#10;                onClick = { navController.navigate(Screen.AddBudget.route) },&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Budget Category&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BudgetCategoryCard(&#10;    category: BudgetCategory,&#10;    onCategoryClick: (BudgetCategory) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val progress = (category.spent / category.allocated).coerceAtMost(1.0)&#10;    val isOverBudget = category.spent &gt; category.allocated&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth(),&#10;        onClick = { onCategoryClick(category) },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .background(category.color.copy(alpha = 0.2f), CircleShape),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = category.icon,&#10;                        contentDescription = category.name,&#10;                        tint = category.color,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = category.name,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    Text(&#10;                        text = &quot;₹${String.format(&quot;%.0f&quot;, category.spent)} of ₹${String.format(&quot;%.0f&quot;, category.allocated)}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Column(horizontalAlignment = Alignment.End) {&#10;                    Text(&#10;                        text = if (isOverBudget) &quot;Over Budget&quot; else &quot;${(progress * 100).toInt()}%&quot;,&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = if (isOverBudget) Color.Red else MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Text(&#10;                        text = &quot;₹${String.format(&quot;%.0f&quot;, category.allocated - category.spent)} left&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            LinearProgressIndicator(&#10;                progress = progress.toFloat(),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(6.dp)&#10;                    .clip(RoundedCornerShape(3.dp)),&#10;                color = if (isOverBudget) Color.Red else category.color,&#10;                trackColor = category.color.copy(alpha = 0.2f)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.components.SectionHeader&#10;import `in`.sitharaj.aurabudget.presentation.navigation.Screen&#10;&#10;data class BudgetCategory(&#10;    val id: Long,&#10;    val name: String,&#10;    val allocated: Double,&#10;    val spent: Double,&#10;    val icon: ImageVector,&#10;    val color: Color&#10;)&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BudgetScreen(&#10;    navController: NavController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    // Sample budget data&#10;    val totalBudget = 50000.0&#10;    val totalSpent = 32500.0&#10;    val remaining = totalBudget - totalSpent&#10;&#10;    val budgetCategories = listOf(&#10;        BudgetCategory(&#10;            id = 1,&#10;            name = &quot;Food &amp; Dining&quot;,&#10;            allocated = 12000.0,&#10;            spent = 8500.0,&#10;            icon = Icons.Default.Restaurant,&#10;            color = Color(0xFF4CAF50)&#10;        ),&#10;        BudgetCategory(&#10;            id = 2,&#10;            name = &quot;Transportation&quot;,&#10;            allocated = 5000.0,&#10;            spent = 4200.0,&#10;            icon = Icons.Default.DirectionsCar,&#10;            color = Color(0xFF2196F3)&#10;        ),&#10;        BudgetCategory(&#10;            id = 3,&#10;            name = &quot;Shopping&quot;,&#10;            allocated = 8000.0,&#10;            spent = 6800.0,&#10;            icon = Icons.Default.ShoppingBag,&#10;            color = Color(0xFFFF9800)&#10;        ),&#10;        BudgetCategory(&#10;            id = 4,&#10;            name = &quot;Entertainment&quot;,&#10;            allocated = 3000.0,&#10;            spent = 2100.0,&#10;            icon = Icons.Default.Movie,&#10;            color = Color(0xFF9C27B0)&#10;        ),&#10;        BudgetCategory(&#10;            id = 5,&#10;            name = &quot;Utilities&quot;,&#10;            allocated = 6000.0,&#10;            spent = 5500.0,&#10;            icon = Icons.Default.ElectricBolt,&#10;            color = Color(0xFFFF5722)&#10;        ),&#10;        BudgetCategory(&#10;            id = 6,&#10;            name = &quot;Healthcare&quot;,&#10;            allocated = 4000.0,&#10;            spent = 1200.0,&#10;            icon = Icons.Default.LocalHospital,&#10;            color = Color(0xFF00BCD4)&#10;        ),&#10;        BudgetCategory(&#10;            id = 7,&#10;            name = &quot;Education&quot;,&#10;            allocated = 5000.0,&#10;            spent = 2800.0,&#10;            icon = Icons.Default.School,&#10;            color = Color(0xFF795548)&#10;        ),&#10;        BudgetCategory(&#10;            id = 8,&#10;            name = &quot;Savings&quot;,&#10;            allocated = 7000.0,&#10;            spent = 1400.0,&#10;            icon = Icons.Default.Savings,&#10;            color = Color(0xFF607D8B)&#10;        )&#10;    )&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .systemBarsPadding()&#10;    ) {&#10;        // Top App Bar&#10;        TopAppBar(&#10;            title = { Text(&quot;Budget Overview&quot;) },&#10;            actions = {&#10;                IconButton(onClick = { navController.navigate(Screen.AddBudget.route) }) {&#10;                    Icon(Icons.Default.Add, contentDescription = &quot;Add Budget&quot;)&#10;                }&#10;                IconButton(onClick = { /* Settings */ }) {&#10;                    Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                }&#10;            }&#10;        )&#10;&#10;        LazyColumn(&#10;            contentPadding = PaddingValues(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Overall Budget Summary&#10;            item {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    ),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(20.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;This Month's Budget&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        Text(&#10;                            text = &quot;₹${String.format(&quot;%.0f&quot;, totalSpent)} of ₹${String.format(&quot;%.0f&quot;, totalBudget)}&quot;,&#10;                            style = MaterialTheme.typography.headlineSmall,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        val progress = (totalSpent / totalBudget).coerceAtMost(1.0).toFloat()&#10;                        LinearProgressIndicator(&#10;                            progress = { progress },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(8.dp)&#10;                                .clip(RoundedCornerShape(4.dp)),&#10;                            color = if (progress &gt; 0.8f) Color.Red else MaterialTheme.colorScheme.primary,&#10;                            trackColor = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.2f)&#10;                        )&#10;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Column {&#10;                                Text(&#10;                                    text = &quot;Remaining&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;₹${String.format(&quot;%.0f&quot;, remaining)}&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.SemiBold,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                                )&#10;                            }&#10;                            Column(horizontalAlignment = Alignment.End) {&#10;                                Text(&#10;                                    text = &quot;Progress&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;${(progress * 100).toInt()}%&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.SemiBold,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Budget Categories Section&#10;            item {&#10;                SectionHeader(&#10;                    title = &quot;Budget Categories&quot;,&#10;                    subtitle = &quot;${budgetCategories.size} categories&quot;,&#10;                    actionText = &quot;Manage&quot;,&#10;                    onActionClick = { navController.navigate(Screen.Categories.route) }&#10;                )&#10;            }&#10;&#10;            // Budget Categories List&#10;            items(budgetCategories) { category -&gt;&#10;                BudgetCategoryCard(&#10;                    category = category,&#10;                    onCategoryClick = {&#10;                        navController.navigate(Screen.BudgetDetail.createRoute(category.id))&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Budget Tips Card&#10;            item {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Lightbulb,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                &quot;Budget Tip&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            &quot;You're doing great! Try to save 20% more on entertainment to reach your savings goal faster.&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Bottom spacing&#10;            item {&#10;                Spacer(modifier = Modifier.height(80.dp))&#10;            }&#10;        }&#10;&#10;        // Floating Action Button&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.BottomEnd&#10;        ) {&#10;            FloatingActionButton(&#10;                onClick = { navController.navigate(Screen.AddBudget.route) },&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Budget Category&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BudgetCategoryCard(&#10;    category: BudgetCategory,&#10;    onCategoryClick: (BudgetCategory) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val progress = (category.spent / category.allocated).coerceAtMost(1.0)&#10;    val isOverBudget = category.spent &gt; category.allocated&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth(),&#10;        onClick = { onCategoryClick(category) },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .background(category.color.copy(alpha = 0.2f), CircleShape),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = category.icon,&#10;                        contentDescription = category.name,&#10;                        tint = category.color,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = category.name,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    Text(&#10;                        text = &quot;₹${String.format(&quot;%.0f&quot;, category.spent)} of ₹${String.format(&quot;%.0f&quot;, category.allocated)}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Column(horizontalAlignment = Alignment.End) {&#10;                    Text(&#10;                        text = if (isOverBudget) &quot;Over Budget&quot; else &quot;${(progress * 100).toInt()}%&quot;,&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = if (isOverBudget) Color.Red else MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Text(&#10;                        text = &quot;₹${String.format(&quot;%.0f&quot;, category.allocated - category.spent)} left&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            LinearProgressIndicator(&#10;                progress = { progress.toFloat() },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(6.dp)&#10;                    .clip(RoundedCornerShape(3.dp)),&#10;                color = if (isOverBudget) Color.Red else category.color,&#10;                trackColor = category.color.copy(alpha = 0.2f)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/SplashScreenNew.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/SplashScreenNew.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AttachMoney&#10;import androidx.compose.material.icons.filled.TrendingUp&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.draw.scale&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.delay&#10;import `in`.sitharaj.aurabudget.R&#10;&#10;@Composable&#10;fun SplashScreen(&#10;    onNavigateToMain: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var startAnimation by remember { mutableStateOf(false) }&#10;    var showText by remember { mutableStateOf(false) }&#10;    var showTagline by remember { mutableStateOf(false) }&#10;    var startFadeOut by remember { mutableStateOf(false) }&#10;&#10;    val scaleAnimation by animateFloatAsState(&#10;        targetValue = if (startAnimation) 1f else 0.3f,&#10;        animationSpec = tween(&#10;            durationMillis = 1000,&#10;            easing = FastOutSlowInEasing&#10;        ),&#10;        label = &quot;scale&quot;&#10;    )&#10;&#10;    val alphaAnimation by animateFloatAsState(&#10;        targetValue = if (startAnimation &amp;&amp; !startFadeOut) 1f else 0f,&#10;        animationSpec = tween(&#10;            durationMillis = if (startFadeOut) 800 else 1200,&#10;            delayMillis = if (startFadeOut) 0 else 200,&#10;            easing = if (startFadeOut) FastOutLinearInEasing else FastOutSlowInEasing&#10;        ),&#10;        label = &quot;alpha&quot;&#10;    )&#10;&#10;    val textAlphaAnimation by animateFloatAsState(&#10;        targetValue = if (showText &amp;&amp; !startFadeOut) 1f else 0f,&#10;        animationSpec = tween(&#10;            durationMillis = if (startFadeOut) 600 else 800,&#10;            easing = if (startFadeOut) FastOutLinearInEasing else FastOutSlowInEasing&#10;        ),&#10;        label = &quot;textAlpha&quot;&#10;    )&#10;&#10;    val taglineAlphaAnimation by animateFloatAsState(&#10;        targetValue = if (showTagline &amp;&amp; !startFadeOut) 1f else 0f,&#10;        animationSpec = tween(&#10;            durationMillis = if (startFadeOut) 400 else 600,&#10;            easing = if (startFadeOut) FastOutLinearInEasing else FastOutSlowInEasing&#10;        ),&#10;        label = &quot;taglineAlpha&quot;&#10;    )&#10;&#10;    val rotationAnimation by animateFloatAsState(&#10;        targetValue = if (startAnimation) 360f else 0f,&#10;        animationSpec = tween(&#10;            durationMillis = 2000,&#10;            easing = LinearEasing&#10;        ),&#10;        label = &quot;rotation&quot;&#10;    )&#10;&#10;    val backgroundAlphaAnimation by animateFloatAsState(&#10;        targetValue = if (startFadeOut) 0f else 1f,&#10;        animationSpec = tween(&#10;            durationMillis = 800,&#10;            easing = FastOutLinearInEasing&#10;        ),&#10;        label = &quot;backgroundAlpha&quot;&#10;    )&#10;&#10;    LaunchedEffect(Unit) {&#10;        startAnimation = true&#10;        delay(600)&#10;        showText = true&#10;        delay(400)&#10;        showTagline = true&#10;        delay(1200) // Show splash content&#10;        startFadeOut = true&#10;        delay(800) // Wait for fade out animation to complete&#10;        onNavigateToMain()&#10;    }&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.radialGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF667EEA).copy(alpha = backgroundAlphaAnimation),&#10;                        Color(0xFF764BA2).copy(alpha = backgroundAlphaAnimation),&#10;                        Color(0xFF6B73FF).copy(alpha = backgroundAlphaAnimation)&#10;                    ),&#10;                    radius = 1200f&#10;                )&#10;            ),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Background sparkles&#10;        AnimatedVisibility(&#10;            visible = !startFadeOut,&#10;            exit = fadeOut(animationSpec = tween(600))&#10;        ) {&#10;            SparkleDots()&#10;        }&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            modifier = Modifier&#10;                .scale(scaleAnimation)&#10;                .alpha(alphaAnimation)&#10;        ) {&#10;            // Main Logo Container with glow effect&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(160.dp)&#10;                    .background(&#10;                        Brush.radialGradient(&#10;                            colors = listOf(&#10;                                Color.White.copy(alpha = 0.3f),&#10;                                Color.White.copy(alpha = 0.1f),&#10;                                Color.Transparent&#10;                            ),&#10;                            radius = 200f&#10;                        ),&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                // Inner circle with Aura logo&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(120.dp)&#10;                        .background(&#10;                            Brush.radialGradient(&#10;                                colors = listOf(&#10;                                    Color.White.copy(alpha = 0.95f),&#10;                                    Color.White.copy(alpha = 0.85f)&#10;                                ),&#10;                                radius = 100f&#10;                            ),&#10;                            CircleShape&#10;                        )&#10;                        .rotate(rotationAnimation * 0.1f), // Subtle rotation&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    // Aura Text Logo&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;AURA&quot;,&#10;                            fontSize = 24.sp,&#10;                            fontWeight = FontWeight.ExtraBold,&#10;                            color = Color(0xFF4F46E5),&#10;                            letterSpacing = 2.sp&#10;                        )&#10;&#10;                        // Budget indication with dollar icon&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.Center&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.AttachMoney,&#10;                                contentDescription = null,&#10;                                tint = Color(0xFF10B981),&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;BUDGET&quot;,&#10;                                fontSize = 10.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color(0xFF10B981),&#10;                                letterSpacing = 1.sp&#10;                            )&#10;                            Icon(&#10;                                imageVector = Icons.Default.TrendingUp,&#10;                                contentDescription = null,&#10;                                tint = Color(0xFFF59E0B),&#10;                                modifier = Modifier&#10;                                    .size(14.dp)&#10;                                    .rotate(rotationAnimation * 0.5f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // App Name with animation&#10;            AnimatedVisibility(&#10;                visible = showText,&#10;                enter = slideInVertically(&#10;                    initialOffsetY = { it },&#10;                    animationSpec = tween(800)&#10;                ) + fadeIn(tween(800))&#10;            ) {&#10;                Text(&#10;                    text = &quot;AuraBudget&quot;,&#10;                    fontSize = 36.sp,&#10;                    fontWeight = FontWeight.ExtraBold,&#10;                    color = Color.White,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.alpha(textAlphaAnimation)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Tagline&#10;            AnimatedVisibility(&#10;                visible = showTagline,&#10;                enter = slideInVertically(&#10;                    initialOffsetY = { it / 2 },&#10;                    animationSpec = tween(600)&#10;                ) + fadeIn(tween(600))&#10;            ) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .alpha(taglineAlphaAnimation)&#10;                        .padding(horizontal = 16.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = Color.White.copy(alpha = 0.15f)&#10;                    ),&#10;                    shape = RoundedCornerShape(20.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Your Financial Journey Starts Here&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = Color.White.copy(alpha = 0.9f),&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.padding(horizontal = 24.dp, vertical = 12.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Loading indicator at bottom&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .padding(bottom = 100.dp)&#10;        ) {&#10;            CircularProgressIndicator(&#10;                color = Color.White.copy(alpha = 0.6f),&#10;                strokeWidth = 2.dp,&#10;                modifier = Modifier&#10;                    .size(24.dp)&#10;                    .alpha(alphaAnimation)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SparkleDots() {&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;sparkle&quot;)&#10;&#10;    val sparkle1Alpha by infiniteTransition.animateFloat(&#10;        initialValue = 0.3f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(2000),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;sparkle1&quot;&#10;    )&#10;&#10;    val sparkle2Alpha by infiniteTransition.animateFloat(&#10;        initialValue = 1f,&#10;        targetValue = 0.3f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(1500),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;sparkle2&quot;&#10;    )&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Sparkle dots positioned around the screen&#10;        listOf(&#10;            Offset(0.15f, 0.2f) to sparkle1Alpha,&#10;            Offset(0.85f, 0.15f) to sparkle2Alpha,&#10;            Offset(0.1f, 0.7f) to sparkle2Alpha,&#10;            Offset(0.9f, 0.75f) to sparkle1Alpha,&#10;            Offset(0.25f, 0.85f) to sparkle1Alpha,&#10;            Offset(0.75f, 0.85f) to sparkle2Alpha&#10;        ).forEach { (offset, alpha) -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .wrapContentSize(Alignment.TopStart)&#10;                    .offset(&#10;                        x = (offset.x * 300).dp,&#10;                        y = (offset.y * 600).dp&#10;                    )&#10;                    .size(4.dp)&#10;                    .background(&#10;                        Color.White.copy(alpha = alpha),&#10;                        CircleShape&#10;                    )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;private data class Offset(val x: Float, val y: Float)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AttachMoney&#10;import androidx.compose.material.icons.filled.TrendingUp&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.draw.scale&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.delay&#10;import `in`.sitharaj.aurabudget.R&#10;&#10;@Composable&#10;fun SplashScreen(&#10;    onNavigateToMain: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var startAnimation by remember { mutableStateOf(false) }&#10;    var showText by remember { mutableStateOf(false) }&#10;    var showTagline by remember { mutableStateOf(false) }&#10;    var startFadeOut by remember { mutableStateOf(false) }&#10;&#10;    // Enhanced spring animations for smoother feel&#10;    val scaleAnimation by animateFloatAsState(&#10;        targetValue = if (startAnimation) 1f else 0.0f,&#10;        animationSpec = spring(&#10;            dampingRatio = Spring.DampingRatioMediumBouncy,&#10;            stiffness = Spring.StiffnessLow,&#10;            visibilityThreshold = 0.001f&#10;        ),&#10;        label = &quot;scale&quot;&#10;    )&#10;&#10;    val logoAlphaAnimation by animateFloatAsState(&#10;        targetValue = if (startAnimation &amp;&amp; !startFadeOut) 1f else 0f,&#10;        animationSpec = if (startFadeOut) {&#10;            tween(&#10;                durationMillis = 600,&#10;                easing = FastOutLinearInEasing&#10;            )&#10;        } else {&#10;            spring(&#10;                dampingRatio = Spring.DampingRatioLowBouncy,&#10;                stiffness = Spring.StiffnessMedium&#10;            )&#10;        },&#10;        label = &quot;logoAlpha&quot;&#10;    )&#10;&#10;    val textScaleAnimation by animateFloatAsState(&#10;        targetValue = if (showText &amp;&amp; !startFadeOut) 1f else 0.8f,&#10;        animationSpec = spring(&#10;            dampingRatio = Spring.DampingRatioMediumBouncy,&#10;            stiffness = Spring.StiffnessLow&#10;        ),&#10;        label = &quot;textScale&quot;&#10;    )&#10;&#10;    val textAlphaAnimation by animateFloatAsState(&#10;        targetValue = if (showText &amp;&amp; !startFadeOut) 1f else 0f,&#10;        animationSpec = if (startFadeOut) {&#10;            tween(&#10;                durationMillis = 400,&#10;                easing = FastOutLinearInEasing&#10;            )&#10;        } else {&#10;            tween(&#10;                durationMillis = 800,&#10;                easing = CubicBezierEasing(0.25f, 0.46f, 0.45f, 0.94f)&#10;            )&#10;        },&#10;        label = &quot;textAlpha&quot;&#10;    )&#10;&#10;    val taglineScaleAnimation by animateFloatAsState(&#10;        targetValue = if (showTagline &amp;&amp; !startFadeOut) 1f else 0.9f,&#10;        animationSpec = spring(&#10;            dampingRatio = Spring.DampingRatioMediumBouncy,&#10;            stiffness = Spring.StiffnessMedium&#10;        ),&#10;        label = &quot;taglineScale&quot;&#10;    )&#10;&#10;    val taglineAlphaAnimation by animateFloatAsState(&#10;        targetValue = if (showTagline &amp;&amp; !startFadeOut) 1f else 0f,&#10;        animationSpec = if (startFadeOut) {&#10;            tween(&#10;                durationMillis = 300,&#10;                easing = FastOutLinearInEasing&#10;            )&#10;        } else {&#10;            tween(&#10;                durationMillis = 600,&#10;                delayMillis = 200,&#10;                easing = CubicBezierEasing(0.25f, 0.46f, 0.45f, 0.94f)&#10;            )&#10;        },&#10;        label = &quot;taglineAlpha&quot;&#10;    )&#10;&#10;    // Smooth continuous rotation&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;infinite&quot;)&#10;    val rotationAnimation by infiniteTransition.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = 360f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(&#10;                durationMillis = 20000,&#10;                easing = LinearEasing&#10;            ),&#10;            repeatMode = RepeatMode.Restart&#10;        ),&#10;        label = &quot;rotation&quot;&#10;    )&#10;&#10;    val pulseAnimation by infiniteTransition.animateFloat(&#10;        initialValue = 0.95f,&#10;        targetValue = 1.05f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(&#10;                durationMillis = 2000,&#10;                easing = CubicBezierEasing(0.4f, 0.0f, 0.6f, 1.0f)&#10;            ),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;pulse&quot;&#10;    )&#10;&#10;    val backgroundAlphaAnimation by animateFloatAsState(&#10;        targetValue = if (startFadeOut) 0f else 1f,&#10;        animationSpec = tween(&#10;            durationMillis = 600,&#10;            easing = FastOutLinearInEasing&#10;        ),&#10;        label = &quot;backgroundAlpha&quot;&#10;    )&#10;&#10;    LaunchedEffect(Unit) {&#10;        delay(100) // Small initial delay for smooth start&#10;        startAnimation = true&#10;        delay(800) // Wait for logo animation&#10;        showText = true&#10;        delay(600) // Wait for text animation&#10;        showTagline = true&#10;        delay(1200) // Display time&#10;        startFadeOut = true&#10;        delay(600) // Wait for fade out&#10;        onNavigateToMain()&#10;    }&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                Brush.radialGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF667EEA).copy(alpha = backgroundAlphaAnimation),&#10;                        Color(0xFF764BA2).copy(alpha = backgroundAlphaAnimation),&#10;                        Color(0xFF6B73FF).copy(alpha = backgroundAlphaAnimation)&#10;                    ),&#10;                    radius = 1500f&#10;                )&#10;            ),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Enhanced background sparkles with smoother animations&#10;        SparkleDots(visible = !startFadeOut)&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            modifier = Modifier&#10;                .scale(scaleAnimation)&#10;                .alpha(logoAlphaAnimation)&#10;        ) {&#10;            // Main Logo Container with enhanced glow effect&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(180.dp)&#10;                    .scale(pulseAnimation)&#10;                    .background(&#10;                        Brush.radialGradient(&#10;                            colors = listOf(&#10;                                Color.White.copy(alpha = 0.4f),&#10;                                Color.White.copy(alpha = 0.2f),&#10;                                Color.White.copy(alpha = 0.05f),&#10;                                Color.Transparent&#10;                            ),&#10;                            radius = 300f&#10;                        ),&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                // Inner circle with enhanced design&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(140.dp)&#10;                        .background(&#10;                            Brush.radialGradient(&#10;                                colors = listOf(&#10;                                    Color.White.copy(alpha = 0.98f),&#10;                                    Color.White.copy(alpha = 0.92f),&#10;                                    Color.White.copy(alpha = 0.85f)&#10;                                ),&#10;                                radius = 120f&#10;                            ),&#10;                            CircleShape&#10;                        )&#10;                        .rotate(rotationAnimation * 0.1f),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    // Enhanced logo content&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;AURA&quot;,&#10;                            fontSize = 28.sp,&#10;                            fontWeight = FontWeight.ExtraBold,&#10;                            color = Color(0xFF4F46E5),&#10;                            letterSpacing = 3.sp&#10;                        )&#10;&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.Center,&#10;                            modifier = Modifier.padding(top = 2.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.AttachMoney,&#10;                                contentDescription = null,&#10;                                tint = Color(0xFF10B981),&#10;                                modifier = Modifier&#10;                                    .size(18.dp)&#10;                                    .scale(pulseAnimation * 0.8f + 0.2f)&#10;                            )&#10;                            Text(&#10;                                text = &quot;BUDGET&quot;,&#10;                                fontSize = 11.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color(0xFF10B981),&#10;                                letterSpacing = 1.5.sp&#10;                            )&#10;                            Icon(&#10;                                imageVector = Icons.Default.TrendingUp,&#10;                                contentDescription = null,&#10;                                tint = Color(0xFFF59E0B),&#10;                                modifier = Modifier&#10;                                    .size(16.dp)&#10;                                    .rotate(rotationAnimation * 0.3f)&#10;                                    .scale(pulseAnimation * 0.6f + 0.4f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;&#10;            // Enhanced app name with better animation&#10;            Text(&#10;                text = &quot;AuraBudget&quot;,&#10;                fontSize = 42.sp,&#10;                fontWeight = FontWeight.ExtraBold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier&#10;                    .scale(textScaleAnimation)&#10;                    .alpha(textAlphaAnimation)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Enhanced tagline with card design&#10;            Card(&#10;                modifier = Modifier&#10;                    .scale(taglineScaleAnimation)&#10;                    .alpha(taglineAlphaAnimation)&#10;                    .padding(horizontal = 20.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = Color.White.copy(alpha = 0.2f)&#10;                ),&#10;                shape = RoundedCornerShape(25.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Your Financial Journey Starts Here&quot;,&#10;                    fontSize = 15.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = Color.White.copy(alpha = 0.95f),&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(horizontal = 28.dp, vertical = 14.dp)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Enhanced loading indicator&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .padding(bottom = 80.dp)&#10;                .alpha(logoAlphaAnimation)&#10;        ) {&#10;            CircularProgressIndicator(&#10;                color = Color.White.copy(alpha = 0.8f),&#10;                strokeWidth = 3.dp,&#10;                modifier = Modifier&#10;                    .size(28.dp)&#10;                    .scale(pulseAnimation * 0.2f + 0.8f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SparkleDots(visible: Boolean) {&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;sparkle&quot;)&#10;&#10;    val sparkle1Alpha by infiniteTransition.animateFloat(&#10;        initialValue = 0.3f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(2000),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;sparkle1&quot;&#10;    )&#10;&#10;    val sparkle2Alpha by infiniteTransition.animateFloat(&#10;        initialValue = 1f,&#10;        targetValue = 0.3f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(1500),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;sparkle2&quot;&#10;    )&#10;&#10;    if (visible) {&#10;        Box(modifier = Modifier.fillMaxSize()) {&#10;            // Sparkle dots positioned around the screen&#10;            listOf(&#10;                Offset(0.15f, 0.2f) to sparkle1Alpha,&#10;                Offset(0.85f, 0.15f) to sparkle2Alpha,&#10;                Offset(0.1f, 0.7f) to sparkle2Alpha,&#10;                Offset(0.9f, 0.75f) to sparkle1Alpha,&#10;                Offset(0.25f, 0.85f) to sparkle1Alpha,&#10;                Offset(0.75f, 0.85f) to sparkle2Alpha&#10;            ).forEach { (offset, alpha) -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .wrapContentSize(Alignment.TopStart)&#10;                        .offset(&#10;                            x = (offset.x * 300).dp,&#10;                            y = (offset.y * 600).dp&#10;                        )&#10;                        .size(4.dp)&#10;                        .background(&#10;                            Color.White.copy(alpha = alpha),&#10;                            CircleShape&#10;                        )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private data class Offset(val x: Float, val y: Float)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/BudgetRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/BudgetRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Budget&#10;import in.sitharaj.aurabudget.data.BudgetDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class BudgetRepository @Inject constructor(&#10;    private val budgetDao: BudgetDao&#10;) {&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt; = budgetDao.getAllBudgets()&#10;&#10;    suspend fun insertBudget(budget: Budget) = budgetDao.insertBudget(budget)&#10;&#10;    suspend fun deleteBudget(budget: Budget) = budgetDao.deleteBudget(budget)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/CategoryRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/CategoryRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Category&#10;import in.sitharaj.aurabudget.data.CategoryDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class CategoryRepository @Inject constructor(&#10;    private val categoryDao: CategoryDao&#10;) {&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt; = categoryDao.getAllCategories()&#10;&#10;    suspend fun insertCategory(category: Category) = categoryDao.insertCategory(category)&#10;&#10;    suspend fun deleteCategory(category: Category) = categoryDao.deleteCategory(category)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/ExpenseRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/ExpenseRepository.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Expense&#10;import in.sitharaj.aurabudget.data.ExpenseDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class ExpenseRepository @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) {&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt; = expenseDao.getAllExpenses()&#10;&#10;    suspend fun insertExpense(expense: Expense) = expenseDao.insertExpense(expense)&#10;&#10;    suspend fun deleteExpense(expense: Expense) = expenseDao.deleteExpense(expense)&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.Expense&#10;import `in`.sitharaj.aurabudget.data.ExpenseDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class ExpenseRepository @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) {&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt; = expenseDao.getAllExpenses()&#10;&#10;    suspend fun insertExpense(expense: Expense) = expenseDao.insertExpense(expense)&#10;&#10;    suspend fun deleteExpense(expense: Expense) = expenseDao.deleteExpense(expense)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/PreferencesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/PreferencesRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.UserPreferencesManager&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class PreferencesRepository @Inject constructor(&#10;    private val userPreferencesManager: UserPreferencesManager&#10;) {&#10;    val isDarkTheme: Flow&lt;Boolean&gt; = userPreferencesManager.isDarkTheme&#10;&#10;    suspend fun setDarkTheme(enabled: Boolean) = userPreferencesManager.setDarkTheme(enabled)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/BudgetViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/BudgetViewModel.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    val budgets = budgetRepository.getAllBudgets()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.insertBudget(budget)&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.deleteBudget(budget)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.data.Budget&#10;import `in`.sitharaj.aurabudget.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    val budgets = budgetRepository.getAllBudgets()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.insertBudget(budget)&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.deleteBudget(budget)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/CategoryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/CategoryViewModel.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import `in`.sitharaj.aurabudget.data.Category&#10;import `in`.sitharaj.aurabudget.repository.CategoryRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CategoryViewModel @Inject constructor(&#10;    private val categoryRepository: CategoryRepository&#10;) : ViewModel() {&#10;&#10;    val categories = categoryRepository.getAllCategories()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            categoryRepository.insertCategory(category)&#10;        }&#10;    }&#10;&#10;    fun deleteCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            categoryRepository.deleteCategory(category)&#10;        }&#10;    }&#10;&#10;    init {&#10;        // Initialize with default categories if none exist&#10;        viewModelScope.launch {&#10;            addCategory(Category(name = &quot;Food &amp; Dining&quot;))&#10;            addCategory(Category(name = &quot;Transportation&quot;))&#10;            addCategory(Category(name = &quot;Shopping&quot;))&#10;            addCategory(Category(name = &quot;Entertainment&quot;))&#10;            addCategory(Category(name = &quot;Bills &amp; Utilities&quot;))&#10;            addCategory(Category(name = &quot;Healthcare&quot;))&#10;            addCategory(Category(name = &quot;Travel&quot;))&#10;            addCategory(Category(name = &quot;Other&quot;))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ExpenseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ExpenseViewModel.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import in.sitharaj.aurabudget.data.Expense&#10;import in.sitharaj.aurabudget.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ExpenseViewModel @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) : ViewModel() {&#10;&#10;    val expenses = expenseRepository.getAllExpenses()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            expenseRepository.insertExpense(expense)&#10;        }&#10;    }&#10;&#10;    fun deleteExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            expenseRepository.deleteExpense(expense)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ThemeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ThemeViewModel.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import in.sitharaj.aurabudget.repository.PreferencesRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ThemeViewModel @Inject constructor(&#10;    private val preferencesRepository: PreferencesRepository&#10;) : ViewModel() {&#10;&#10;    val isDarkTheme = preferencesRepository.isDarkTheme&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = false&#10;        )&#10;&#10;    fun toggleTheme() {&#10;        viewModelScope.launch {&#10;            preferencesRepository.setDarkTheme(!isDarkTheme.value)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:aapt=&quot;http://schemas.android.com/aapt&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:height=&quot;108dp&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    android:viewportHeight=&quot;108&quot;&gt;&#10;&#10;    &lt;!-- Modern dark background --&gt;&#10;    &lt;path android:pathData=&quot;M0,0h108v108h-108z&quot;&gt;&#10;        &lt;aapt:attr name=&quot;android:fillColor&quot;&gt;&#10;            &lt;gradient&#10;                android:type=&quot;linear&quot;&#10;                android:startX=&quot;0&quot;&#10;                android:startY=&quot;0&quot;&#10;                android:endX=&quot;108&quot;&#10;                android:endY=&quot;108&quot;&gt;&#10;                &lt;item android:offset=&quot;0&quot; android:color=&quot;#FF1E293B&quot;/&gt;&#10;                &lt;item android:offset=&quot;0.5&quot; android:color=&quot;#FF334155&quot;/&gt;&#10;                &lt;item android:offset=&quot;1&quot; android:color=&quot;#FF0F172A&quot;/&gt;&#10;            &lt;/gradient&gt;&#10;        &lt;/aapt:attr&gt;&#10;    &lt;/path&gt;&#10;&#10;&lt;/vector&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:aapt=&quot;http://schemas.android.com/aapt&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:height=&quot;108dp&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    android:viewportHeight=&quot;108&quot;&gt;&#10;    &#10;    &lt;!-- Solid gradient background --&gt;&#10;    &lt;path android:pathData=&quot;M0,0h108v108h-108z&quot;&gt;&#10;        &lt;aapt:attr name=&quot;android:fillColor&quot;&gt;&#10;            &lt;gradient&#10;                android:type=&quot;linear&quot;&#10;                android:startX=&quot;20&quot;&#10;                android:startY=&quot;20&quot;&#10;                android:endX=&quot;88&quot;&#10;                android:endY=&quot;88&quot;&gt;&#10;                &lt;item android:offset=&quot;0&quot; android:color=&quot;#FF667EEA&quot;/&gt;&#10;                &lt;item android:offset=&quot;1&quot; android:color=&quot;#FF764BA2&quot;/&gt;&#10;            &lt;/gradient&gt;&#10;        &lt;/aapt:attr&gt;&#10;    &lt;/path&gt;&#10;        &#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_foreground.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_foreground.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:aapt=&quot;http://schemas.android.com/aapt&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:height=&quot;108dp&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    android:viewportHeight=&quot;108&quot;&gt;&#10;&#10;    &lt;!-- Modern circular container with glow --&gt;&#10;    &lt;path&#10;        android:pathData=&quot;M 54,20 A 34,34 0 0,1 54,88 A 34,34 0 0,1 54,20 Z&quot;&#10;        android:fillColor=&quot;#FF10B981&quot;&#10;        android:fillAlpha=&quot;0.1&quot;/&gt;&#10;&#10;    &lt;path&#10;        android:pathData=&quot;M 54,22 A 32,32 0 0,1 54,86 A 32,32 0 0,1 54,22 Z&quot;&gt;&#10;        &lt;aapt:attr name=&quot;android:fillColor&quot;&gt;&#10;            &lt;gradient&#10;                android:type=&quot;radial&quot;&#10;                android:centerX=&quot;54&quot;&#10;                android:centerY=&quot;54&quot;&#10;                android:gradientRadius=&quot;32&quot;&gt;&#10;                &lt;item android:offset=&quot;0&quot; android:color=&quot;#FF10B981&quot;/&gt;&#10;                &lt;item android:offset=&quot;0.7&quot; android:color=&quot;#FF059669&quot;/&gt;&#10;                &lt;item android:offset=&quot;1&quot; android:color=&quot;#FF047857&quot;/&gt;&#10;            &lt;/gradient&gt;&#10;        &lt;/aapt:attr&gt;&#10;    &lt;/path&gt;&#10;&#10;    &lt;!-- Modern &quot;₹&quot; rupee symbol - large and centered --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M 42,42 L 66,42 M 42,48 L 62,48 M 42,54 C 42,54 50,54 54,54 C 58,54 62,58 62,62 C 62,66 58,70 54,70 L 42,70 M 54,70 L 66,82&quot;/&gt;&#10;&#10;    &lt;!-- Subtle ascending dots pattern --&gt;&#10;    &lt;path&#10;        android:pathData=&quot;M 48,64 A 1,1 0 0,1 48,66 A 1,1 0 0,1 48,64 Z&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:fillAlpha=&quot;0.6&quot;/&gt;&#10;    &lt;path&#10;        android:pathData=&quot;M 52,62 A 1.5,1.5 0 0,1 52,65 A 1.5,1.5 0 0,1 52,62 Z&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:fillAlpha=&quot;0.8&quot;/&gt;&#10;    &lt;path&#10;        android:pathData=&quot;M 56,60 A 2,2 0 0,1 56,64 A 2,2 0 0,1 56,60 Z&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;/&gt;&#10;&#10;&lt;/vector&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:aapt=&quot;http://schemas.android.com/aapt&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:height=&quot;108dp&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    android:viewportHeight=&quot;108&quot;&gt;&#10;&#10;    &lt;!-- Modern circular container with glow --&gt;&#10;    &lt;path&#10;        android:pathData=&quot;M 54,20 A 34,34 0 0,1 54,88 A 34,34 0 0,1 54,20 Z&quot;&#10;        android:fillColor=&quot;#FF10B981&quot;&#10;        android:fillAlpha=&quot;0.1&quot;/&gt;&#10;&#10;    &lt;path&#10;        android:pathData=&quot;M 54,22 A 32,32 0 0,1 54,86 A 32,32 0 0,1 54,22 Z&quot;&gt;&#10;        &lt;aapt:attr name=&quot;android:fillColor&quot;&gt;&#10;            &lt;gradient&#10;                android:type=&quot;radial&quot;&#10;                android:centerX=&quot;54&quot;&#10;                android:centerY=&quot;54&quot;&#10;                android:gradientRadius=&quot;32&quot;&gt;&#10;                &lt;item android:offset=&quot;0&quot; android:color=&quot;#FF10B981&quot;/&gt;&#10;                &lt;item android:offset=&quot;0.7&quot; android:color=&quot;#FF059669&quot;/&gt;&#10;                &lt;item android:offset=&quot;1&quot; android:color=&quot;#FF047857&quot;/&gt;&#10;            &lt;/gradient&gt;&#10;        &lt;/aapt:attr&gt;&#10;    &lt;/path&gt;&#10;&#10;    &lt;!-- Modern &quot;₹&quot; rupee symbol - large and centered --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M 42,42 L 66,42 M 42,48 L 62,48 M 42,54 C 42,54 50,54 54,54 C 58,54 62,58 62,62 C 62,66 58,70 54,70 L 42,70 M 54,70 L 66,82&quot;/&gt;&#10;&#10;    &lt;!-- Subtle ascending dots pattern --&gt;&#10;    &lt;path&#10;        android:pathData=&quot;M 48,64 A 1,1 0 0,1 48,66 A 1,1 0 0,1 48,64 Z&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:fillAlpha=&quot;0.6&quot;/&gt;&#10;    &lt;path&#10;        android:pathData=&quot;M 52,62 A 1.5,1.5 0 0,1 52,65 A 1.5,1.5 0 0,1 52,62 Z&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:fillAlpha=&quot;0.8&quot;/&gt;&#10;    &lt;path&#10;        android:pathData=&quot;M 56,60 A 2,2 0 0,1 56,64 A 2,2 0 0,1 56,60 Z&quot;&#10;        android:fillColor=&quot;#FFFFFF&quot;/&gt;&#10;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/splash_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/splash_background.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&#10;    &lt;!-- Background gradient that matches your splash screen --&gt;&#10;    &lt;item&gt;&#10;        &lt;shape android:shape=&quot;rectangle&quot;&gt;&#10;            &lt;gradient&#10;                android:type=&quot;radial&quot;&#10;                android:centerX=&quot;0.5&quot;&#10;                android:centerY=&quot;0.5&quot;&#10;                android:gradientRadius=&quot;600dp&quot;&gt;&#10;                &lt;item android:offset=&quot;0&quot; android:color=&quot;#FF667EEA&quot;/&gt;&#10;                &lt;item android:offset=&quot;0.7&quot; android:color=&quot;#FF764BA2&quot;/&gt;&#10;                &lt;item android:offset=&quot;1&quot; android:color=&quot;#FF6B73FF&quot;/&gt;&#10;            &lt;/gradient&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;&#10;    &lt;!-- Optional: Add a subtle logo in the center (you can remove this if you don't want it) --&gt;&#10;    &lt;item android:gravity=&quot;center&quot;&gt;&#10;        &lt;shape android:shape=&quot;oval&quot;&gt;&#10;            &lt;size android:width=&quot;120dp&quot; android:height=&quot;120dp&quot;/&gt;&#10;            &lt;solid android:color=&quot;#22FFFFFF&quot;/&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;&#10;&lt;/layer-list&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;gradient&#10;        android:type=&quot;linear&quot;&#10;        android:angle=&quot;135&quot;&#10;        android:startColor=&quot;#FF667EEA&quot;&#10;        android:centerColor=&quot;#FF764BA2&quot;&#10;        android:endColor=&quot;#FF6B73FF&quot;/&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/splash_screen.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/splash_screen.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &#10;    &lt;!-- Background --&gt;&#10;    &lt;item android:drawable=&quot;@drawable/splash_background&quot; /&gt;&#10;    &#10;    &lt;!-- Aura Logo centered --&gt;&#10;    &lt;item&#10;        android:drawable=&quot;@drawable/aura_logo&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:width=&quot;150dp&quot;&#10;        android:height=&quot;150dp&quot; /&gt;&#10;    &#10;    &lt;!-- Budget text below logo --&gt;&#10;    &lt;item android:gravity=&quot;center_horizontal|bottom&quot;&#10;        android:bottom=&quot;200dp&quot;&gt;&#10;        &lt;shape android:shape=&quot;rectangle&quot;&gt;&#10;            &lt;solid android:color=&quot;@android:color/transparent&quot; /&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;    &#10;    &lt;!-- Sparkle effects around logo --&gt;&#10;    &lt;item android:gravity=&quot;center&quot;&#10;        android:left=&quot;100dp&quot;&#10;        android:top=&quot;100dp&quot;&gt;&#10;        &lt;shape android:shape=&quot;oval&quot;&gt;&#10;            &lt;solid android:color=&quot;#FFFFFF&quot; /&gt;&#10;            &lt;size android:width=&quot;4dp&quot; android:height=&quot;4dp&quot; /&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;    &#10;    &lt;item android:gravity=&quot;center&quot;&#10;        android:right=&quot;120dp&quot;&#10;        android:top=&quot;80dp&quot;&gt;&#10;        &lt;shape android:shape=&quot;oval&quot;&gt;&#10;            &lt;solid android:color=&quot;#FFFFFF&quot; /&gt;&#10;            &lt;size android:width=&quot;3dp&quot; android:height=&quot;3dp&quot; /&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;    &#10;    &lt;item android:gravity=&quot;center&quot;&#10;        android:left=&quot;80dp&quot;&#10;        android:bottom=&quot;120dp&quot;&gt;&#10;        &lt;shape android:shape=&quot;oval&quot;&gt;&#10;            &lt;solid android:color=&quot;#FFFFFF&quot; /&gt;&#10;            &lt;size android:width=&quot;2dp&quot; android:height=&quot;2dp&quot; /&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;    &#10;&lt;/layer-list&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/font/inter_regular.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/font/inter_regular.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;!-- This is a placeholder font file. Replace with actual Inter Regular font --&gt;&#10;&lt;font-family xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;font&#10;        android:fontStyle=&quot;normal&quot;&#10;        android:fontWeight=&quot;400&quot;&#10;        android:font=&quot;@font/inter_regular&quot; /&gt;&#10;&lt;/font-family&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Simple Material Theme that's compatible --&gt;&#10;    &lt;style name=&quot;Theme.AuraBudget&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot;&gt;&#10;        &lt;!-- Status bar and navigation bar --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/status_bar_color&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@color/navigation_bar_color&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;&#10;        &lt;!-- Window configuration --&gt;&#10;        &lt;item name=&quot;android:windowContentOverlay&quot;&gt;@null&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowActionBar&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Splash Theme for optimal startup experience --&gt;&#10;    &lt;style name=&quot;Theme.AuraBudget.Splash&quot; parent=&quot;Theme.AuraBudget&quot;&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/splash_screen&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowFullscreen&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowDrawsSystemBarBackgrounds&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Simple Material Theme that's compatible --&gt;&#10;    &lt;style name=&quot;Theme.AuraBudget&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot;&gt;&#10;        &lt;!-- Status bar and navigation bar --&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/status_bar_color&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;@color/navigation_bar_color&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;&#10;        &lt;!-- Window configuration --&gt;&#10;        &lt;item name=&quot;android:windowContentOverlay&quot;&gt;@null&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowActionBar&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Splash Theme for optimal startup experience --&gt;&#10;    &lt;style name=&quot;Theme.AuraBudget.Splash&quot; parent=&quot;Theme.AuraBudget&quot;&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/splash_background&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowFullscreen&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowDrawsSystemBarBackgrounds&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:statusBarColor&quot;&gt;#FF667EEA&lt;/item&gt;&#10;        &lt;item name=&quot;android:navigationBarColor&quot;&gt;#FF6B73FF&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightStatusBar&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowLightNavigationBar&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>