<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AuraBudgetApp&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/MainActivity.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import `in`.sitharaj.aurabudget.presentation.screen.EnhancedExpenseScreen&#10;import `in`.sitharaj.aurabudget.ui.screens.SettingsScreen&#10;import `in`.sitharaj.aurabudget.ui.screens.SplashScreen&#10;import `in`.sitharaj.aurabudget.ui.theme.AuraBudgetTheme&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ThemeViewModel&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AuraBudgetScreen()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AuraBudgetScreen() {&#10;    val themeViewModel: ThemeViewModel = hiltViewModel()&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    AuraBudgetTheme(darkTheme = isDarkTheme) {&#10;        val navController = rememberNavController()&#10;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = &quot;splash&quot;&#10;        ) {&#10;            composable(&quot;splash&quot;) {&#10;                SplashScreen(onNavigateToMain = {&#10;                    navController.navigate(&quot;dashboard&quot;) {&#10;                        popUpTo(&quot;splash&quot;) { inclusive = true }&#10;                    }&#10;                })&#10;            }&#10;            composable(&quot;dashboard&quot;) {&#10;                EnhancedDashboardScreen(navController = navController)&#10;            }&#10;            composable(&quot;expenses&quot;) {&#10;                EnhancedExpenseScreen(navController = navController)&#10;            }&#10;            composable(&quot;settings&quot;) {&#10;                SettingsScreen(navController = navController)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import `in`.sitharaj.aurabudget.presentation.screen.EnhancedDashboardScreen&#10;import `in`.sitharaj.aurabudget.presentation.screen.EnhancedExpenseScreen&#10;import `in`.sitharaj.aurabudget.presentation.screen.settings.SettingsScreen&#10;import `in`.sitharaj.aurabudget.ui.screens.SplashScreen&#10;import `in`.sitharaj.aurabudget.ui.theme.AuraBudgetTheme&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ThemeViewModel&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AuraBudgetScreen()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AuraBudgetScreen() {&#10;    val themeViewModel: ThemeViewModel = hiltViewModel()&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    AuraBudgetTheme(darkTheme = isDarkTheme) {&#10;        val navController = rememberNavController()&#10;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = &quot;splash&quot;&#10;        ) {&#10;            composable(&quot;splash&quot;) {&#10;                SplashScreen(onNavigateToMain = {&#10;                    navController.navigate(&quot;dashboard&quot;) {&#10;                        popUpTo(&quot;splash&quot;) { inclusive = true }&#10;                    }&#10;                })&#10;            }&#10;            composable(&quot;dashboard&quot;) {&#10;                EnhancedDashboardScreen(navController = navController)&#10;            }&#10;            composable(&quot;expenses&quot;) {&#10;                EnhancedExpenseScreen(navController = navController)&#10;            }&#10;            composable(&quot;settings&quot;) {&#10;                SettingsScreen(navController = navController)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/AppDatabase.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Database&#10;import androidx.room.RoomDatabase&#10;&#10;@Database(&#10;    entities = [Expense::class, Budget::class, Category::class],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;abstract class AppDatabase : RoomDatabase() {&#10;    abstract fun expenseDao(): ExpenseDao&#10;    abstract fun budgetDao(): BudgetDao&#10;    abstract fun categoryDao(): CategoryDao&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Database&#10;import androidx.room.RoomDatabase&#10;&#10;@Database(&#10;    entities = [Expense::class, Budget::class, Category::class],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;abstract class AppDatabase : RoomDatabase() {&#10;    abstract fun expenseDao(): ExpenseDao&#10;    abstract fun budgetDao(): BudgetDao&#10;    abstract fun categoryDao(): CategoryDao&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Budget.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Budget.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;budgets&quot;)&#10;data class Budget(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val amount: Double,&#10;    val startDate: Long,&#10;    val endDate: Long&#10;)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;budgets&quot;)&#10;data class Budget(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val amount: Double,&#10;    val startDate: Long,&#10;    val endDate: Long&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Category.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Category.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;categories&quot;)&#10;data class Category(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val icon: String? = null // Store icon name or url if needed&#10;)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;categories&quot;)&#10;data class Category(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val icon: String? = null // Store icon name or url if needed&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Dao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Dao.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.*&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface ExpenseDao {&#10;    @Query(&quot;SELECT * FROM expenses ORDER BY date DESC&quot;)&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertExpense(expense: Expense)&#10;&#10;    @Delete&#10;    suspend fun deleteExpense(expense: Expense)&#10;}&#10;&#10;@Dao&#10;interface BudgetDao {&#10;    @Query(&quot;SELECT * FROM budgets ORDER BY startDate DESC&quot;)&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertBudget(budget: Budget)&#10;&#10;    @Delete&#10;    suspend fun deleteBudget(budget: Budget)&#10;}&#10;&#10;@Dao&#10;interface CategoryDao {&#10;    @Query(&quot;SELECT * FROM categories ORDER BY name ASC&quot;)&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertCategory(category: Category)&#10;&#10;    @Delete&#10;    suspend fun deleteCategory(category: Category)&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.*&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface ExpenseDao {&#10;    @Query(&quot;SELECT * FROM expenses ORDER BY date DESC&quot;)&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertExpense(expense: Expense)&#10;&#10;    @Delete&#10;    suspend fun deleteExpense(expense: Expense)&#10;}&#10;&#10;@Dao&#10;interface BudgetDao {&#10;    @Query(&quot;SELECT * FROM budgets ORDER BY startDate DESC&quot;)&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertBudget(budget: Budget)&#10;&#10;    @Delete&#10;    suspend fun deleteBudget(budget: Budget)&#10;}&#10;&#10;@Dao&#10;interface CategoryDao {&#10;    @Query(&quot;SELECT * FROM categories ORDER BY name ASC&quot;)&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertCategory(category: Category)&#10;&#10;    @Delete&#10;    suspend fun deleteCategory(category: Category)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/DatabaseModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/DatabaseModule.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object DatabaseModule {&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext appContext: Context): AppDatabase =&#10;        Room.databaseBuilder(appContext, AppDatabase::class.java, &quot;aurabudget_db&quot;).build()&#10;&#10;    @Provides&#10;    fun provideExpenseDao(db: AppDatabase): ExpenseDao = db.expenseDao()&#10;&#10;    // TODO: Add other DAOs when implemented&#10;    // @Provides&#10;    // TODO: Add other DAOs when implemented&#10;    // @Provides&#10;    // fun provideBudgetDao(db: AppDatabase) = db.budgetDao()&#10;&#10;    // @Provides&#10;    // fun provideCategoryDao(db: AppDatabase) = db.categoryDao()&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;import `in`.sitharaj.aurabudget.data.local.dao.BudgetDao&#10;import `in`.sitharaj.aurabudget.data.local.dao.CategoryDao&#10;import `in`.sitharaj.aurabudget.data.local.database.AppDatabase&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object DatabaseModule {&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext appContext: Context): AppDatabase =&#10;        Room.databaseBuilder(appContext, AppDatabase::class.java, &quot;aurabudget_db&quot;).build()&#10;&#10;    @Provides&#10;    fun provideExpenseDao(db: AppDatabase): ExpenseDao = db.expenseDao()&#10;&#10;    @Provides&#10;    fun provideBudgetDao(db: AppDatabase): BudgetDao = db.budgetDao()&#10;    &#10;    @Provides&#10;    fun provideCategoryDao(db: AppDatabase): CategoryDao = db.categoryDao()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Expense.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Expense.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;expenses&quot;)&#10;data class Expense(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val amount: Double,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val note: String? = null&#10;)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;expenses&quot;)&#10;data class Expense(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val amount: Double,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val note: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/UserPreferences.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/UserPreferences.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;data class UserPreferences(&#10;    val isDarkTheme: Boolean = false&#10;)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;data class UserPreferences(&#10;    val isDarkTheme: Boolean = false&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/UserPreferencesManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/UserPreferencesManager.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import android.content.Context&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.booleanPreferencesKey&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;private val Context.dataStore by preferencesDataStore(name = &quot;user_prefs&quot;)&#10;&#10;@Singleton&#10;class UserPreferencesManager @Inject constructor(@ApplicationContext private val context: Context) {&#10;    companion object {&#10;        val DARK_THEME_KEY = booleanPreferencesKey(&quot;dark_theme&quot;)&#10;    }&#10;&#10;    val isDarkTheme: Flow&lt;Boolean&gt; = context.dataStore.data.map { prefs -&gt;&#10;        prefs[DARK_THEME_KEY] ?: false&#10;    }&#10;&#10;    suspend fun setDarkTheme(enabled: Boolean) {&#10;        context.dataStore.edit { prefs -&gt;&#10;            prefs[DARK_THEME_KEY] = enabled&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import android.content.Context&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.booleanPreferencesKey&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;private val Context.dataStore by preferencesDataStore(name = &quot;user_prefs&quot;)&#10;&#10;@Singleton&#10;class UserPreferencesManager @Inject constructor(@ApplicationContext private val context: Context) {&#10;    companion object {&#10;        val DARK_THEME_KEY = booleanPreferencesKey(&quot;dark_theme&quot;)&#10;    }&#10;&#10;    val isDarkTheme: Flow&lt;Boolean&gt; = context.dataStore.data.map { prefs -&gt;&#10;        prefs[DARK_THEME_KEY] ?: false&#10;    }&#10;&#10;    suspend fun setDarkTheme(enabled: Boolean) {&#10;        context.dataStore.edit { prefs -&gt;&#10;            prefs[DARK_THEME_KEY] = enabled&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/dao/ExpenseDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/dao/ExpenseDao.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.data.local.dao&#10;&#10;import androidx.room.*&#10;import `in`.sitharaj.aurabudget.data.local.entity.ExpenseEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;    fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE categoryId = :categoryId ORDER BY date DESC&quot;)&#10;    fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE date BETWEEN :startDate AND :endDate ORDER BY date DESC&quot;)&#10;    fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE id = :id&quot;)&#10;    suspend fun getExpenseById(id: Long): ExpenseEntity?&#10;&#10;    @Query(&quot;SELECT SUM(amount) FROM expenses WHERE date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalExpensesForPeriod(startDate: Long, endDate: Long): Flow&lt;Double&gt;&#10;&#10;    @Query(&quot;SELECT categoryId, SUM(amount) as total FROM expenses GROUP BY categoryId&quot;)&#10;    fun getExpensesByCategoryTotal(): Flow&lt;Map&lt;Long, Double&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE description LIKE '%' || :searchQuery || '%' ORDER BY date DESC&quot;)&#10;    fun searchExpenses(searchQuery: String): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;    @Query(&quot;SELECT SUM(amount) FROM expenses WHERE date BETWEEN :startDate AND :endDate&quot;)&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertExpense(expense: ExpenseEntity): Long&#10;&#10;    @Update&#10;    suspend fun updateExpense(expense: ExpenseEntity)&#10;&#10;    @Delete&#10;    suspend fun deleteExpense(expense: ExpenseEntity)&#10;&#10;    @Query(&quot;DELETE FROM expenses WHERE id = :id&quot;)&#10;    suspend fun deleteExpenseById(id: Long)&#10;    fun getExpensesByCategoryTotal(): Flow&lt;Map&lt;Long, Double&gt;&gt;&#10;    @Query(&quot;SELECT COUNT(*) FROM expenses&quot;)&#10;    suspend fun getExpenseCount(): Int&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.dao&#10;&#10;import androidx.room.*&#10;import `in`.sitharaj.aurabudget.data.local.entity.ExpenseEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Data class for category totals&#10; */&#10;data class CategoryTotal(&#10;    val categoryId: Long,&#10;    val total: Double&#10;)&#10;&#10;/**&#10; * Enhanced DAO for Expense operations with advanced queries&#10; * Following Interface Segregation Principle&#10; */&#10;@Dao&#10;interface ExpenseDao {&#10;&#10;    @Query(&quot;SELECT * FROM expenses ORDER BY date DESC&quot;)&#10;    fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE categoryId = :categoryId ORDER BY date DESC&quot;)&#10;    fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE date BETWEEN :startDate AND :endDate ORDER BY date DESC&quot;)&#10;    fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE id = :id&quot;)&#10;    suspend fun getExpenseById(id: Long): ExpenseEntity?&#10;&#10;    @Query(&quot;SELECT COALESCE(SUM(amount), 0.0) FROM expenses WHERE date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalExpensesForPeriod(startDate: Long, endDate: Long): Flow&lt;Double&gt;&#10;&#10;    @Query(&quot;SELECT categoryId, SUM(amount) as total FROM expenses GROUP BY categoryId&quot;)&#10;    fun getExpensesByCategoryTotal(): Flow&lt;List&lt;CategoryTotal&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE description LIKE '%' || :searchQuery || '%' ORDER BY date DESC&quot;)&#10;    fun searchExpenses(searchQuery: String): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertExpense(expense: ExpenseEntity): Long&#10;&#10;    @Update&#10;    suspend fun updateExpense(expense: ExpenseEntity)&#10;&#10;    @Delete&#10;    suspend fun deleteExpense(expense: ExpenseEntity)&#10;&#10;    @Query(&quot;DELETE FROM expenses WHERE id = :id&quot;)&#10;    suspend fun deleteExpenseById(id: Long)&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM expenses&quot;)&#10;    suspend fun getExpenseCount(): Int&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/BudgetEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/BudgetEntity.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;/**&#10; * Room entity for Budget data&#10; * Data layer implementation separate from domain model&#10; */&#10;@Entity(tableName = &quot;budgets&quot;)&#10;data class BudgetEntity(&#10;    @PrimaryKey(autoGenerate = true) &#10;    val id: Long = 0,&#10;    val name: String,&#10;    val amount: Double,&#10;    val spent: Double = 0.0,&#10;    val categoryId: Long?,&#10;    val startDate: Long,&#10;    val endDate: Long,&#10;    val isRecurring: Boolean = false&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/CategoryEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/CategoryEntity.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;/**&#10; * Room entity for Category data&#10; * Data layer implementation separate from domain model&#10; */&#10;@Entity(tableName = &quot;categories&quot;)&#10;data class CategoryEntity(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Long = 0,&#10;    val name: String,&#10;    val icon: String?,&#10;    val color: String?,&#10;    val type: String = &quot;EXPENSE&quot;, // Store enum as string&#10;    val isDefault: Boolean = false,&#10;    val isActive: Boolean = true,&#10;    val usageCount: Int = 0,&#10;    val monthlyBudget: Double? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/ExpenseEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/ExpenseEntity.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;/**&#10; * Room entity for Expense data&#10; * Data layer implementation separate from domain model&#10; */&#10;@Entity(tableName = &quot;expenses&quot;)&#10;data class ExpenseEntity(&#10;    @PrimaryKey(autoGenerate = true) &#10;    val id: Long = 0,&#10;    val amount: Double,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val description: String?,&#10;    val tags: String = &quot;&quot; // Store as comma-separated string&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/mapper/ExpenseMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/mapper/ExpenseMapper.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.mapper&#10;&#10;import `in`.sitharaj.aurabudget.data.local.entity.ExpenseEntity as ExpenseDataEntity&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity as ExpenseDomainEntity&#10;&#10;/**&#10; * Mapper between data layer and domain layer entities&#10; * Following Single Responsibility Principle and Separation of Concerns&#10; */&#10;object ExpenseMapper {&#10;    &#10;    fun mapToDomain(entity: ExpenseDataEntity): ExpenseDomainEntity {&#10;        return ExpenseDomainEntity(&#10;            id = entity.id,&#10;            amount = entity.amount,&#10;            categoryId = entity.categoryId,&#10;            date = entity.date,&#10;            description = entity.description,&#10;            tags = entity.tags.split(&quot;,&quot;).filter { it.isNotBlank() }&#10;        )&#10;    }&#10;    &#10;    fun mapToData(domainEntity: ExpenseDomainEntity): ExpenseDataEntity {&#10;        return ExpenseDataEntity(&#10;            id = domainEntity.id,&#10;            amount = domainEntity.amount,&#10;            categoryId = domainEntity.categoryId,&#10;            date = domainEntity.date,&#10;            description = domainEntity.description,&#10;            tags = domainEntity.tags.joinToString(&quot;,&quot;)&#10;        )&#10;    }&#10;    &#10;    fun mapToDomainList(entities: List&lt;ExpenseDataEntity&gt;): List&lt;ExpenseDomainEntity&gt; {&#10;        return entities.map { mapToDomain(it) }&#10;    }&#10;    &#10;    fun mapToDataList(domainEntities: List&lt;ExpenseDomainEntity&gt;): List&lt;ExpenseDataEntity&gt; {&#10;        return domainEntities.map { mapToData(it) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/BudgetRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/BudgetRepositoryImpl.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.local.dao.BudgetDao&#10;import `in`.sitharaj.aurabudget.data.mapper.BudgetMapper&#10;import `in`.sitharaj.aurabudget.domain.model.BudgetEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.BudgetRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Implementation of BudgetRepository&#10; * Following Dependency Inversion Principle and Repository Pattern&#10; */&#10;@Singleton&#10;class BudgetRepositoryImpl @Inject constructor(&#10;    private val budgetDao: BudgetDao&#10;) : BudgetRepository {&#10;&#10;    override fun getAllBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt; {&#10;        return budgetDao.getAllBudgets().map { entities -&gt;&#10;            BudgetMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getActiveBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt; {&#10;        return budgetDao.getActiveBudgets().map { entities -&gt;&#10;            BudgetMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getBudgetsByCategory(categoryId: Long): Flow&lt;List&lt;BudgetEntity&gt;&gt; {&#10;        return budgetDao.getBudgetsByCategory(categoryId).map { entities -&gt;&#10;            BudgetMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun insertBudget(budget: BudgetEntity): Long {&#10;        val dataEntity = BudgetMapper.mapToData(budget)&#10;        return budgetDao.insertBudget(dataEntity)&#10;    }&#10;&#10;    override suspend fun updateBudget(budget: BudgetEntity) {&#10;        val dataEntity = BudgetMapper.mapToData(budget)&#10;        budgetDao.updateBudget(dataEntity)&#10;    }&#10;&#10;    override suspend fun deleteBudget(budget: BudgetEntity) {&#10;        val dataEntity = BudgetMapper.mapToData(budget)&#10;        budgetDao.deleteBudget(dataEntity)&#10;    }&#10;&#10;    override suspend fun getBudgetById(id: Long): BudgetEntity? {&#10;        return budgetDao.getBudgetById(id)?.let { entity -&gt;&#10;            BudgetMapper.mapToDomain(entity)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateBudgetSpentAmount(budgetId: Long, spentAmount: Double) {&#10;        budgetDao.updateBudgetSpentAmount(budgetId, spentAmount)&#10;    }&#10;&#10;    override fun getExpiredBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt; {&#10;        return budgetDao.getExpiredBudgets().map { entities -&gt;&#10;            BudgetMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/ExpenseRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/ExpenseRepositoryImpl.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.data.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;import `in`.sitharaj.aurabudget.data.mapper.ExpenseMapper&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import java.util.*&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Implementation of ExpenseRepository&#10; * Following Dependency Inversion Principle and Repository Pattern&#10; */&#10;@Singleton&#10;class ExpenseRepositoryImpl @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) : ExpenseRepository {&#10;&#10;    override fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getAllExpenses().map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getExpensesByCategory(categoryId).map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getExpensesByDateRange(startDate, endDate).map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun insertExpense(expense: ExpenseEntity): Long {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        return expenseDao.insertExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun updateExpense(expense: ExpenseEntity) {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        expenseDao.updateExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun deleteExpense(expense: ExpenseEntity) {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        expenseDao.deleteExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun getExpenseById(id: Long): ExpenseEntity? {&#10;        return expenseDao.getExpenseById(id)?.let { entity -&gt;&#10;            ExpenseMapper.mapToDomain(entity)&#10;        }&#10;    }&#10;&#10;    override fun getTotalExpensesForMonth(month: Int, year: Int): Flow&lt;Double&gt; {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.set(year, month - 1, 1, 0, 0, 0)&#10;        val startDate = calendar.timeInMillis&#10;&#10;        calendar.add(Calendar.MONTH, 1)&#10;        calendar.add(Calendar.MILLISECOND, -1)&#10;        val endDate = calendar.timeInMillis&#10;&#10;        return expenseDao.getTotalExpensesForPeriod(startDate, endDate)&#10;    }&#10;&#10;    override fun getExpensesGroupedByCategory(): Flow&lt;Map&lt;Long, List&lt;ExpenseEntity&gt;&gt;&gt; {&#10;        return expenseDao.getAllExpenses().map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities).groupBy { it.categoryId }&#10;        }&#10;    }&#10;}&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;import `in`.sitharaj.aurabudget.data.mapper.ExpenseMapper&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import java.util.*&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Implementation of ExpenseRepository&#10; * Following Dependency Inversion Principle and Repository Pattern&#10; */&#10;@Singleton&#10;class ExpenseRepositoryImpl @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) : ExpenseRepository {&#10;&#10;    override fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getAllExpenses().map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getExpensesByCategory(categoryId).map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getExpensesByDateRange(startDate, endDate).map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun insertExpense(expense: ExpenseEntity): Long {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        return expenseDao.insertExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun updateExpense(expense: ExpenseEntity) {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        expenseDao.updateExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun deleteExpense(expense: ExpenseEntity) {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        expenseDao.deleteExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun getExpenseById(id: Long): ExpenseEntity? {&#10;        return expenseDao.getExpenseById(id)?.let { entity -&gt;&#10;            ExpenseMapper.mapToDomain(entity)&#10;        }&#10;    }&#10;&#10;    override fun getTotalExpensesForMonth(month: Int, year: Int): Flow&lt;Double&gt; {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.set(year, month - 1, 1, 0, 0, 0)&#10;        val startDate = calendar.timeInMillis&#10;&#10;        calendar.add(Calendar.MONTH, 1)&#10;        calendar.add(Calendar.MILLISECOND, -1)&#10;        val endDate = calendar.timeInMillis&#10;&#10;        return expenseDao.getTotalExpensesForPeriod(startDate, endDate)&#10;    }&#10;&#10;    override fun getExpensesGroupedByCategory(): Flow&lt;Map&lt;Long, List&lt;ExpenseEntity&gt;&gt;&gt; {&#10;        return expenseDao.getAllExpenses().map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities).groupBy { it.categoryId }&#10;        }&#10;    }&#10;&#10;    fun getExpensesByCategoryTotal(): Flow&lt;Map&lt;Long, Double&gt;&gt; {&#10;        return expenseDao.getExpensesByCategoryTotal().map { categoryTotals -&gt;&#10;            categoryTotals.associate { it.categoryId to it.total }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/ExpenseEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/ExpenseEntity.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.model&#10;&#10;/**&#10; * Domain model for Expense - Clean architecture entity&#10; * Represents the core business entity without any framework dependencies&#10; */&#10;data class ExpenseEntity(&#10;    val id: Long = 0,&#10;    val amount: Double,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val description: String?,&#10;    val tags: List&lt;String&gt; = emptyList()&#10;) {&#10;    fun isValid(): Boolean {&#10;        return amount &gt; 0 &amp;&amp; description?.isNotBlank() == true&#10;    }&#10;    &#10;    fun getFormattedAmount(): String {&#10;        return String.format(&quot;$%.2f&quot;, amount)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/FinancialSummary.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/FinancialSummary.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.model&#10;&#10;/**&#10; * Domain model for Financial Insights and Analytics&#10; */&#10;data class FinancialSummary(&#10;    val totalIncome: Double,&#10;    val totalExpenses: Double,&#10;    val netAmount: Double,&#10;    val categoryBreakdown: Map&lt;CategoryEntity, Double&gt;,&#10;    val monthlyTrend: List&lt;MonthlyData&gt;,&#10;    val topCategories: List&lt;Pair&lt;CategoryEntity, Double&gt;&gt;&#10;) {&#10;    fun getSavingsRate(): Double {&#10;        return if (totalIncome &gt; 0) ((totalIncome - totalExpenses) / totalIncome) * 100 else 0.0&#10;    }&#10;    &#10;    fun isHealthyFinancially(): Boolean = netAmount &gt; 0 &amp;&amp; getSavingsRate() &gt;= 20.0&#10;}&#10;&#10;data class MonthlyData(&#10;    val month: String,&#10;    val income: Double,&#10;    val expenses: Double,&#10;    val savings: Double&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/CategoryRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/CategoryRepository.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.domain.repository&#10;&#10;import kotlinx.coroutines.flow.Flow&#10;import `in`.sitharaj.aurabudget.domain.model.CategoryEntity&#10;&#10;/**&#10; * Repository interface for category management&#10; */&#10;interface CategoryRepository {&#10;    fun getAllCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;    suspend fun insertCategory(category: CategoryEntity)&#10;    suspend fun updateCategory(category: CategoryEntity)&#10;    suspend fun deleteCategory(categoryId: Long)&#10;    suspend fun toggleCategoryActive(categoryId: Long)&#10;    suspend fun getCategoryById(categoryId: Long): CategoryEntity?&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.repository&#10;&#10;import kotlinx.coroutines.flow.Flow&#10;import `in`.sitharaj.aurabudget.domain.model.CategoryEntity&#10;&#10;/**&#10; * Repository interface for category management&#10; */&#10;interface CategoryRepository {&#10;    fun getAllCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;    fun getCategoriesByType(type: CategoryEntity.CategoryType): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;    fun getDefaultCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;    suspend fun insertCategory(category: CategoryEntity)&#10;    suspend fun updateCategory(category: CategoryEntity)&#10;    suspend fun deleteCategory(categoryId: Long)&#10;    suspend fun toggleCategoryActive(categoryId: Long)&#10;    suspend fun getCategoryById(categoryId: Long): CategoryEntity?&#10;    suspend fun initializeDefaultCategories()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/ExpenseRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/ExpenseRepository.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.repository&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Repository interface for Expense operations&#10; * Following Repository pattern and Dependency Inversion Principle&#10; */&#10;interface ExpenseRepository {&#10;    fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;    fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;    fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;    suspend fun insertExpense(expense: ExpenseEntity): Long&#10;    suspend fun updateExpense(expense: ExpenseEntity)&#10;    suspend fun deleteExpense(expense: ExpenseEntity)&#10;    suspend fun getExpenseById(id: Long): ExpenseEntity?&#10;    fun getTotalExpensesForMonth(month: Int, year: Int): Flow&lt;Double&gt;&#10;    fun getExpensesGroupedByCategory(): Flow&lt;Map&lt;Long, List&lt;ExpenseEntity&gt;&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/AddExpenseUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/AddExpenseUseCase.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.usecase.expense&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use case for adding new expenses&#10; * Following Single Responsibility Principle&#10; */&#10;class AddExpenseUseCase @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) {&#10;    suspend operator fun invoke(expense: ExpenseEntity): Result&lt;Long&gt; {&#10;        return try {&#10;            if (!expense.isValid()) {&#10;                Result.failure(IllegalArgumentException(&quot;Invalid expense data&quot;))&#10;            } else {&#10;                val id = expenseRepository.insertExpense(expense)&#10;                Result.success(id)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/GetExpensesUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/GetExpensesUseCase.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.usecase.expense&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use case for getting expenses with filtering and sorting&#10; * Following Single Responsibility Principle&#10; */&#10;class GetExpensesUseCase @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) {&#10;    operator fun invoke(): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseRepository.getAllExpenses()&#10;    }&#10;    &#10;    fun getByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseRepository.getExpensesByCategory(categoryId)&#10;    }&#10;    &#10;    fun getByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseRepository.getExpensesByDateRange(startDate, endDate)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedDashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedDashboardScreen.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.BudgetViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun EnhancedDashboardScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel(),&#10;    budgetViewModel: BudgetViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;    val budgetUiState by budgetViewModel.uiState.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Dashboard&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* TODO: Open drawer */ }) {&#10;                        Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { navController.navigate(&quot;settings&quot;) }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { navController.navigate(&quot;expenses&quot;) }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            item {&#10;                // Total Balance Card&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Total Expenses&quot;,&#10;                            fontSize = 16.sp,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${expenses.sumOf { it.amount }}&quot;,&#10;                            fontSize = 32.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            item {&#10;                Text(&#10;                    text = &quot;Recent Expenses&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;&#10;            if (expenses.isEmpty()) {&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No expenses yet&quot;,&#10;                                fontSize = 18.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = &quot;Tap the + button to add your first expense&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                items(expenses.take(5)) { expense -&gt;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Text(&#10;                                    text = expense.description ?: &quot;No description&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;$${expense.amount}&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.error&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedExpenseScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedExpenseScreen.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.components.ExpenseCard&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;&#10;/**&#10; * Enhanced Expense Management Screen with search and filtering&#10; * Following MVVM pattern and clean architecture&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun EnhancedExpenseScreen(&#10;    navController: NavController,&#10;    viewModel: ExpenseViewModel = hiltViewModel()&#10;) {&#10;    val expenses by viewModel.expenses.collectAsState()&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    var showAddExpenseDialog by remember { mutableStateOf(false) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Filter expenses based on search query&#10;    val filteredExpenses = remember(expenses, searchQuery) {&#10;        if (searchQuery.isEmpty()) {&#10;            expenses&#10;        } else {&#10;            expenses.filter { expense -&gt;&#10;                expense.description?.contains(searchQuery, ignoreCase = true) == true ||&#10;                expense.tags.any { it.contains(searchQuery, ignoreCase = true) }&#10;            }&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(uiState.isExpenseAdded) {&#10;        if (uiState.isExpenseAdded) {&#10;            showAddExpenseDialog = false&#10;            viewModel.resetExpenseAddedState()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { &#10;                    Text(&#10;                        &quot;Expenses&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    ) &#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* TODO: Implement filter */ }) {&#10;                        Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showAddExpenseDialog = true }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            // Search Bar&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { &#10;                    searchQuery = it&#10;                    viewModel.searchExpenses(it)&#10;                },&#10;                label = { Text(&quot;Search expenses...&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp)&#10;            )&#10;&#10;            // Expense Summary&#10;            if (filteredExpenses.isNotEmpty()) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        Column {&#10;                            Text(&#10;                                text = &quot;Total Expenses&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                            )&#10;                            Text(&#10;                                text = String.format(&quot;$%.2f&quot;, filteredExpenses.sumOf { it.amount }),&#10;                                fontSize = 24.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                        Column(&#10;                            horizontalAlignment = Alignment.End&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Count&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${filteredExpenses.size}&quot;,&#10;                                fontSize = 24.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Expenses List&#10;            if (uiState.isLoading) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (filteredExpenses.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = if (searchQuery.isEmpty()) &quot;No expenses yet&quot; else &quot;No matching expenses&quot;,&#10;                            fontSize = 18.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = if (searchQuery.isEmpty()) &quot;Tap + to add your first expense&quot; else &quot;Try adjusting your search&quot;,&#10;                            fontSize = 14.sp,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(filteredExpenses) { expense -&gt;&#10;                        ExpenseCard(&#10;                            expense = expense,&#10;                            onEdit = { /* TODO: Implement edit */ },&#10;                            onDelete = { /* TODO: Implement delete */ }&#10;                        )&#10;                    }&#10;                    &#10;                    item {&#10;                        Spacer(modifier = Modifier.height(80.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Add Expense Dialog&#10;    if (showAddExpenseDialog) {&#10;        AddExpenseDialog(&#10;            onDismiss = { showAddExpenseDialog = false },&#10;            onAdd = { amount, description, tags -&gt;&#10;                viewModel.addExpense(&#10;                    amount = amount,&#10;                    categoryId = 1, // TODO: Category selection&#10;                    description = description,&#10;                    tags = tags&#10;                )&#10;            },&#10;            isLoading = uiState.isLoading,&#10;            error = uiState.error&#10;        )&#10;    }&#10;&#10;    // Error handling&#10;    uiState.error?.let { error -&gt;&#10;        LaunchedEffect(error) {&#10;            // Show snackbar or handle error&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AddExpenseDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onAdd: (Double, String, List&lt;String&gt;) -&gt; Unit,&#10;    isLoading: Boolean = false,&#10;    error: String? = null&#10;) {&#10;    var amount by remember { mutableStateOf(&quot;&quot;) }&#10;    var description by remember { mutableStateOf(&quot;&quot;) }&#10;    var tags by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { &#10;            Text(&#10;                &quot;Add New Expense&quot;,&#10;                fontWeight = FontWeight.Bold&#10;            ) &#10;        },&#10;        text = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = amount,&#10;                    onValueChange = { amount = it },&#10;                    label = { Text(&quot;Amount&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    prefix = { Text(&quot;$&quot;) }&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = description,&#10;                    onValueChange = { description = it },&#10;                    label = { Text(&quot;Description&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    maxLines = 2&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = tags,&#10;                    onValueChange = { tags = it },&#10;                    label = { Text(&quot;Tags (comma separated)&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    placeholder = { Text(&quot;food, groceries, shopping&quot;) }&#10;                )&#10;                &#10;                if (error != null) {&#10;                    Text(&#10;                        text = error,&#10;                        color = MaterialTheme.colorScheme.error,&#10;                        fontSize = 12.sp&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    val amountValue = amount.toDoubleOrNull()&#10;                    if (amountValue != null &amp;&amp; amountValue &gt; 0 &amp;&amp; description.isNotBlank()) {&#10;                        val tagsList = tags.split(&quot;,&quot;).map { it.trim() }.filter { it.isNotEmpty() }&#10;                        onAdd(amountValue, description, tagsList)&#10;                    }&#10;                },&#10;                enabled = !isLoading &amp;&amp; amount.toDoubleOrNull() != null &amp;&amp; description.isNotBlank()&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                } else {&#10;                    Text(&quot;Add&quot;)&#10;                }&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(&#10;                onClick = onDismiss,&#10;                enabled = !isLoading&#10;            ) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/categories/CategoriesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/categories/CategoriesScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.screen.categories&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.CategoryViewModel&#10;import `in`.sitharaj.aurabudget.domain.model.CategoryEntity&#10;&#10;/**&#10; * Category Management Screen - Create, edit, and organize expense categories&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CategoriesScreen(&#10;    navController: NavController,&#10;    viewModel: CategoryViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    &#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { &#10;                    Text(&#10;                        &quot;Categories&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { showAddCategoryDialog = true }) {&#10;                        Icon(Icons.Default.Add, contentDescription = &quot;Add Category&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showAddCategoryDialog = true }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Category&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;            &#10;            // Categories Header with Stats&#10;            item {&#10;                CategoriesOverviewCard(&#10;                    totalCategories = uiState.categories.size,&#10;                    activeCategories = uiState.categories.count { it.isActive != false },&#10;                    mostUsedCategory = uiState.mostUsedCategory&#10;                )&#10;            }&#10;            &#10;            // Default Categories Section&#10;            item {&#10;                SectionHeader(&quot;Default Categories&quot;)&#10;            }&#10;            &#10;            items(uiState.categories.filter { it.isDefault == true }) { category -&gt;&#10;                CategoryCard(&#10;                    category = category,&#10;                    onEditClick = { viewModel.editCategory(category) },&#10;                    onToggleActive = { viewModel.toggleCategoryActive(category.id) },&#10;                    onDeleteClick = null // Can't delete default categories&#10;                )&#10;            }&#10;            &#10;            // Custom Categories Section&#10;            if (uiState.categories.any { it.isDefault != true }) {&#10;                item {&#10;                    SectionHeader(&quot;Custom Categories&quot;)&#10;                }&#10;                &#10;                items(uiState.categories.filter { it.isDefault != true }) { category -&gt;&#10;                    CategoryCard(&#10;                        category = category,&#10;                        onEditClick = { viewModel.editCategory(category) },&#10;                        onToggleActive = { viewModel.toggleCategoryActive(category.id) },&#10;                        onDeleteClick = { viewModel.deleteCategory(category.id) }&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Empty State&#10;            if (uiState.categories.isEmpty()) {&#10;                item {&#10;                    EmptyCategoriesState(&#10;                        onCreateCategory = { showAddCategoryDialog = true }&#10;                    )&#10;                }&#10;            }&#10;            &#10;            item {&#10;                Spacer(modifier = Modifier.height(100.dp))&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Add Category Dialog&#10;    if (showAddCategoryDialog) {&#10;        AddCategoryDialog(&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onConfirm = { name, icon, color -&gt;&#10;                viewModel.addCategory(name, icon, color)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategoriesOverviewCard(&#10;    totalCategories: Int,&#10;    activeCategories: Int,&#10;    mostUsedCategory: String?,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Categories Overview&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                CategoryMetric(&#10;                    label = &quot;Total&quot;,&#10;                    value = totalCategories.toString(),&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;                CategoryMetric(&#10;                    label = &quot;Active&quot;,&#10;                    value = activeCategories.toString(),&#10;                    color = Color(0xFF4CAF50)&#10;                )&#10;&#10;                CategoryMetric(&#10;                    label = &quot;Inactive&quot;,&#10;                    value = (totalCategories - activeCategories).toString(),&#10;                    color = Color(0xFFFF9800)&#10;                )&#10;            }&#10;&#10;            if (mostUsedCategory != null) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Text(&#10;                    text = &quot;Most used: $mostUsedCategory&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategoryMetric(&#10;    label: String,&#10;    value: String,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = color&#10;        )&#10;&#10;        Text(&#10;            text = label,&#10;            fontSize = 12.sp,&#10;            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SectionHeader(&#10;    title: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Text(&#10;        text = title,&#10;        fontSize = 16.sp,&#10;        fontWeight = FontWeight.SemiBold,&#10;        color = MaterialTheme.colorScheme.primary,&#10;        modifier = modifier.padding(vertical = 8.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun CategoryCard(&#10;    category: CategoryEntity,&#10;    onEditClick: () -&gt; Unit,&#10;    onToggleActive: () -&gt; Unit,&#10;    onDeleteClick: (() -&gt; Unit)?,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val isActive = category.isActive != false&#10;    &#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isActive) &#10;                MaterialTheme.colorScheme.surface &#10;            else &#10;                MaterialTheme.colorScheme.surfaceVariant&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Category Icon&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        Color(category.color?.toLong() ?: 0xFF6200EE).copy(alpha = 0.1f)&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = getCategoryIcon(category.icon),&#10;                    contentDescription = null,&#10;                    tint = Color(category.color?.toLong() ?: 0xFF6200EE),&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.width(16.dp))&#10;            &#10;            // Category Info&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = category.name,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = if (isActive) &#10;                        MaterialTheme.colorScheme.onSurface &#10;                    else &#10;                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                )&#10;                &#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (category.isDefault == true) &quot;Default&quot; else &quot;Custom&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)&#10;                    )&#10;                    &#10;                    if (!isActive) {&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = &quot;• Inactive&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFFFF9800)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            &#10;            // Action Buttons&#10;            Row {&#10;                // Toggle Active/Inactive&#10;                IconButton(onClick = onToggleActive) {&#10;                    Icon(&#10;                        imageVector = if (isActive) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                        contentDescription = if (isActive) &quot;Deactivate&quot; else &quot;Activate&quot;,&#10;                        tint = if (isActive) MaterialTheme.colorScheme.primary else Color(0xFFFF9800)&#10;                    )&#10;                }&#10;                &#10;                // Edit&#10;                IconButton(onClick = onEditClick) {&#10;                    Icon(&#10;                        Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit&quot;,&#10;                        tint = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;                &#10;                // Delete (only for custom categories)&#10;                if (onDeleteClick != null) {&#10;                    IconButton(onClick = onDeleteClick) {&#10;                        Icon(&#10;                            Icons.Default.Delete,&#10;                            contentDescription = &quot;Delete&quot;,&#10;                            tint = MaterialTheme.colorScheme.error&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EmptyCategoriesState(&#10;    onCreateCategory: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(40.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;️&quot;,&#10;                fontSize = 48.sp&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;No Categories Yet&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = &quot;Create categories to organize your expenses and income&quot;,&#10;                fontSize = 14.sp,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Button(&#10;                onClick = onCreateCategory&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Create Category&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AddCategoryDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onConfirm: (String, String, Long) -&gt; Unit&#10;) {&#10;    var categoryName by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedIcon by remember { mutableStateOf(&quot;restaurant&quot;) }&#10;    var selectedColor by remember { mutableStateOf(0xFF6200EE) }&#10;    &#10;    val availableIcons = listOf(&#10;        &quot;restaurant&quot; to Icons.Default.Restaurant,&#10;        &quot;directions_car&quot; to Icons.Default.DirectionsCar,&#10;        &quot;shopping_cart&quot; to Icons.Default.ShoppingCart,&#10;        &quot;movie&quot; to Icons.Default.Movie,&#10;        &quot;receipt&quot; to Icons.Default.Receipt,&#10;        &quot;local_hospital&quot; to Icons.Default.LocalHospital,&#10;        &quot;flight&quot; to Icons.Default.Flight,&#10;        &quot;school&quot; to Icons.Default.School,&#10;        &quot;fitness_center&quot; to Icons.Default.FitnessCenter,&#10;        &quot;home&quot; to Icons.Default.Home&#10;    )&#10;    &#10;    val availableColors = listOf(&#10;        0xFF6200EE, 0xFF03DAC6, 0xFFFF6B6B, 0xFF4ECDC4,&#10;        0xFF45B7D1, 0xFF96CEB4, 0xFFFD79A8, 0xFFE84393,&#10;        0xFFFFB74D, 0xFFAED581&#10;    )&#10;    &#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Create New Category&quot;) },&#10;        text = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = categoryName,&#10;                    onValueChange = { categoryName = it },&#10;                    label = { Text(&quot;Category Name&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    singleLine = true&#10;                )&#10;                &#10;                // Icon Selection&#10;                Text(&#10;                    text = &quot;Choose Icon&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                &#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(availableIcons) { (iconName, icon) -&gt;&#10;                        IconButton(&#10;                            onClick = { selectedIcon = iconName },&#10;                            modifier = Modifier&#10;                                .size(48.dp)&#10;                                .background(&#10;                                    if (selectedIcon == iconName) &#10;                                        MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)&#10;                                    else &#10;                                        Color.Transparent,&#10;                                    CircleShape&#10;                                )&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = icon,&#10;                                contentDescription = null,&#10;                                tint = if (selectedIcon == iconName) &#10;                                    MaterialTheme.colorScheme.primary &#10;                                else &#10;                                    MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                // Color Selection&#10;                Text(&#10;                    text = &quot;Choose Color&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                &#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(availableColors) { color -&gt;&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .size(40.dp)&#10;                                .clip(CircleShape)&#10;                                .background(Color(color))&#10;                                .then(&#10;                                    if (selectedColor == color) {&#10;                                        Modifier.border(&#10;                                            3.dp,&#10;                                            MaterialTheme.colorScheme.primary,&#10;                                            CircleShape&#10;                                        )&#10;                                    } else Modifier&#10;                                )&#10;                                .clickable { selectedColor = color },&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            if (selectedColor == color) {&#10;                                Icon(&#10;                                    Icons.Default.Check,&#10;                                    contentDescription = null,&#10;                                    tint = Color.White,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onConfirm(categoryName, selectedIcon, selectedColor)&#10;                },&#10;                enabled = categoryName.isNotBlank()&#10;            ) {&#10;                Text(&quot;Create&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;fun getCategoryIcon(iconName: String?): ImageVector {&#10;    return when (iconName) {&#10;        &quot;restaurant&quot; -&gt; Icons.Default.Restaurant&#10;        &quot;directions_car&quot; -&gt; Icons.Default.DirectionsCar&#10;        &quot;shopping_cart&quot; -&gt; Icons.Default.ShoppingCart&#10;        &quot;movie&quot; -&gt; Icons.Default.Movie&#10;        &quot;receipt&quot; -&gt; Icons.Default.Receipt&#10;        &quot;local_hospital&quot; -&gt; Icons.Default.LocalHospital&#10;        &quot;flight&quot; -&gt; Icons.Default.Flight&#10;        &quot;school&quot; -&gt; Icons.Default.School&#10;        &quot;fitness_center&quot; -&gt; Icons.Default.FitnessCenter&#10;        &quot;home&quot; -&gt; Icons.Default.Home&#10;        else -&gt; Icons.Default.Category&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen.categories&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.CategoryViewModel&#10;import `in`.sitharaj.aurabudget.domain.model.CategoryEntity&#10;&#10;/**&#10; * Category Management Screen - Create, edit, and organize expense categories&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CategoriesScreen(&#10;    navController: NavController,&#10;    viewModel: CategoryViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    var showAddCategoryDialog by remember { mutableStateOf(false) }&#10;    &#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { &#10;                    Text(&#10;                        &quot;Categories&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { showAddCategoryDialog = true }) {&#10;                        Icon(Icons.Default.Add, contentDescription = &quot;Add Category&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showAddCategoryDialog = true }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Category&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;            &#10;            // Categories Header with Stats&#10;            item {&#10;                CategoriesOverviewCard(&#10;                    totalCategories = uiState.categories.size,&#10;                    activeCategories = uiState.categories.count { true }, // Assume all active for now&#10;                    mostUsedCategory = uiState.mostUsedCategory&#10;                )&#10;            }&#10;            &#10;            // Default Categories Section&#10;            item {&#10;                SectionHeader(&quot;Default Categories&quot;)&#10;            }&#10;            &#10;            items(uiState.categories.filter { it.isDefault == true }) { category -&gt;&#10;                CategoryCard(&#10;                    category = category,&#10;                    onEditClick = { viewModel.editCategory(category) },&#10;                    onToggleActive = { viewModel.toggleCategoryActive(category.id) },&#10;                    onDeleteClick = null // Can't delete default categories&#10;                )&#10;            }&#10;            &#10;            // Custom Categories Section&#10;            if (uiState.categories.any { it.isDefault != true }) {&#10;                item {&#10;                    SectionHeader(&quot;Custom Categories&quot;)&#10;                }&#10;                &#10;                items(uiState.categories.filter { it.isDefault != true }) { category -&gt;&#10;                    CategoryCard(&#10;                        category = category,&#10;                        onEditClick = { viewModel.editCategory(category) },&#10;                        onToggleActive = { viewModel.toggleCategoryActive(category.id) },&#10;                        onDeleteClick = { viewModel.deleteCategory(category.id) }&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Empty State&#10;            if (uiState.categories.isEmpty()) {&#10;                item {&#10;                    EmptyCategoriesState(&#10;                        onCreateCategory = { showAddCategoryDialog = true }&#10;                    )&#10;                }&#10;            }&#10;            &#10;            item {&#10;                Spacer(modifier = Modifier.height(100.dp))&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Add Category Dialog&#10;    if (showAddCategoryDialog) {&#10;        AddCategoryDialog(&#10;            onDismiss = { showAddCategoryDialog = false },&#10;            onConfirm = { name, icon, color -&gt;&#10;                viewModel.addCategory(name, icon, color)&#10;                showAddCategoryDialog = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategoriesOverviewCard(&#10;    totalCategories: Int,&#10;    activeCategories: Int,&#10;    mostUsedCategory: String?,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Categories Overview&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                CategoryMetric(&#10;                    label = &quot;Total&quot;,&#10;                    value = totalCategories.toString(),&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;                CategoryMetric(&#10;                    label = &quot;Active&quot;,&#10;                    value = activeCategories.toString(),&#10;                    color = Color(0xFF4CAF50)&#10;                )&#10;&#10;                CategoryMetric(&#10;                    label = &quot;Inactive&quot;,&#10;                    value = (totalCategories - activeCategories).toString(),&#10;                    color = Color(0xFFFF9800)&#10;                )&#10;            }&#10;&#10;            if (mostUsedCategory != null) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Text(&#10;                    text = &quot;Most used: $mostUsedCategory&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategoryMetric(&#10;    label: String,&#10;    value: String,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = color&#10;        )&#10;&#10;        Text(&#10;            text = label,&#10;            fontSize = 12.sp,&#10;            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SectionHeader(&#10;    title: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Text(&#10;        text = title,&#10;        fontSize = 16.sp,&#10;        fontWeight = FontWeight.SemiBold,&#10;        color = MaterialTheme.colorScheme.primary,&#10;        modifier = modifier.padding(vertical = 8.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun CategoryCard(&#10;    category: CategoryEntity,&#10;    onEditClick: () -&gt; Unit,&#10;    onToggleActive: () -&gt; Unit,&#10;    onDeleteClick: (() -&gt; Unit)?,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val isActive = true // Assume active for now since CategoryEntity doesn't have isActive field&#10;    &#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isActive) &#10;                MaterialTheme.colorScheme.surface &#10;            else &#10;                MaterialTheme.colorScheme.surfaceVariant&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Category Icon&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        Color(category.color?.toLong() ?: 0xFF6200EE).copy(alpha = 0.1f)&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = getCategoryIcon(category.icon),&#10;                    contentDescription = null,&#10;                    tint = Color(category.color?.toLong() ?: 0xFF6200EE),&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.width(16.dp))&#10;            &#10;            // Category Info&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = category.name,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = if (isActive) &#10;                        MaterialTheme.colorScheme.onSurface &#10;                    else &#10;                        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                )&#10;                &#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = if (category.isDefault == true) &quot;Default&quot; else &quot;Custom&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)&#10;                    )&#10;                    &#10;                    if (!isActive) {&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = &quot;• Inactive&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFFFF9800)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            &#10;            // Action Buttons&#10;            Row {&#10;                // Toggle Active/Inactive&#10;                IconButton(onClick = onToggleActive) {&#10;                    Icon(&#10;                        imageVector = if (isActive) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                        contentDescription = if (isActive) &quot;Deactivate&quot; else &quot;Activate&quot;,&#10;                        tint = if (isActive) MaterialTheme.colorScheme.primary else Color(0xFFFF9800)&#10;                    )&#10;                }&#10;                &#10;                // Edit&#10;                IconButton(onClick = onEditClick) {&#10;                    Icon(&#10;                        Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit&quot;,&#10;                        tint = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;                &#10;                // Delete (only for custom categories)&#10;                if (onDeleteClick != null) {&#10;                    IconButton(onClick = onDeleteClick) {&#10;                        Icon(&#10;                            Icons.Default.Delete,&#10;                            contentDescription = &quot;Delete&quot;,&#10;                            tint = MaterialTheme.colorScheme.error&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EmptyCategoriesState(&#10;    onCreateCategory: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(40.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;️&quot;,&#10;                fontSize = 48.sp&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;No Categories Yet&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = &quot;Create categories to organize your expenses and income&quot;,&#10;                fontSize = 14.sp,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Button(&#10;                onClick = onCreateCategory&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Create Category&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AddCategoryDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onConfirm: (String, String, Long) -&gt; Unit&#10;) {&#10;    var categoryName by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedIcon by remember { mutableStateOf(&quot;restaurant&quot;) }&#10;    var selectedColor by remember { mutableStateOf(0xFF6200EE) }&#10;    &#10;    val availableIcons = listOf(&#10;        &quot;restaurant&quot; to Icons.Default.Restaurant,&#10;        &quot;directions_car&quot; to Icons.Default.DirectionsCar,&#10;        &quot;shopping_cart&quot; to Icons.Default.ShoppingCart,&#10;        &quot;movie&quot; to Icons.Default.Movie,&#10;        &quot;receipt&quot; to Icons.Default.Receipt,&#10;        &quot;local_hospital&quot; to Icons.Default.LocalHospital,&#10;        &quot;flight&quot; to Icons.Default.Flight,&#10;        &quot;school&quot; to Icons.Default.School,&#10;        &quot;fitness_center&quot; to Icons.Default.FitnessCenter,&#10;        &quot;home&quot; to Icons.Default.Home&#10;    )&#10;    &#10;    val availableColors = listOf(&#10;        0xFF6200EE, 0xFF03DAC6, 0xFFFF6B6B, 0xFF4ECDC4,&#10;        0xFF45B7D1, 0xFF96CEB4, 0xFFFD79A8, 0xFFE84393,&#10;        0xFFFFB74D, 0xFFAED581&#10;    )&#10;    &#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Create New Category&quot;) },&#10;        text = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = categoryName,&#10;                    onValueChange = { categoryName = it },&#10;                    label = { Text(&quot;Category Name&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    singleLine = true&#10;                )&#10;                &#10;                // Icon Selection&#10;                Text(&#10;                    text = &quot;Choose Icon&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                &#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(availableIcons) { (iconName, icon) -&gt;&#10;                        IconButton(&#10;                            onClick = { selectedIcon = iconName },&#10;                            modifier = Modifier&#10;                                .size(48.dp)&#10;                                .background(&#10;                                    if (selectedIcon == iconName) &#10;                                        MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)&#10;                                    else &#10;                                        Color.Transparent,&#10;                                    CircleShape&#10;                                )&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = icon,&#10;                                contentDescription = null,&#10;                                tint = if (selectedIcon == iconName) &#10;                                    MaterialTheme.colorScheme.primary &#10;                                else &#10;                                    MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                // Color Selection&#10;                Text(&#10;                    text = &quot;Choose Color&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                &#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(availableColors) { color -&gt;&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .size(40.dp)&#10;                                .clip(CircleShape)&#10;                                .background(Color(color))&#10;                                .then(&#10;                                    if (selectedColor == color) {&#10;                                        Modifier.border(&#10;                                            3.dp,&#10;                                            MaterialTheme.colorScheme.primary,&#10;                                            CircleShape&#10;                                        )&#10;                                    } else Modifier&#10;                                )&#10;                                .clickable { selectedColor = color },&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            if (selectedColor == color) {&#10;                                Icon(&#10;                                    Icons.Default.Check,&#10;                                    contentDescription = null,&#10;                                    tint = Color.White,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onConfirm(categoryName, selectedIcon, selectedColor)&#10;                },&#10;                enabled = categoryName.isNotBlank()&#10;            ) {&#10;                Text(&quot;Create&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;fun getCategoryIcon(iconName: String?): ImageVector {&#10;    return when (iconName) {&#10;        &quot;restaurant&quot; -&gt; Icons.Default.Restaurant&#10;        &quot;directions_car&quot; -&gt; Icons.Default.DirectionsCar&#10;        &quot;shopping_cart&quot; -&gt; Icons.Default.ShoppingCart&#10;        &quot;movie&quot; -&gt; Icons.Default.Movie&#10;        &quot;receipt&quot; -&gt; Icons.Default.Receipt&#10;        &quot;local_hospital&quot; -&gt; Icons.Default.LocalHospital&#10;        &quot;flight&quot; -&gt; Icons.Default.Flight&#10;        &quot;school&quot; -&gt; Icons.Default.School&#10;        &quot;fitness_center&quot; -&gt; Icons.Default.FitnessCenter&#10;        &quot;home&quot; -&gt; Icons.Default.Home&#10;        else -&gt; Icons.Default.Category&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/settings/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/settings/SettingsScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.screen.settings&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.Help&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.SettingsViewModel&#10;&#10;/**&#10; * Settings Screen - App preferences and user configuration&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    navController: NavController,&#10;    viewModel: SettingsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        &quot;Settings&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;&#10;            // Profile Section&#10;            item {&#10;                ProfileSection(&#10;                    userName = uiState.userName,&#10;                    userEmail = uiState.userEmail,&#10;                    onEditProfile = { navController.navigate(&quot;edit_profile&quot;) }&#10;                )&#10;            }&#10;&#10;            item {&#10;                SectionDivider()&#10;            }&#10;&#10;            // App Preferences&#10;            item {&#10;                SectionHeader(&quot;App Preferences&quot;)&#10;            }&#10;&#10;            items(getAppPreferenceItems(uiState, viewModel)) { item -&gt;&#10;                SettingsItem(item = item)&#10;            }&#10;&#10;            item {&#10;                SectionDivider()&#10;            }&#10;&#10;            // Financial Settings&#10;            item {&#10;                SectionHeader(&quot;Financial Settings&quot;)&#10;            }&#10;&#10;            items(getFinancialSettingsItems(navController)) { item -&gt;&#10;                SettingsItem(item = item)&#10;            }&#10;&#10;            item {&#10;                SectionDivider()&#10;            }&#10;&#10;            // Data &amp; Privacy&#10;            item {&#10;                SectionHeader(&quot;Data &amp; Privacy&quot;)&#10;            }&#10;&#10;            items(getDataPrivacyItems(viewModel, navController)) { item -&gt;&#10;                SettingsItem(item = item)&#10;            }&#10;&#10;            item {&#10;                SectionDivider()&#10;            }&#10;&#10;            // About &amp; Support&#10;            item {&#10;                SectionHeader(&quot;About &amp; Support&quot;)&#10;            }&#10;&#10;            items(getAboutSupportItems(navController)) { item -&gt;&#10;                SettingsItem(item = item)&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(100.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileSection(&#10;    userName: String,&#10;    userEmail: String,&#10;    onEditProfile: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        onClick = onEditProfile&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(60.dp)&#10;                    .background(&#10;                        MaterialTheme.colorScheme.primary,&#10;                        shape = androidx.compose.foundation.shape.CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = if (userName.isNotBlank()) userName.first().uppercase() else &quot;U&quot;,&#10;                    fontSize = 24.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = userName.ifBlank { &quot;User Name&quot; },&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                Text(&#10;                    text = userEmail.ifBlank { &quot;user@example.com&quot; },&#10;                    fontSize = 14.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;&#10;            Icon(&#10;                Icons.Default.ChevronRight,&#10;                contentDescription = &quot;Edit Profile&quot;,&#10;                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SectionHeader(&#10;    title: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Text(&#10;        text = title,&#10;        fontSize = 16.sp,&#10;        fontWeight = FontWeight.SemiBold,&#10;        color = MaterialTheme.colorScheme.primary,&#10;        modifier = modifier.padding(vertical = 8.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SectionDivider() {&#10;    HorizontalDivider(&#10;        modifier = Modifier.padding(vertical = 8.dp),&#10;        color = MaterialTheme.colorScheme.outline.copy(alpha = 0.2f)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SettingsItem(&#10;    item: SettingsItemData,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    when (item.type) {&#10;        SettingsItemType.SWITCH -&gt; {&#10;            SwitchSettingsItem(&#10;                icon = item.icon,&#10;                title = item.title,&#10;                subtitle = item.subtitle,&#10;                checked = item.isChecked ?: false,&#10;                onCheckedChange = item.onToggle ?: {},&#10;                modifier = modifier&#10;            )&#10;        }&#10;        SettingsItemType.NAVIGATION -&gt; {&#10;            NavigationSettingsItem(&#10;                icon = item.icon,&#10;                title = item.title,&#10;                subtitle = item.subtitle,&#10;                onClick = item.onClick ?: {},&#10;                modifier = modifier&#10;            )&#10;        }&#10;        SettingsItemType.ACTION -&gt; {&#10;            ActionSettingsItem(&#10;                icon = item.icon,&#10;                title = item.title,&#10;                subtitle = item.subtitle,&#10;                onClick = item.onClick ?: {},&#10;                isDestructive = item.isDestructive ?: false,&#10;                modifier = modifier&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SwitchSettingsItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    subtitle: String?,&#10;    checked: Boolean,&#10;    onCheckedChange: (Boolean) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                subtitle?.let { sub -&gt;&#10;                    Text(&#10;                        text = sub,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Switch(&#10;                checked = checked,&#10;                onCheckedChange = onCheckedChange&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NavigationSettingsItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    subtitle: String?,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                subtitle?.let { sub -&gt;&#10;                    Text(&#10;                        text = sub,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Icon(&#10;                Icons.Default.ChevronRight,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionSettingsItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    subtitle: String?,&#10;    onClick: () -&gt; Unit,&#10;    isDestructive: Boolean = false,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                tint = if (isDestructive) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = if (isDestructive) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                subtitle?.let { sub -&gt;&#10;                    Text(&#10;                        text = sub,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper functions to create settings items&#10;fun getAppPreferenceItems(uiState: `in`.sitharaj.aurabudget.presentation.viewmodel.SettingsUiState, viewModel: SettingsViewModel): List&lt;SettingsItemData&gt; {&#10;    return listOf(&#10;        SettingsItemData(&#10;            type = SettingsItemType.SWITCH,&#10;            icon = Icons.Default.DarkMode,&#10;            title = &quot;Dark Mode&quot;,&#10;            subtitle = &quot;Switch between light and dark themes&quot;,&#10;            isChecked = uiState.isDarkMode,&#10;            onToggle = { viewModel.toggleDarkMode() }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.SWITCH,&#10;            icon = Icons.Default.Notifications,&#10;            title = &quot;Notifications&quot;,&#10;            subtitle = &quot;Receive budget alerts and reminders&quot;,&#10;            isChecked = uiState.notificationsEnabled,&#10;            onToggle = { viewModel.toggleNotifications() }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.SWITCH,&#10;            icon = Icons.Default.Security,&#10;            title = &quot;Biometric Lock&quot;,&#10;            subtitle = &quot;Use fingerprint or face to unlock&quot;,&#10;            isChecked = uiState.biometricEnabled,&#10;            onToggle = { viewModel.toggleBiometric() }&#10;        )&#10;    )&#10;}&#10;&#10;fun getFinancialSettingsItems(navController: NavController): List&lt;SettingsItemData&gt; {&#10;    return listOf(&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.AttachMoney,&#10;            title = &quot;Currency&quot;,&#10;            subtitle = &quot;USD - United States Dollar&quot;,&#10;            onClick = { navController.navigate(&quot;currency_settings&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.Category,&#10;            title = &quot;Categories&quot;,&#10;            subtitle = &quot;Manage expense categories&quot;,&#10;            onClick = { navController.navigate(&quot;categories&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.AccountBalance,&#10;            title = &quot;Accounts&quot;,&#10;            subtitle = &quot;Manage bank accounts and cards&quot;,&#10;            onClick = { navController.navigate(&quot;accounts&quot;) }&#10;        ))&#10;    &#10;}&#10;&#10;fun getDataPrivacyItems(viewModel: SettingsViewModel, navController: NavController): List&lt;SettingsItemData&gt; {&#10;    return listOf(&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.CloudUpload,&#10;            title = &quot;Backup &amp; Sync&quot;,&#10;            subtitle = &quot;Secure cloud backup&quot;,&#10;            onClick = { navController.navigate(&quot;backup_settings&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.FileDownload,&#10;            title = &quot;Export Data&quot;,&#10;            subtitle = &quot;Download your financial data&quot;,&#10;            onClick = { viewModel.exportData() }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.ACTION,&#10;            icon = Icons.Default.DeleteForever,&#10;            title = &quot;Clear All Data&quot;,&#10;            subtitle = &quot;Permanently delete all your data&quot;,&#10;            onClick = { viewModel.showClearDataDialog() },&#10;            isDestructive = true&#10;        )&#10;    }&#10;}&#10;&#10;fun getAboutSupportItems(navController: NavController): List&lt;SettingsItemData&gt; {&#10;    return listOf(&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.AutoMirrored.Filled.Help,&#10;            title = &quot;Help &amp; Support&quot;,&#10;            subtitle = &quot;Get help and contact support&quot;,&#10;            onClick = { navController.navigate(&quot;help&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.Info,&#10;            title = &quot;About AuraBudget&quot;,&#10;            subtitle = &quot;Version 1.0.0&quot;,&#10;            onClick = { navController.navigate(&quot;about&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.Star,&#10;            title = &quot;Rate App&quot;,&#10;            subtitle = &quot;Rate us on the Play Store&quot;,&#10;            onClick = { /* Open Play Store */ }&#10;        )&#10;    }&#10;}&#10;&#10;// Data classes&#10;data class SettingsItemData(&#10;    val type: SettingsItemType,&#10;    val icon: ImageVector,&#10;    val title: String,&#10;    val subtitle: String? = null,&#10;    val isChecked: Boolean? = null,&#10;    val onToggle: ((Boolean) -&gt; Unit)? = null,&#10;    val onClick: (() -&gt; Unit)? = null,&#10;    val isDestructive: Boolean? = null&#10;)&#10;&#10;enum class SettingsItemType {&#10;    SWITCH, NAVIGATION, ACTION&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen.settings&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.Help&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.SettingsViewModel&#10;&#10;/**&#10; * Settings Screen - App preferences and user configuration&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    navController: NavController,&#10;    viewModel: SettingsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        &quot;Settings&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;&#10;            // Profile Section&#10;            item {&#10;                ProfileSection(&#10;                    userName = uiState.userName,&#10;                    userEmail = uiState.userEmail,&#10;                    onEditProfile = { navController.navigate(&quot;edit_profile&quot;) }&#10;                )&#10;            }&#10;&#10;            item {&#10;                SectionDivider()&#10;            }&#10;&#10;            // App Preferences&#10;            item {&#10;                SectionHeader(&quot;App Preferences&quot;)&#10;            }&#10;&#10;            items(getAppPreferenceItems(uiState, viewModel)) { item -&gt;&#10;                SettingsItem(item = item)&#10;            }&#10;&#10;            item {&#10;                SectionDivider()&#10;            }&#10;&#10;            // Financial Settings&#10;            item {&#10;                SectionHeader(&quot;Financial Settings&quot;)&#10;            }&#10;&#10;            items(getFinancialSettingsItems(navController)) { item -&gt;&#10;                SettingsItem(item = item)&#10;            }&#10;&#10;            item {&#10;                SectionDivider()&#10;            }&#10;&#10;            // Data &amp; Privacy&#10;            item {&#10;                SectionHeader(&quot;Data &amp; Privacy&quot;)&#10;            }&#10;&#10;            items(getDataPrivacyItems(viewModel, navController)) { item -&gt;&#10;                SettingsItem(item = item)&#10;            }&#10;&#10;            item {&#10;                SectionDivider()&#10;            }&#10;&#10;            // About &amp; Support&#10;            item {&#10;                SectionHeader(&quot;About &amp; Support&quot;)&#10;            }&#10;&#10;            items(getAboutSupportItems(navController)) { item -&gt;&#10;                SettingsItem(item = item)&#10;            }&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(100.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileSection(&#10;    userName: String,&#10;    userEmail: String,&#10;    onEditProfile: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        onClick = onEditProfile&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(60.dp)&#10;                    .background(&#10;                        MaterialTheme.colorScheme.primary,&#10;                        shape = androidx.compose.foundation.shape.CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = if (userName.isNotBlank()) userName.first().uppercase() else &quot;U&quot;,&#10;                    fontSize = 24.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = userName.ifBlank { &quot;User Name&quot; },&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                Text(&#10;                    text = userEmail.ifBlank { &quot;user@example.com&quot; },&#10;                    fontSize = 14.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;&#10;            Icon(&#10;                Icons.Default.ChevronRight,&#10;                contentDescription = &quot;Edit Profile&quot;,&#10;                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SectionHeader(&#10;    title: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Text(&#10;        text = title,&#10;        fontSize = 16.sp,&#10;        fontWeight = FontWeight.SemiBold,&#10;        color = MaterialTheme.colorScheme.primary,&#10;        modifier = modifier.padding(vertical = 8.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SectionDivider() {&#10;    HorizontalDivider(&#10;        modifier = Modifier.padding(vertical = 8.dp),&#10;        color = MaterialTheme.colorScheme.outline.copy(alpha = 0.2f)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SettingsItem(&#10;    item: SettingsItemData,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    when (item.type) {&#10;        SettingsItemType.SWITCH -&gt; {&#10;            SwitchSettingsItem(&#10;                icon = item.icon,&#10;                title = item.title,&#10;                subtitle = item.subtitle,&#10;                checked = item.isChecked ?: false,&#10;                onCheckedChange = item.onToggle ?: {},&#10;                modifier = modifier&#10;            )&#10;        }&#10;        SettingsItemType.NAVIGATION -&gt; {&#10;            NavigationSettingsItem(&#10;                icon = item.icon,&#10;                title = item.title,&#10;                subtitle = item.subtitle,&#10;                onClick = item.onClick ?: {},&#10;                modifier = modifier&#10;            )&#10;        }&#10;        SettingsItemType.ACTION -&gt; {&#10;            ActionSettingsItem(&#10;                icon = item.icon,&#10;                title = item.title,&#10;                subtitle = item.subtitle,&#10;                onClick = item.onClick ?: {},&#10;                isDestructive = item.isDestructive ?: false,&#10;                modifier = modifier&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SwitchSettingsItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    subtitle: String?,&#10;    checked: Boolean,&#10;    onCheckedChange: (Boolean) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                subtitle?.let { sub -&gt;&#10;                    Text(&#10;                        text = sub,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Switch(&#10;                checked = checked,&#10;                onCheckedChange = onCheckedChange&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NavigationSettingsItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    subtitle: String?,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                subtitle?.let { sub -&gt;&#10;                    Text(&#10;                        text = sub,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Icon(&#10;                Icons.Default.ChevronRight,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ActionSettingsItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    subtitle: String?,&#10;    onClick: () -&gt; Unit,&#10;    isDestructive: Boolean = false,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                tint = if (isDestructive) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = if (isDestructive) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface&#10;                )&#10;&#10;                subtitle?.let { sub -&gt;&#10;                    Text(&#10;                        text = sub,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper functions to create settings items&#10;fun getAppPreferenceItems(uiState: `in`.sitharaj.aurabudget.presentation.viewmodel.SettingsUiState, viewModel: SettingsViewModel): List&lt;SettingsItemData&gt; {&#10;    return listOf(&#10;        SettingsItemData(&#10;            type = SettingsItemType.SWITCH,&#10;            icon = Icons.Default.DarkMode,&#10;            title = &quot;Dark Mode&quot;,&#10;            subtitle = &quot;Switch between light and dark themes&quot;,&#10;            isChecked = uiState.isDarkMode,&#10;            onToggle = { viewModel.toggleDarkMode() }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.SWITCH,&#10;            icon = Icons.Default.Notifications,&#10;            title = &quot;Notifications&quot;,&#10;            subtitle = &quot;Receive budget alerts and reminders&quot;,&#10;            isChecked = uiState.notificationsEnabled,&#10;            onToggle = { viewModel.toggleNotifications() }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.SWITCH,&#10;            icon = Icons.Default.Security,&#10;            title = &quot;Biometric Lock&quot;,&#10;            subtitle = &quot;Use fingerprint or face to unlock&quot;,&#10;            isChecked = uiState.biometricEnabled,&#10;            onToggle = { viewModel.toggleBiometric() }&#10;        )&#10;    )&#10;}&#10;&#10;fun getFinancialSettingsItems(navController: NavController): List&lt;SettingsItemData&gt; {&#10;    return listOf(&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.AttachMoney,&#10;            title = &quot;Currency&quot;,&#10;            subtitle = &quot;USD - United States Dollar&quot;,&#10;            onClick = { navController.navigate(&quot;currency_settings&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.Category,&#10;            title = &quot;Categories&quot;,&#10;            subtitle = &quot;Manage expense categories&quot;,&#10;            onClick = { navController.navigate(&quot;categories&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.AccountBalance,&#10;            title = &quot;Accounts&quot;,&#10;            subtitle = &quot;Manage bank accounts and cards&quot;,&#10;            onClick = { navController.navigate(&quot;accounts&quot;) }&#10;        )&#10;    )&#10;}&#10;&#10;fun getDataPrivacyItems(viewModel: SettingsViewModel, navController: NavController): List&lt;SettingsItemData&gt; {&#10;    return listOf(&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.CloudUpload,&#10;            title = &quot;Backup &amp; Sync&quot;,&#10;            subtitle = &quot;Secure cloud backup&quot;,&#10;            onClick = { navController.navigate(&quot;backup_settings&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.FileDownload,&#10;            title = &quot;Export Data&quot;,&#10;            subtitle = &quot;Download your financial data&quot;,&#10;            onClick = { viewModel.exportData() }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.ACTION,&#10;            icon = Icons.Default.DeleteForever,&#10;            title = &quot;Clear All Data&quot;,&#10;            subtitle = &quot;Permanently delete all your data&quot;,&#10;            onClick = { viewModel.showClearDataDialog() },&#10;            isDestructive = true&#10;        )&#10;    )&#10;}&#10;&#10;fun getAboutSupportItems(navController: NavController): List&lt;SettingsItemData&gt; {&#10;    return listOf(&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.AutoMirrored.Filled.Help,&#10;            title = &quot;Help &amp; Support&quot;,&#10;            subtitle = &quot;Get help and contact support&quot;,&#10;            onClick = { navController.navigate(&quot;help&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.Info,&#10;            title = &quot;About AuraBudget&quot;,&#10;            subtitle = &quot;Version 1.0.0&quot;,&#10;            onClick = { navController.navigate(&quot;about&quot;) }&#10;        ),&#10;        SettingsItemData(&#10;            type = SettingsItemType.NAVIGATION,&#10;            icon = Icons.Default.Star,&#10;            title = &quot;Rate App&quot;,&#10;            subtitle = &quot;Rate us on the Play Store&quot;,&#10;            onClick = { /* Open Play Store */ }&#10;        )&#10;    )&#10;}&#10;&#10;// Data classes&#10;data class SettingsItemData(&#10;    val type: SettingsItemType,&#10;    val icon: ImageVector,&#10;    val title: String,&#10;    val subtitle: String? = null,&#10;    val isChecked: Boolean? = null,&#10;    val onToggle: ((Boolean) -&gt; Unit)? = null,&#10;    val onClick: (() -&gt; Unit)? = null,&#10;    val isDestructive: Boolean? = null&#10;)&#10;&#10;enum class SettingsItemType {&#10;    SWITCH, NAVIGATION, ACTION&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/BudgetViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/BudgetViewModel.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.domain.model.BudgetEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for budget management&#10; * Following MVVM pattern and clean architecture&#10; */&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(BudgetUiState())&#10;    val uiState: StateFlow&lt;BudgetUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadBudgets()&#10;    }&#10;&#10;    private fun loadBudgets() {&#10;        viewModelScope.launch {&#10;            budgetRepository.getAllBudgets().collect { budgets -&gt;&#10;                _uiState.value = _uiState.value.copy(&#10;                    budgets = budgets,&#10;                    isLoading = false&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addBudget(budget: BudgetEntity) {&#10;        viewModelScope.launch {&#10;            try {&#10;                budgetRepository.insertBudget(budget)&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(error = e.message)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budgetId: Long) {&#10;        viewModelScope.launch {&#10;            try {&#10;                budgetRepository.deleteBudget(budgetId)&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(error = e.message)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateBudget(budget: BudgetEntity) {&#10;        viewModelScope.launch {&#10;            try {&#10;                budgetRepository.updateBudget(budget)&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(error = e.message)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class BudgetUiState(&#10;    val budgets: List&lt;BudgetEntity&gt; = emptyList(),&#10;    val isLoading: Boolean = true,&#10;    val error: String? = null&#10;)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.domain.model.BudgetEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for budget management&#10; * Following MVVM pattern and clean architecture&#10; */&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(BudgetUiState())&#10;    val uiState: StateFlow&lt;BudgetUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadBudgets()&#10;    }&#10;&#10;    private fun loadBudgets() {&#10;        viewModelScope.launch {&#10;            budgetRepository.getAllBudgets().collect { budgets -&gt;&#10;                _uiState.value = _uiState.value.copy(&#10;                    budgets = budgets,&#10;                    isLoading = false&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun addBudget(budget: BudgetEntity) {&#10;        viewModelScope.launch {&#10;            try {&#10;                budgetRepository.insertBudget(budget)&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(error = e.message)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budgetId: Long) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val budget = budgetRepository.getBudgetById(budgetId)&#10;                budget?.let {&#10;                    budgetRepository.deleteBudget(it)&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(error = e.message)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateBudget(budget: BudgetEntity) {&#10;        viewModelScope.launch {&#10;            try {&#10;                budgetRepository.updateBudget(budget)&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(error = e.message)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class BudgetUiState(&#10;    val budgets: List&lt;BudgetEntity&gt; = emptyList(),&#10;    val isLoading: Boolean = true,&#10;    val error: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/BudgetRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/BudgetRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Budget&#10;import in.sitharaj.aurabudget.data.BudgetDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class BudgetRepository @Inject constructor(&#10;    private val budgetDao: BudgetDao&#10;) {&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt; = budgetDao.getAllBudgets()&#10;&#10;    suspend fun insertBudget(budget: Budget) = budgetDao.insertBudget(budget)&#10;&#10;    suspend fun deleteBudget(budget: Budget) = budgetDao.deleteBudget(budget)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/CategoryRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/CategoryRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Category&#10;import in.sitharaj.aurabudget.data.CategoryDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class CategoryRepository @Inject constructor(&#10;    private val categoryDao: CategoryDao&#10;) {&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt; = categoryDao.getAllCategories()&#10;&#10;    suspend fun insertCategory(category: Category) = categoryDao.insertCategory(category)&#10;&#10;    suspend fun deleteCategory(category: Category) = categoryDao.deleteCategory(category)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/ExpenseRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/ExpenseRepository.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Expense&#10;import in.sitharaj.aurabudget.data.ExpenseDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class ExpenseRepository @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) {&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt; = expenseDao.getAllExpenses()&#10;&#10;    suspend fun insertExpense(expense: Expense) = expenseDao.insertExpense(expense)&#10;&#10;    suspend fun deleteExpense(expense: Expense) = expenseDao.deleteExpense(expense)&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.Expense&#10;import `in`.sitharaj.aurabudget.data.ExpenseDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class ExpenseRepository @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) {&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt; = expenseDao.getAllExpenses()&#10;&#10;    suspend fun insertExpense(expense: Expense) = expenseDao.insertExpense(expense)&#10;&#10;    suspend fun deleteExpense(expense: Expense) = expenseDao.deleteExpense(expense)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/PreferencesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/PreferencesRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.UserPreferencesManager&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class PreferencesRepository @Inject constructor(&#10;    private val userPreferencesManager: UserPreferencesManager&#10;) {&#10;    val isDarkTheme: Flow&lt;Boolean&gt; = userPreferencesManager.isDarkTheme&#10;&#10;    suspend fun setDarkTheme(enabled: Boolean) = userPreferencesManager.setDarkTheme(enabled)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/DashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/DashboardScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.BudgetViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DashboardScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel(),&#10;    budgetViewModel: BudgetViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;    val budgetUiState by budgetViewModel.uiState.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Dashboard&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* TODO: Open drawer */ }) {&#10;                        Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { navController.navigate(&quot;settings&quot;) }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { navController.navigate(&quot;expenses&quot;) }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            item {&#10;                // Total Balance Card&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Total Expenses&quot;,&#10;                            fontSize = 16.sp,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${expenses.sumOf { it.amount }}&quot;,&#10;                            fontSize = 32.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            item {&#10;                Text(&#10;                    text = &quot;Recent Expenses&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;&#10;            if (expenses.isEmpty()) {&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No expenses yet&quot;,&#10;                                fontSize = 18.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = &quot;Tap the + button to add your first expense&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                items(expenses.take(5)) { expense -&gt;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Text(&#10;                                    text = expense.description,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;$${expense.amount}&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.error&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.BudgetViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DashboardScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel(),&#10;    budgetViewModel: BudgetViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;    val budgetUiState by budgetViewModel.uiState.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Dashboard&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* TODO: Open drawer */ }) {&#10;                        Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { navController.navigate(&quot;settings&quot;) }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { navController.navigate(&quot;expenses&quot;) }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            item {&#10;                // Total Balance Card&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Total Expenses&quot;,&#10;                            fontSize = 16.sp,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${expenses.sumOf { it.amount }}&quot;,&#10;                            fontSize = 32.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            item {&#10;                Text(&#10;                    text = &quot;Recent Expenses&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;&#10;            if (expenses.isEmpty()) {&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No expenses yet&quot;,&#10;                                fontSize = 18.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = &quot;Tap the + button to add your first expense&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                items(expenses.take(5)) { expense -&gt;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Text(&#10;                                    text = expense.description ?: &quot;No description&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;$${expense.amount}&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.error&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/ExpensesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/ExpensesScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.data.Expense&#10;import `in`.sitharaj.aurabudget.ui.viewmodel.ExpenseViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ExpensesScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;&#10;    Scaffold(&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showAddExpenseDialog = true }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            if (expenses.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No expenses yet&quot;,&#10;                            fontSize = 18.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Tap the + button to add your first expense&quot;,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(expenses) { expense -&gt;&#10;                        ExpenseItem(&#10;                            expense = expense,&#10;                            onDelete = { expenseViewModel.deleteExpense(expense) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAddExpenseDialog) {&#10;        AddExpenseDialog(&#10;            onDismiss = { showAddExpenseDialog = false },&#10;            onAdd = { amount, note -&gt;&#10;                expenseViewModel.addExpense(&#10;                    Expense(&#10;                        amount = amount,&#10;                        categoryId = 1, // Default category for now&#10;                        date = System.currentTimeMillis(),&#10;                        note = note&#10;                    )&#10;                )&#10;                showAddExpenseDialog = false&#10;            }&#10;                    Expense(&#10;                        amount = amount,&#10;                        categoryId = 1, // Default category for now&#10;                        date = System.currentTimeMillis(),&#10;                        note = note&#10;                    )&#10;@Composable&#10;fun ExpenseItem(&#10;    expense: Expense,&#10;    onDelete: () -&gt; Unit&#10;) {&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;    expense: Expense,&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = expense.note ?: &quot;No description&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    fontSize = 16.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = dateFormat.format(Date(expense.date)),&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                )&#10;            }&#10;            Row(&#10;                    text = expense.note ?: &quot;No description&quot;,&#10;            ) {&#10;                Text(&#10;                    text = &quot;$${expense.amount}&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 16.sp,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                IconButton(onClick = onDelete) {&#10;                    Icon(&#10;                        Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete&quot;,&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                    text = &quot;$${expense.amount}&quot;,&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AddExpenseDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onAdd: (Double, String) -&gt; Unit&#10;) {&#10;    var amount by remember { mutableStateOf(&quot;&quot;) }&#10;    var note by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Add Expense&quot;) },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = amount,&#10;                    onValueChange = { amount = it },&#10;                    label = { Text(&quot;Amount&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = note,&#10;                    onValueChange = { note = it },&#10;                    label = { Text(&quot;Description&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    val amountValue = amount.toDoubleOrNull()&#10;                    if (amountValue != null &amp;&amp; amountValue &gt; 0) {&#10;                        onAdd(amountValue, note.ifBlank { null } ?: &quot;Expense&quot;)&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;Add&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ExpensesScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;    val uiState by expenseViewModel.uiState.collectAsState()&#10;    var showAddExpenseDialog by remember { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(uiState.isExpenseAdded) {&#10;        if (uiState.isExpenseAdded) {&#10;            showAddExpenseDialog = false&#10;            expenseViewModel.resetExpenseAddedState()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Expenses&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showAddExpenseDialog = true }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            if (expenses.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No expenses yet&quot;,&#10;                            fontSize = 18.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Tap the + button to add your first expense&quot;,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(expenses) { expense -&gt;&#10;                        ExpenseItem(&#10;                            expense = expense,&#10;                            onDelete = { expenseViewModel.deleteExpense(expense) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAddExpenseDialog) {&#10;        AddExpenseDialog(&#10;            onDismiss = { showAddExpenseDialog = false },&#10;            onAdd = { amount, note -&gt;&#10;                expenseViewModel.addExpense(&#10;                    amount = amount,&#10;                    categoryId = 1, // Default category for now&#10;                    description = note,&#10;                    tags = emptyList()&#10;                )&#10;                showAddExpenseDialog = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ExpenseItem(&#10;    expense: ExpenseEntity,&#10;    onDelete: () -&gt; Unit&#10;) {&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = expense.description ?: &quot;No description&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    fontSize = 16.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = dateFormat.format(Date(expense.date)),&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = expense.getFormattedAmount(),&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 16.sp,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                IconButton(onClick = onDelete) {&#10;                    Icon(&#10;                        Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete&quot;,&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AddExpenseDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onAdd: (Double, String) -&gt; Unit&#10;) {&#10;    var amount by remember { mutableStateOf(&quot;&quot;) }&#10;    var note by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Add Expense&quot;) },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = amount,&#10;                    onValueChange = { amount = it },&#10;                    label = { Text(&quot;Amount&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = note,&#10;                    onValueChange = { note = it },&#10;                    label = { Text(&quot;Description&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    val amountValue = amount.toDoubleOrNull()&#10;                    if (amountValue != null &amp;&amp; amountValue &gt; 0) {&#10;                        onAdd(amountValue, note.ifBlank { null } ?: &quot;Expense&quot;)&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;Add&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/SettingsScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import androidx.palette.graphics.Palette&#10;import `in`.sitharaj.aurabudget.ui.viewmodel.ThemeViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    navController: NavController,&#10;    themeViewModel: ThemeViewModel = hiltViewModel()&#10;) {&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Settings&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Appearance&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Theme&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        Column {&#10;                            Text(&#10;                                text = &quot;Dark Theme&quot;,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = if (isDarkTheme) &quot;Enabled&quot; else &quot;Disabled&quot;,&#10;                                fontSize = 12.sp,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                            )&#10;                        }&#10;                    }&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = { themeViewModel.toggleTheme() }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;About&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;AuraBudget&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;Version 1.0&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Advanced finance and money management app designed to empower users to effortlessly track expenses, set budgets, and reach their financial goals with confidence.&quot;,&#10;                        fontSize = 14.sp,&#10;                        lineHeight = 20.sp&#10;                    )&#10;                }&#10;            }&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Features&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    val features = listOf(&#10;                        &quot;• Modern MVVM Clean Architecture&quot;,&#10;                        &quot;• Elegant, Responsive UI&quot;,&#10;                        &quot;• Instant Theme Switching&quot;,&#10;                        &quot;• Real-Time Insights&quot;,&#10;                        &quot;• Secure Data Handling&quot;,&#10;                        &quot;• Smart Expense Tracking&quot;&#10;                    )&#10;&#10;                    features.forEach { feature -&gt;&#10;                        Text(&#10;                            text = feature,&#10;                            fontSize = 14.sp,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import androidx.palette.graphics.Palette&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ThemeViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    navController: NavController,&#10;    themeViewModel: ThemeViewModel = hiltViewModel()&#10;) {&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Settings&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Appearance&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Theme&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        Column {&#10;                            Text(&#10;                                text = &quot;Dark Theme&quot;,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = if (isDarkTheme) &quot;Enabled&quot; else &quot;Disabled&quot;,&#10;                                fontSize = 12.sp,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                            )&#10;                        }&#10;                    }&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = { themeViewModel.toggleTheme() }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;About&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;AuraBudget&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;Version 1.0&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Advanced finance and money management app designed to empower users to effortlessly track expenses, set budgets, and reach their financial goals with confidence.&quot;,&#10;                        fontSize = 14.sp,&#10;                        lineHeight = 20.sp&#10;                    )&#10;                }&#10;            }&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Features&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    val features = listOf(&#10;                        &quot;• Modern MVVM Clean Architecture&quot;,&#10;                        &quot;• Elegant, Responsive UI&quot;,&#10;                        &quot;• Instant Theme Switching&quot;,&#10;                        &quot;• Real-Time Insights&quot;,&#10;                        &quot;• Secure Data Handling&quot;,&#10;                        &quot;• Smart Expense Tracking&quot;&#10;                    )&#10;&#10;                    features.forEach { feature -&gt;&#10;                        Text(&#10;                            text = feature,&#10;                            fontSize = 14.sp,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/BudgetViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/BudgetViewModel.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    val budgets = budgetRepository.getAllBudgets()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.insertBudget(budget)&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.deleteBudget(budget)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.data.Budget&#10;import `in`.sitharaj.aurabudget.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    val budgets = budgetRepository.getAllBudgets()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.insertBudget(budget)&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.deleteBudget(budget)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/CategoryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/CategoryViewModel.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import `in`.sitharaj.aurabudget.data.Category&#10;import `in`.sitharaj.aurabudget.repository.CategoryRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CategoryViewModel @Inject constructor(&#10;    private val categoryRepository: CategoryRepository&#10;) : ViewModel() {&#10;&#10;    val categories = categoryRepository.getAllCategories()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            categoryRepository.insertCategory(category)&#10;        }&#10;    }&#10;&#10;    fun deleteCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            categoryRepository.deleteCategory(category)&#10;        }&#10;    }&#10;&#10;    init {&#10;        // Initialize with default categories if none exist&#10;        viewModelScope.launch {&#10;            addCategory(Category(name = &quot;Food &amp; Dining&quot;))&#10;            addCategory(Category(name = &quot;Transportation&quot;))&#10;            addCategory(Category(name = &quot;Shopping&quot;))&#10;            addCategory(Category(name = &quot;Entertainment&quot;))&#10;            addCategory(Category(name = &quot;Bills &amp; Utilities&quot;))&#10;            addCategory(Category(name = &quot;Healthcare&quot;))&#10;            addCategory(Category(name = &quot;Travel&quot;))&#10;            addCategory(Category(name = &quot;Other&quot;))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ExpenseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ExpenseViewModel.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import in.sitharaj.aurabudget.data.Expense&#10;import in.sitharaj.aurabudget.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ExpenseViewModel @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) : ViewModel() {&#10;&#10;    val expenses = expenseRepository.getAllExpenses()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            expenseRepository.insertExpense(expense)&#10;        }&#10;    }&#10;&#10;    fun deleteExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            expenseRepository.deleteExpense(expense)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ThemeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ThemeViewModel.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import in.sitharaj.aurabudget.repository.PreferencesRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ThemeViewModel @Inject constructor(&#10;    private val preferencesRepository: PreferencesRepository&#10;) : ViewModel() {&#10;&#10;    val isDarkTheme = preferencesRepository.isDarkTheme&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = false&#10;        )&#10;&#10;    fun toggleTheme() {&#10;        viewModelScope.launch {&#10;            preferencesRepository.setDarkTheme(!isDarkTheme.value)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>