<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AuraBudgetApp&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/MainActivity.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import `in`.sitharaj.aurabudget.ui.screens.DashboardScreen&#10;import `in`.sitharaj.aurabudget.ui.screens.ExpensesScreen&#10;import `in`.sitharaj.aurabudget.ui.screens.SettingsScreen&#10;import `in`.sitharaj.aurabudget.ui.screens.SplashScreen&#10;import `in`.sitharaj.aurabudget.ui.theme.AuraBudgetTheme&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ThemeViewModel&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AuraBudgetScreen()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AuraBudgetScreen() {&#10;    val themeViewModel: ThemeViewModel = hiltViewModel()&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    AuraBudgetTheme(darkTheme = isDarkTheme) {&#10;        val navController = rememberNavController()&#10;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = &quot;splash&quot;&#10;        ) {&#10;            composable(&quot;splash&quot;) {&#10;                SplashScreen(onNavigateToMain = {&#10;                    navController.navigate(&quot;dashboard&quot;) {&#10;                        popUpTo(&quot;splash&quot;) { inclusive = true }&#10;                    }&#10;                })&#10;            }&#10;            composable(&quot;dashboard&quot;) {&#10;                DashboardScreen(navController = navController)&#10;            }&#10;            composable(&quot;expenses&quot;) {&#10;                ExpensesScreen(navController = navController)&#10;            }&#10;            composable(&quot;settings&quot;) {&#10;                SettingsScreen(navController = navController)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import `in`.sitharaj.aurabudget.presentation.screen.EnhancedDashboardScreen&#10;import `in`.sitharaj.aurabudget.presentation.screen.EnhancedExpenseScreen&#10;import `in`.sitharaj.aurabudget.ui.screens.SettingsScreen&#10;import `in`.sitharaj.aurabudget.ui.screens.SplashScreen&#10;import `in`.sitharaj.aurabudget.ui.theme.AuraBudgetTheme&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ThemeViewModel&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            AuraBudgetScreen()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AuraBudgetScreen() {&#10;    val themeViewModel: ThemeViewModel = hiltViewModel()&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    AuraBudgetTheme(darkTheme = isDarkTheme) {&#10;        val navController = rememberNavController()&#10;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = &quot;splash&quot;&#10;        ) {&#10;            composable(&quot;splash&quot;) {&#10;                SplashScreen(onNavigateToMain = {&#10;                    navController.navigate(&quot;dashboard&quot;) {&#10;                        popUpTo(&quot;splash&quot;) { inclusive = true }&#10;                    }&#10;                })&#10;            }&#10;            composable(&quot;dashboard&quot;) {&#10;                EnhancedDashboardScreen(navController = navController)&#10;            }&#10;            composable(&quot;expenses&quot;) {&#10;                EnhancedExpenseScreen(navController = navController)&#10;            }&#10;            composable(&quot;settings&quot;) {&#10;                SettingsScreen(navController = navController)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/AppDatabase.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Database&#10;import androidx.room.RoomDatabase&#10;&#10;@Database(&#10;    entities = [Expense::class, Budget::class, Category::class],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;abstract class AppDatabase : RoomDatabase() {&#10;    abstract fun expenseDao(): ExpenseDao&#10;    abstract fun budgetDao(): BudgetDao&#10;    abstract fun categoryDao(): CategoryDao&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Database&#10;import androidx.room.RoomDatabase&#10;&#10;@Database(&#10;    entities = [Expense::class, Budget::class, Category::class],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;abstract class AppDatabase : RoomDatabase() {&#10;    abstract fun expenseDao(): ExpenseDao&#10;    abstract fun budgetDao(): BudgetDao&#10;    abstract fun categoryDao(): CategoryDao&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Budget.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Budget.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;budgets&quot;)&#10;data class Budget(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val amount: Double,&#10;    val startDate: Long,&#10;    val endDate: Long&#10;)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;budgets&quot;)&#10;data class Budget(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val amount: Double,&#10;    val startDate: Long,&#10;    val endDate: Long&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Category.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Category.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;categories&quot;)&#10;data class Category(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val icon: String? = null // Store icon name or url if needed&#10;)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;categories&quot;)&#10;data class Category(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val name: String,&#10;    val icon: String? = null // Store icon name or url if needed&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Dao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Dao.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.*&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface ExpenseDao {&#10;    @Query(&quot;SELECT * FROM expenses ORDER BY date DESC&quot;)&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertExpense(expense: Expense)&#10;&#10;    @Delete&#10;    suspend fun deleteExpense(expense: Expense)&#10;}&#10;&#10;@Dao&#10;interface BudgetDao {&#10;    @Query(&quot;SELECT * FROM budgets ORDER BY startDate DESC&quot;)&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertBudget(budget: Budget)&#10;&#10;    @Delete&#10;    suspend fun deleteBudget(budget: Budget)&#10;}&#10;&#10;@Dao&#10;interface CategoryDao {&#10;    @Query(&quot;SELECT * FROM categories ORDER BY name ASC&quot;)&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertCategory(category: Category)&#10;&#10;    @Delete&#10;    suspend fun deleteCategory(category: Category)&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.*&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface ExpenseDao {&#10;    @Query(&quot;SELECT * FROM expenses ORDER BY date DESC&quot;)&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertExpense(expense: Expense)&#10;&#10;    @Delete&#10;    suspend fun deleteExpense(expense: Expense)&#10;}&#10;&#10;@Dao&#10;interface BudgetDao {&#10;    @Query(&quot;SELECT * FROM budgets ORDER BY startDate DESC&quot;)&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertBudget(budget: Budget)&#10;&#10;    @Delete&#10;    suspend fun deleteBudget(budget: Budget)&#10;}&#10;&#10;@Dao&#10;interface CategoryDao {&#10;    @Query(&quot;SELECT * FROM categories ORDER BY name ASC&quot;)&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertCategory(category: Category)&#10;&#10;    @Delete&#10;    suspend fun deleteCategory(category: Category)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/DatabaseModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/DatabaseModule.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;import `in`.sitharaj.aurabudget.data.local.database.AppDatabase&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object DatabaseModule {&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext appContext: Context): AppDatabase =&#10;        Room.databaseBuilder(appContext, AppDatabase::class.java, &quot;aurabudget_db&quot;).build()&#10;&#10;    @Provides&#10;    fun provideExpenseDao(db: AppDatabase): ExpenseDao = db.expenseDao()&#10;&#10;    // TODO: Add other DAOs when implemented&#10;    // @Provides&#10;    // fun provideBudgetDao(db: AppDatabase) = db.budgetDao()&#10;&#10;    // @Provides&#10;    // fun provideCategoryDao(db: AppDatabase) = db.categoryDao()&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;import `in`.sitharaj.aurabudget.data.local.dao.BudgetDao&#10;import `in`.sitharaj.aurabudget.data.local.dao.CategoryDao&#10;import `in`.sitharaj.aurabudget.data.local.database.AppDatabase&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object DatabaseModule {&#10;    @Provides&#10;    @Singleton&#10;    fun provideDatabase(@ApplicationContext appContext: Context): AppDatabase =&#10;        Room.databaseBuilder(appContext, AppDatabase::class.java, &quot;aurabudget_db&quot;).build()&#10;&#10;    @Provides&#10;    fun provideExpenseDao(db: AppDatabase): ExpenseDao = db.expenseDao()&#10;&#10;    @Provides&#10;    fun provideBudgetDao(db: AppDatabase): BudgetDao = db.budgetDao()&#10;    &#10;    @Provides&#10;    fun provideCategoryDao(db: AppDatabase): CategoryDao = db.categoryDao()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Expense.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/Expense.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;expenses&quot;)&#10;data class Expense(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val amount: Double,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val note: String? = null&#10;)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;expenses&quot;)&#10;data class Expense(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val amount: Double,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val note: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/UserPreferences.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/UserPreferences.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;data class UserPreferences(&#10;    val isDarkTheme: Boolean = false&#10;)&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;data class UserPreferences(&#10;    val isDarkTheme: Boolean = false&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/UserPreferencesManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/UserPreferencesManager.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.data&#10;&#10;import android.content.Context&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.booleanPreferencesKey&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;private val Context.dataStore by preferencesDataStore(name = &quot;user_prefs&quot;)&#10;&#10;@Singleton&#10;class UserPreferencesManager @Inject constructor(@ApplicationContext private val context: Context) {&#10;    companion object {&#10;        val DARK_THEME_KEY = booleanPreferencesKey(&quot;dark_theme&quot;)&#10;    }&#10;&#10;    val isDarkTheme: Flow&lt;Boolean&gt; = context.dataStore.data.map { prefs -&gt;&#10;        prefs[DARK_THEME_KEY] ?: false&#10;    }&#10;&#10;    suspend fun setDarkTheme(enabled: Boolean) {&#10;        context.dataStore.edit { prefs -&gt;&#10;            prefs[DARK_THEME_KEY] = enabled&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data&#10;&#10;import android.content.Context&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.booleanPreferencesKey&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;private val Context.dataStore by preferencesDataStore(name = &quot;user_prefs&quot;)&#10;&#10;@Singleton&#10;class UserPreferencesManager @Inject constructor(@ApplicationContext private val context: Context) {&#10;    companion object {&#10;        val DARK_THEME_KEY = booleanPreferencesKey(&quot;dark_theme&quot;)&#10;    }&#10;&#10;    val isDarkTheme: Flow&lt;Boolean&gt; = context.dataStore.data.map { prefs -&gt;&#10;        prefs[DARK_THEME_KEY] ?: false&#10;    }&#10;&#10;    suspend fun setDarkTheme(enabled: Boolean) {&#10;        context.dataStore.edit { prefs -&gt;&#10;            prefs[DARK_THEME_KEY] = enabled&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/dao/BudgetDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/dao/BudgetDao.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.dao&#10;&#10;import androidx.room.*&#10;import `in`.sitharaj.aurabudget.data.local.entity.BudgetEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * DAO for Budget operations&#10; */&#10;@Dao&#10;interface BudgetDao {&#10;&#10;    @Query(&quot;SELECT * FROM budgets ORDER BY startDate DESC&quot;)&#10;    fun getAllBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM budgets WHERE endDate &gt; :currentDate ORDER BY startDate DESC&quot;)&#10;    fun getActiveBudgets(currentDate: Long = System.currentTimeMillis()): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM budgets WHERE categoryId = :categoryId ORDER BY startDate DESC&quot;)&#10;    fun getBudgetsByCategory(categoryId: Long): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM budgets WHERE id = :id&quot;)&#10;    suspend fun getBudgetById(id: Long): BudgetEntity?&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertBudget(budget: BudgetEntity): Long&#10;&#10;    @Update&#10;    suspend fun updateBudget(budget: BudgetEntity)&#10;&#10;    @Delete&#10;    suspend fun deleteBudget(budget: BudgetEntity)&#10;&#10;    @Query(&quot;UPDATE budgets SET spent = :spentAmount WHERE id = :budgetId&quot;)&#10;    suspend fun updateBudgetSpentAmount(budgetId: Long, spentAmount: Double)&#10;&#10;    @Query(&quot;SELECT * FROM budgets WHERE endDate &lt; :currentDate&quot;)&#10;    fun getExpiredBudgets(currentDate: Long = System.currentTimeMillis()): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/dao/CategoryDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/dao/CategoryDao.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.dao&#10;&#10;import androidx.room.*&#10;import `in`.sitharaj.aurabudget.data.local.entity.CategoryEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * DAO for Category operations&#10; */&#10;@Dao&#10;interface CategoryDao {&#10;&#10;    @Query(&quot;SELECT * FROM categories ORDER BY name ASC&quot;)&#10;    fun getAllCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM categories WHERE type = :type ORDER BY name ASC&quot;)&#10;    fun getCategoriesByType(type: String): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM categories WHERE id = :id&quot;)&#10;    suspend fun getCategoryById(id: Long): CategoryEntity?&#10;&#10;    @Query(&quot;SELECT * FROM categories WHERE isDefault = 1&quot;)&#10;    fun getDefaultCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertCategory(category: CategoryEntity): Long&#10;&#10;    @Update&#10;    suspend fun updateCategory(category: CategoryEntity)&#10;&#10;    @Delete&#10;    suspend fun deleteCategory(category: CategoryEntity)&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM categories&quot;)&#10;    suspend fun getCategoryCount(): Int&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/dao/ExpenseDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/dao/ExpenseDao.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.data.local.dao&#10;&#10;import androidx.room.*&#10;import `in`.sitharaj.aurabudget.data.local.entity.ExpenseEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Enhanced DAO for Expense operations with advanced queries&#10; * Following Interface Segregation Principle&#10; */&#10;@Dao&#10;interface ExpenseDao {&#10;&#10;    @Query(&quot;SELECT * FROM expenses ORDER BY date DESC&quot;)&#10;    fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE categoryId = :categoryId ORDER BY date DESC&quot;)&#10;    fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE date BETWEEN :startDate AND :endDate ORDER BY date DESC&quot;)&#10;    fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE id = :id&quot;)&#10;    suspend fun getExpenseById(id: Long): ExpenseEntity?&#10;&#10;    @Query(&quot;SELECT SUM(amount) FROM expenses WHERE date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalExpensesForPeriod(startDate: Long, endDate: Long): Flow&lt;Double&gt;&#10;&#10;    @Query(&quot;SELECT categoryId, SUM(amount) as total FROM expenses GROUP BY categoryId&quot;)&#10;    fun getExpensesByCategoryTotal(): Flow&lt;Map&lt;Long, Double&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE description LIKE '%' || :searchQuery || '%' ORDER BY date DESC&quot;)&#10;    fun searchExpenses(searchQuery: String): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertExpense(expense: ExpenseEntity): Long&#10;&#10;    @Update&#10;    suspend fun updateExpense(expense: ExpenseEntity)&#10;&#10;    @Delete&#10;    suspend fun deleteExpense(expense: ExpenseEntity)&#10;&#10;    @Query(&quot;DELETE FROM expenses WHERE id = :id&quot;)&#10;    suspend fun deleteExpenseById(id: Long)&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM expenses&quot;)&#10;    suspend fun getExpenseCount(): Int&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.dao&#10;&#10;import androidx.room.*&#10;import `in`.sitharaj.aurabudget.data.local.entity.ExpenseEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Data class for category totals&#10; */&#10;data class CategoryTotal(&#10;    val categoryId: Long,&#10;    val total: Double&#10;)&#10;&#10;/**&#10; * Enhanced DAO for Expense operations with advanced queries&#10; * Following Interface Segregation Principle&#10; */&#10;@Dao&#10;interface ExpenseDao {&#10;&#10;    @Query(&quot;SELECT * FROM expenses ORDER BY date DESC&quot;)&#10;    fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE categoryId = :categoryId ORDER BY date DESC&quot;)&#10;    fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE date BETWEEN :startDate AND :endDate ORDER BY date DESC&quot;)&#10;    fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE id = :id&quot;)&#10;    suspend fun getExpenseById(id: Long): ExpenseEntity?&#10;&#10;    @Query(&quot;SELECT COALESCE(SUM(amount), 0.0) FROM expenses WHERE date BETWEEN :startDate AND :endDate&quot;)&#10;    fun getTotalExpensesForPeriod(startDate: Long, endDate: Long): Flow&lt;Double&gt;&#10;&#10;    @Query(&quot;SELECT categoryId, SUM(amount) as total FROM expenses GROUP BY categoryId&quot;)&#10;    fun getExpensesByCategoryTotal(): Flow&lt;List&lt;CategoryTotal&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM expenses WHERE description LIKE '%' || :searchQuery || '%' ORDER BY date DESC&quot;)&#10;    fun searchExpenses(searchQuery: String): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertExpense(expense: ExpenseEntity): Long&#10;&#10;    @Update&#10;    suspend fun updateExpense(expense: ExpenseEntity)&#10;&#10;    @Delete&#10;    suspend fun deleteExpense(expense: ExpenseEntity)&#10;&#10;    @Query(&quot;DELETE FROM expenses WHERE id = :id&quot;)&#10;    suspend fun deleteExpenseById(id: Long)&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM expenses&quot;)&#10;    suspend fun getExpenseCount(): Int&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/database/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/database/AppDatabase.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.data.local.database&#10;&#10;import androidx.room.Database&#10;import androidx.room.RoomDatabase&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;import `in`.sitharaj.aurabudget.data.local.entity.ExpenseEntity&#10;&#10;/**&#10; * Room database for AuraBudget app&#10; * Following clean architecture principles&#10; */&#10;@Database(&#10;    entities = [ExpenseEntity::class],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;abstract class AppDatabase : RoomDatabase() {&#10;    abstract fun expenseDao(): ExpenseDao&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.database&#10;&#10;import androidx.room.Database&#10;import androidx.room.RoomDatabase&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;import `in`.sitharaj.aurabudget.data.local.dao.BudgetDao&#10;import `in`.sitharaj.aurabudget.data.local.dao.CategoryDao&#10;import `in`.sitharaj.aurabudget.data.local.entity.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.data.local.entity.BudgetEntity&#10;import `in`.sitharaj.aurabudget.data.local.entity.CategoryEntity&#10;&#10;/**&#10; * Room database for AuraBudget app&#10; * Following clean architecture principles&#10; */&#10;@Database(&#10;    entities = [ExpenseEntity::class, BudgetEntity::class, CategoryEntity::class],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;abstract class AppDatabase : RoomDatabase() {&#10;    abstract fun expenseDao(): ExpenseDao&#10;    abstract fun budgetDao(): BudgetDao&#10;    abstract fun categoryDao(): CategoryDao&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/BudgetEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/BudgetEntity.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;/**&#10; * Room entity for Budget data&#10; * Data layer implementation separate from domain model&#10; */&#10;@Entity(tableName = &quot;budgets&quot;)&#10;data class BudgetEntity(&#10;    @PrimaryKey(autoGenerate = true) &#10;    val id: Long = 0,&#10;    val name: String,&#10;    val amount: Double,&#10;    val spent: Double = 0.0,&#10;    val categoryId: Long?,&#10;    val startDate: Long,&#10;    val endDate: Long,&#10;    val isRecurring: Boolean = false&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/CategoryEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/CategoryEntity.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;/**&#10; * Room entity for Category data&#10; * Data layer implementation separate from domain model&#10; */&#10;@Entity(tableName = &quot;categories&quot;)&#10;data class CategoryEntity(&#10;    @PrimaryKey(autoGenerate = true) &#10;    val id: Long = 0,&#10;    val name: String,&#10;    val icon: String?,&#10;    val color: String?,&#10;    val type: String = &quot;EXPENSE&quot;, // Store enum as string&#10;    val isDefault: Boolean = false,&#10;    val monthlyBudget: Double? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/ExpenseEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/local/entity/ExpenseEntity.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.local.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;/**&#10; * Room entity for Expense data&#10; * Data layer implementation separate from domain model&#10; */&#10;@Entity(tableName = &quot;expenses&quot;)&#10;data class ExpenseEntity(&#10;    @PrimaryKey(autoGenerate = true) &#10;    val id: Long = 0,&#10;    val amount: Double,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val description: String?,&#10;    val tags: String = &quot;&quot; // Store as comma-separated string&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/mapper/BudgetMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/mapper/BudgetMapper.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.mapper&#10;&#10;import `in`.sitharaj.aurabudget.data.local.entity.BudgetEntity as BudgetDataEntity&#10;import `in`.sitharaj.aurabudget.domain.model.BudgetEntity as BudgetDomainEntity&#10;&#10;/**&#10; * Mapper between data layer and domain layer entities for Budget&#10; * Following Single Responsibility Principle and Separation of Concerns&#10; */&#10;object BudgetMapper {&#10;    &#10;    fun mapToDomain(entity: BudgetDataEntity): BudgetDomainEntity {&#10;        return BudgetDomainEntity(&#10;            id = entity.id,&#10;            name = entity.name,&#10;            amount = entity.amount,&#10;            spent = entity.spent,&#10;            categoryId = entity.categoryId,&#10;            startDate = entity.startDate,&#10;            endDate = entity.endDate,&#10;            isRecurring = entity.isRecurring&#10;        )&#10;    }&#10;    &#10;    fun mapToData(domainEntity: BudgetDomainEntity): BudgetDataEntity {&#10;        return BudgetDataEntity(&#10;            id = domainEntity.id,&#10;            name = domainEntity.name,&#10;            amount = domainEntity.amount,&#10;            spent = domainEntity.spent,&#10;            categoryId = domainEntity.categoryId,&#10;            startDate = domainEntity.startDate,&#10;            endDate = domainEntity.endDate,&#10;            isRecurring = domainEntity.isRecurring&#10;        )&#10;    }&#10;    &#10;    fun mapToDomainList(entities: List&lt;BudgetDataEntity&gt;): List&lt;BudgetDomainEntity&gt; {&#10;        return entities.map { mapToDomain(it) }&#10;    }&#10;    &#10;    fun mapToDataList(domainEntities: List&lt;BudgetDomainEntity&gt;): List&lt;BudgetDataEntity&gt; {&#10;        return domainEntities.map { mapToData(it) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/mapper/CategoryMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/mapper/CategoryMapper.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.mapper&#10;&#10;import `in`.sitharaj.aurabudget.data.local.entity.CategoryEntity as CategoryDataEntity&#10;import `in`.sitharaj.aurabudget.domain.model.CategoryEntity as CategoryDomainEntity&#10;&#10;/**&#10; * Mapper between data layer and domain layer entities for Category&#10; * Following Single Responsibility Principle and Separation of Concerns&#10; */&#10;object CategoryMapper {&#10;    &#10;    fun mapToDomain(entity: CategoryDataEntity): CategoryDomainEntity {&#10;        return CategoryDomainEntity(&#10;            id = entity.id,&#10;            name = entity.name,&#10;            icon = entity.icon,&#10;            color = entity.color,&#10;            type = CategoryDomainEntity.CategoryType.valueOf(entity.type),&#10;            isDefault = entity.isDefault,&#10;            monthlyBudget = entity.monthlyBudget&#10;        )&#10;    }&#10;    &#10;    fun mapToData(domainEntity: CategoryDomainEntity): CategoryDataEntity {&#10;        return CategoryDataEntity(&#10;            id = domainEntity.id,&#10;            name = domainEntity.name,&#10;            icon = domainEntity.icon,&#10;            color = domainEntity.color,&#10;            type = domainEntity.type.name,&#10;            isDefault = domainEntity.isDefault,&#10;            monthlyBudget = domainEntity.monthlyBudget&#10;        )&#10;    }&#10;    &#10;    fun mapToDomainList(entities: List&lt;CategoryDataEntity&gt;): List&lt;CategoryDomainEntity&gt; {&#10;        return entities.map { mapToDomain(it) }&#10;    }&#10;    &#10;    fun mapToDataList(domainEntities: List&lt;CategoryDomainEntity&gt;): List&lt;CategoryDataEntity&gt; {&#10;        return domainEntities.map { mapToData(it) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/mapper/ExpenseMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/mapper/ExpenseMapper.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.mapper&#10;&#10;import `in`.sitharaj.aurabudget.data.local.entity.ExpenseEntity as ExpenseDataEntity&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity as ExpenseDomainEntity&#10;&#10;/**&#10; * Mapper between data layer and domain layer entities&#10; * Following Single Responsibility Principle and Separation of Concerns&#10; */&#10;object ExpenseMapper {&#10;    &#10;    fun mapToDomain(entity: ExpenseDataEntity): ExpenseDomainEntity {&#10;        return ExpenseDomainEntity(&#10;            id = entity.id,&#10;            amount = entity.amount,&#10;            categoryId = entity.categoryId,&#10;            date = entity.date,&#10;            description = entity.description,&#10;            tags = entity.tags.split(&quot;,&quot;).filter { it.isNotBlank() }&#10;        )&#10;    }&#10;    &#10;    fun mapToData(domainEntity: ExpenseDomainEntity): ExpenseDataEntity {&#10;        return ExpenseDataEntity(&#10;            id = domainEntity.id,&#10;            amount = domainEntity.amount,&#10;            categoryId = domainEntity.categoryId,&#10;            date = domainEntity.date,&#10;            description = domainEntity.description,&#10;            tags = domainEntity.tags.joinToString(&quot;,&quot;)&#10;        )&#10;    }&#10;    &#10;    fun mapToDomainList(entities: List&lt;ExpenseDataEntity&gt;): List&lt;ExpenseDomainEntity&gt; {&#10;        return entities.map { mapToDomain(it) }&#10;    }&#10;    &#10;    fun mapToDataList(domainEntities: List&lt;ExpenseDomainEntity&gt;): List&lt;ExpenseDataEntity&gt; {&#10;        return domainEntities.map { mapToData(it) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/BudgetRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/BudgetRepositoryImpl.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.local.dao.BudgetDao&#10;import `in`.sitharaj.aurabudget.data.mapper.BudgetMapper&#10;import `in`.sitharaj.aurabudget.domain.model.BudgetEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.BudgetRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Implementation of BudgetRepository&#10; * Following Dependency Inversion Principle and Repository Pattern&#10; */&#10;@Singleton&#10;class BudgetRepositoryImpl @Inject constructor(&#10;    private val budgetDao: BudgetDao&#10;) : BudgetRepository {&#10;&#10;    override fun getAllBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt; {&#10;        return budgetDao.getAllBudgets().map { entities -&gt;&#10;            BudgetMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getActiveBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt; {&#10;        return budgetDao.getActiveBudgets().map { entities -&gt;&#10;            BudgetMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getBudgetsByCategory(categoryId: Long): Flow&lt;List&lt;BudgetEntity&gt;&gt; {&#10;        return budgetDao.getBudgetsByCategory(categoryId).map { entities -&gt;&#10;            BudgetMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun insertBudget(budget: BudgetEntity): Long {&#10;        val dataEntity = BudgetMapper.mapToData(budget)&#10;        return budgetDao.insertBudget(dataEntity)&#10;    }&#10;&#10;    override suspend fun updateBudget(budget: BudgetEntity) {&#10;        val dataEntity = BudgetMapper.mapToData(budget)&#10;        budgetDao.updateBudget(dataEntity)&#10;    }&#10;&#10;    override suspend fun deleteBudget(budget: BudgetEntity) {&#10;        val dataEntity = BudgetMapper.mapToData(budget)&#10;        budgetDao.deleteBudget(dataEntity)&#10;    }&#10;&#10;    override suspend fun getBudgetById(id: Long): BudgetEntity? {&#10;        return budgetDao.getBudgetById(id)?.let { entity -&gt;&#10;            BudgetMapper.mapToDomain(entity)&#10;        }&#10;    }&#10;&#10;    override suspend fun updateBudgetSpentAmount(budgetId: Long, spentAmount: Double) {&#10;        budgetDao.updateBudgetSpentAmount(budgetId, spentAmount)&#10;    }&#10;&#10;    override fun getExpiredBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt; {&#10;        return budgetDao.getExpiredBudgets().map { entities -&gt;&#10;            BudgetMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/CategoryRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/CategoryRepositoryImpl.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.data.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.local.dao.CategoryDao&#10;import `in`.sitharaj.aurabudget.data.mapper.CategoryMapper&#10;import `in`.sitharaj.aurabudget.domain.model.CategoryEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.CategoryRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Implementation of CategoryRepository&#10; * Following Dependency Inversion Principle and Repository Pattern&#10; */&#10;@Singleton&#10;class CategoryRepositoryImpl @Inject constructor(&#10;    private val categoryDao: CategoryDao&#10;) : CategoryRepository {&#10;&#10;    override fun getAllCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt; {&#10;        return categoryDao.getAllCategories().map { entities -&gt;&#10;            CategoryMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getCategoriesByType(type: CategoryEntity.CategoryType): Flow&lt;List&lt;CategoryEntity&gt;&gt; {&#10;        return categoryDao.getCategoriesByType(type.name).map { entities -&gt;&#10;            CategoryMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun insertCategory(category: CategoryEntity): Long {&#10;        val dataEntity = CategoryMapper.mapToData(category)&#10;        return categoryDao.insertCategory(dataEntity)&#10;    }&#10;&#10;    override suspend fun updateCategory(category: CategoryEntity) {&#10;        val dataEntity = CategoryMapper.mapToData(category)&#10;        categoryDao.updateCategory(dataEntity)&#10;    }&#10;&#10;    override suspend fun deleteCategory(category: CategoryEntity) {&#10;        val dataEntity = CategoryMapper.mapToData(category)&#10;        categoryDao.deleteCategory(dataEntity)&#10;    }&#10;&#10;    override suspend fun getCategoryById(id: Long): CategoryEntity? {&#10;        return categoryDao.getCategoryById(id)?.let { entity -&gt;&#10;            CategoryMapper.mapToDomain(entity)&#10;        }&#10;    }&#10;&#10;    override fun getDefaultCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt; {&#10;        return categoryDao.getDefaultCategories().map { entities -&gt;&#10;            CategoryMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun initializeDefaultCategories() {&#10;        val count = categoryDao.getCategoryCount()&#10;        if (count == 0) {&#10;            val defaultCategories = listOf(&#10;                CategoryEntity(name = &quot;Food &amp; Dining&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true),&#10;                CategoryEntity(name = &quot;Transportation&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true),&#10;                CategoryEntity(name = &quot;Shopping&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true),&#10;                CategoryEntity(name = &quot;Entertainment&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true),&#10;                CategoryEntity(name = &quot;Bills &amp; Utilities&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true),&#10;                CategoryEntity(name = &quot;Healthcare&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true),&#10;                CategoryEntity(name = &quot;Travel&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true),&#10;                CategoryEntity(name = &quot;Other&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true)&#10;            )&#10;&#10;            defaultCategories.forEach { category -&gt;&#10;                insertCategory(category)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.local.dao.CategoryDao&#10;import `in`.sitharaj.aurabudget.data.mapper.CategoryMapper&#10;import `in`.sitharaj.aurabudget.domain.model.CategoryEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.CategoryRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Implementation of CategoryRepository&#10; * Following Dependency Inversion Principle and Repository Pattern&#10; */&#10;@Singleton&#10;class CategoryRepositoryImpl @Inject constructor(&#10;    private val categoryDao: CategoryDao&#10;) : CategoryRepository {&#10;&#10;    override fun getAllCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt; {&#10;        return categoryDao.getAllCategories().map { entities -&gt;&#10;            CategoryMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getCategoriesByType(type: CategoryEntity.CategoryType): Flow&lt;List&lt;CategoryEntity&gt;&gt; {&#10;        return categoryDao.getCategoriesByType(type.name).map { entities -&gt;&#10;            CategoryMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun insertCategory(category: CategoryEntity): Long {&#10;        val dataEntity = CategoryMapper.mapToData(category)&#10;        return categoryDao.insertCategory(dataEntity)&#10;    }&#10;&#10;    override suspend fun updateCategory(category: CategoryEntity) {&#10;        val dataEntity = CategoryMapper.mapToData(category)&#10;        categoryDao.updateCategory(dataEntity)&#10;    }&#10;&#10;    override suspend fun deleteCategory(category: CategoryEntity) {&#10;        val dataEntity = CategoryMapper.mapToData(category)&#10;        categoryDao.deleteCategory(dataEntity)&#10;    }&#10;&#10;    override suspend fun getCategoryById(id: Long): CategoryEntity? {&#10;        return categoryDao.getCategoryById(id)?.let { entity -&gt;&#10;            CategoryMapper.mapToDomain(entity)&#10;        }&#10;    }&#10;&#10;    override fun getDefaultCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt; {&#10;        return categoryDao.getDefaultCategories().map { entities -&gt;&#10;            CategoryMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun initializeDefaultCategories() {&#10;        val count = categoryDao.getCategoryCount()&#10;        if (count == 0) {&#10;            val defaultCategories = listOf(&#10;                CategoryEntity(name = &quot;Food &amp; Dining&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true, icon = &quot;food_icon&quot;, color = &quot;red&quot;),&#10;                CategoryEntity(name = &quot;Transportation&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true, icon = &quot;transport_icon&quot;, color = &quot;blue&quot;),&#10;                CategoryEntity(name = &quot;Shopping&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true, icon = &quot;shopping_icon&quot;, color = &quot;green&quot;),&#10;                CategoryEntity(name = &quot;Entertainment&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true, icon = &quot;entertainment_icon&quot;, color = &quot;yellow&quot;),&#10;                CategoryEntity(name = &quot;Bills &amp; Utilities&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true, icon = &quot;bills_icon&quot;, color = &quot;purple&quot;),&#10;                CategoryEntity(name = &quot;Healthcare&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true, icon = &quot;healthcare_icon&quot;, color = &quot;orange&quot;),&#10;                CategoryEntity(name = &quot;Travel&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true, icon = &quot;travel_icon&quot;, color = &quot;cyan&quot;),&#10;                CategoryEntity(name = &quot;Other&quot;, type = CategoryEntity.CategoryType.EXPENSE, isDefault = true, icon = &quot;other_icon&quot;, color = &quot;magenta&quot;)&#10;            )&#10;&#10;            defaultCategories.forEach { category -&gt;&#10;                insertCategory(category)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/ExpenseRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/ExpenseRepositoryImpl.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.data.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;import `in`.sitharaj.aurabudget.data.mapper.ExpenseMapper&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import java.util.*&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Implementation of ExpenseRepository&#10; * Following Dependency Inversion Principle and Repository Pattern&#10; */&#10;@Singleton&#10;class ExpenseRepositoryImpl @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) : ExpenseRepository {&#10;&#10;    override fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getAllExpenses().map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getExpensesByCategory(categoryId).map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getExpensesByDateRange(startDate, endDate).map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun insertExpense(expense: ExpenseEntity): Long {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        return expenseDao.insertExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun updateExpense(expense: ExpenseEntity) {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        expenseDao.updateExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun deleteExpense(expense: ExpenseEntity) {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        expenseDao.deleteExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun getExpenseById(id: Long): ExpenseEntity? {&#10;        return expenseDao.getExpenseById(id)?.let { entity -&gt;&#10;            ExpenseMapper.mapToDomain(entity)&#10;        }&#10;    }&#10;&#10;    override fun getTotalExpensesForMonth(month: Int, year: Int): Flow&lt;Double&gt; {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.set(year, month - 1, 1, 0, 0, 0)&#10;        val startDate = calendar.timeInMillis&#10;&#10;        calendar.add(Calendar.MONTH, 1)&#10;        calendar.add(Calendar.MILLISECOND, -1)&#10;        val endDate = calendar.timeInMillis&#10;&#10;        return expenseDao.getTotalExpensesForPeriod(startDate, endDate)&#10;    }&#10;&#10;    override fun getExpensesGroupedByCategory(): Flow&lt;Map&lt;Long, List&lt;ExpenseEntity&gt;&gt;&gt; {&#10;        return expenseDao.getAllExpenses().map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities).groupBy { it.categoryId }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.local.dao.ExpenseDao&#10;import `in`.sitharaj.aurabudget.data.mapper.ExpenseMapper&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import java.util.*&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Implementation of ExpenseRepository&#10; * Following Dependency Inversion Principle and Repository Pattern&#10; */&#10;@Singleton&#10;class ExpenseRepositoryImpl @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) : ExpenseRepository {&#10;&#10;    override fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getAllExpenses().map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getExpensesByCategory(categoryId).map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseDao.getExpensesByDateRange(startDate, endDate).map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities)&#10;        }&#10;    }&#10;&#10;    override suspend fun insertExpense(expense: ExpenseEntity): Long {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        return expenseDao.insertExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun updateExpense(expense: ExpenseEntity) {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        expenseDao.updateExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun deleteExpense(expense: ExpenseEntity) {&#10;        val dataEntity = ExpenseMapper.mapToData(expense)&#10;        expenseDao.deleteExpense(dataEntity)&#10;    }&#10;&#10;    override suspend fun getExpenseById(id: Long): ExpenseEntity? {&#10;        return expenseDao.getExpenseById(id)?.let { entity -&gt;&#10;            ExpenseMapper.mapToDomain(entity)&#10;        }&#10;    }&#10;&#10;    override fun getTotalExpensesForMonth(month: Int, year: Int): Flow&lt;Double&gt; {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.set(year, month - 1, 1, 0, 0, 0)&#10;        val startDate = calendar.timeInMillis&#10;&#10;        calendar.add(Calendar.MONTH, 1)&#10;        calendar.add(Calendar.MILLISECOND, -1)&#10;        val endDate = calendar.timeInMillis&#10;&#10;        return expenseDao.getTotalExpensesForPeriod(startDate, endDate)&#10;    }&#10;&#10;    override fun getExpensesGroupedByCategory(): Flow&lt;Map&lt;Long, List&lt;ExpenseEntity&gt;&gt;&gt; {&#10;        return expenseDao.getAllExpenses().map { entities -&gt;&#10;            ExpenseMapper.mapToDomainList(entities).groupBy { it.categoryId }&#10;        }&#10;    }&#10;&#10;    fun getExpensesByCategoryTotal(): Flow&lt;Map&lt;Long, Double&gt;&gt; {&#10;        return expenseDao.getExpensesByCategoryTotal().map { categoryTotals -&gt;&#10;            categoryTotals.associate { it.categoryId to it.total }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/PreferencesRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/data/repository/PreferencesRepositoryImpl.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.data.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.UserPreferencesManager&#10;import `in`.sitharaj.aurabudget.domain.repository.PreferencesRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Implementation of PreferencesRepository&#10; * Following Dependency Inversion Principle and Repository Pattern&#10; */&#10;@Singleton&#10;class PreferencesRepositoryImpl @Inject constructor(&#10;    private val userPreferencesManager: UserPreferencesManager&#10;) : PreferencesRepository {&#10;&#10;    override val isDarkTheme: Flow&lt;Boolean&gt; = userPreferencesManager.isDarkTheme&#10;&#10;    override suspend fun setDarkTheme(enabled: Boolean) = userPreferencesManager.setDarkTheme(enabled)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/di/RepositoryModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/di/RepositoryModule.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.di&#10;&#10;import dagger.Binds&#10;import dagger.Module&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import `in`.sitharaj.aurabudget.data.repository.ExpenseRepositoryImpl&#10;import `in`.sitharaj.aurabudget.data.repository.BudgetRepositoryImpl&#10;import `in`.sitharaj.aurabudget.data.repository.CategoryRepositoryImpl&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import `in`.sitharaj.aurabudget.domain.repository.BudgetRepository&#10;import `in`.sitharaj.aurabudget.domain.repository.CategoryRepository&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Hilt module for repository dependencies&#10; * Following Dependency Inversion Principle&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;abstract class RepositoryModule {&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindExpenseRepository(&#10;        expenseRepositoryImpl: ExpenseRepositoryImpl&#10;    ): ExpenseRepository&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindBudgetRepository(&#10;        budgetRepositoryImpl: BudgetRepositoryImpl&#10;    ): BudgetRepository&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindCategoryRepository(&#10;        categoryRepositoryImpl: CategoryRepositoryImpl&#10;    ): CategoryRepository&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.di&#10;&#10;import dagger.Binds&#10;import dagger.Module&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import `in`.sitharaj.aurabudget.data.repository.ExpenseRepositoryImpl&#10;import `in`.sitharaj.aurabudget.data.repository.BudgetRepositoryImpl&#10;import `in`.sitharaj.aurabudget.data.repository.CategoryRepositoryImpl&#10;import `in`.sitharaj.aurabudget.data.repository.PreferencesRepositoryImpl&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import `in`.sitharaj.aurabudget.domain.repository.BudgetRepository&#10;import `in`.sitharaj.aurabudget.domain.repository.CategoryRepository&#10;import `in`.sitharaj.aurabudget.domain.repository.PreferencesRepository&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Hilt module for repository dependencies&#10; * Following Dependency Inversion Principle&#10; */&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;abstract class RepositoryModule {&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindExpenseRepository(&#10;        expenseRepositoryImpl: ExpenseRepositoryImpl&#10;    ): ExpenseRepository&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindBudgetRepository(&#10;        budgetRepositoryImpl: BudgetRepositoryImpl&#10;    ): BudgetRepository&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindCategoryRepository(&#10;        categoryRepositoryImpl: CategoryRepositoryImpl&#10;    ): CategoryRepository&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindPreferencesRepository(&#10;        preferencesRepositoryImpl: PreferencesRepositoryImpl&#10;    ): PreferencesRepository&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/AdvancedModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/AdvancedModels.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.model&#10;&#10;import java.time.LocalDate&#10;&#10;/**&#10; * Enhanced financial goal tracking model&#10; */&#10;data class FinancialGoal(&#10;    val id: Long = 0,&#10;    val name: String,&#10;    val targetAmount: Double,&#10;    val currentAmount: Double = 0.0,&#10;    val targetDate: LocalDate,&#10;    val categoryId: Long?,&#10;    val description: String?,&#10;    val isCompleted: Boolean = false&#10;) {&#10;    fun getProgress(): Float = if (targetAmount &gt; 0) (currentAmount / targetAmount).toFloat() else 0f&#10;    &#10;    fun getRemainingAmount(): Double = targetAmount - currentAmount&#10;    &#10;    fun getDaysRemaining(): Int {&#10;        // Calculate days until target date&#10;        return 30 // Placeholder&#10;    }&#10;    &#10;    fun isOnTrack(): Boolean {&#10;        val progressPercentage = getProgress()&#10;        val timeProgressPercentage = 0.5f // Placeholder calculation&#10;        return progressPercentage &gt;= timeProgressPercentage&#10;    }&#10;}&#10;&#10;/**&#10; * Transaction model for comprehensive tracking&#10; */&#10;data class Transaction(&#10;    val id: Long = 0,&#10;    val amount: Double,&#10;    val type: TransactionType,&#10;    val categoryId: Long,&#10;    val accountId: Long,&#10;    val date: Long,&#10;    val description: String?,&#10;    val tags: List&lt;String&gt; = emptyList(),&#10;    val location: String? = null,&#10;    val receipt: String? = null // Image path&#10;) {&#10;    enum class TransactionType { INCOME, EXPENSE, TRANSFER }&#10;    &#10;    fun getFormattedAmount(): String = String.format(&quot;$%.2f&quot;, amount)&#10;}&#10;&#10;/**&#10; * Account model for multiple financial accounts&#10; */&#10;data class Account(&#10;    val id: Long = 0,&#10;    val name: String,&#10;    val type: AccountType,&#10;    val balance: Double,&#10;    val currency: String = &quot;USD&quot;,&#10;    val isDefault: Boolean = false&#10;) {&#10;    enum class AccountType { CASH, BANK, CREDIT_CARD, SAVINGS, INVESTMENT }&#10;    &#10;    fun getFormattedBalance(): String = String.format(&quot;$%.2f&quot;, balance)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/BudgetEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/BudgetEntity.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.model&#10;&#10;/**&#10; * Domain model for Budget - Clean architecture entity&#10; * Represents budget planning and tracking&#10; */&#10;data class BudgetEntity(&#10;    val id: Long = 0,&#10;    val name: String,&#10;    val amount: Double,&#10;    val spent: Double = 0.0,&#10;    val categoryId: Long?,&#10;    val startDate: Long,&#10;    val endDate: Long,&#10;    val isRecurring: Boolean = false&#10;) {&#10;    fun getRemainingAmount(): Double = amount - spent&#10;    &#10;    fun getSpentPercentage(): Float = if (amount &gt; 0) (spent / amount).toFloat() else 0f&#10;    &#10;    fun isOverBudget(): Boolean = spent &gt; amount&#10;    &#10;    fun isExpired(): Boolean = System.currentTimeMillis() &gt; endDate&#10;    &#10;    fun getDaysRemaining(): Long {&#10;        val currentTime = System.currentTimeMillis()&#10;        return if (currentTime &lt; endDate) {&#10;            (endDate - currentTime) / (24 * 60 * 60 * 1000)&#10;        } else 0&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/CategoryEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/CategoryEntity.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.model&#10;&#10;/**&#10; * Domain model for Category - Clean architecture entity&#10; * Represents expense/income categories with enhanced features&#10; */&#10;data class CategoryEntity(&#10;    val id: Long = 0,&#10;    val name: String,&#10;    val icon: String?,&#10;    val color: String?,&#10;    val type: CategoryType = CategoryType.EXPENSE,&#10;    val isDefault: Boolean = false,&#10;    val monthlyBudget: Double? = null&#10;) {&#10;    enum class CategoryType {&#10;        EXPENSE, INCOME, TRANSFER&#10;    }&#10;    &#10;    fun hasValidName(): Boolean = name.isNotBlank()&#10;    &#10;    fun getDisplayName(): String = name.trim().takeIf { it.isNotEmpty() } ?: &quot;Unnamed Category&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/ExpenseEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/ExpenseEntity.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.model&#10;&#10;/**&#10; * Domain model for Expense - Clean architecture entity&#10; * Represents the core business entity without any framework dependencies&#10; */&#10;data class ExpenseEntity(&#10;    val id: Long = 0,&#10;    val amount: Double,&#10;    val categoryId: Long,&#10;    val date: Long,&#10;    val description: String?,&#10;    val tags: List&lt;String&gt; = emptyList()&#10;) {&#10;    fun isValid(): Boolean {&#10;        return amount &gt; 0 &amp;&amp; description?.isNotBlank() == true&#10;    }&#10;    &#10;    fun getFormattedAmount(): String {&#10;        return String.format(&quot;$%.2f&quot;, amount)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/FinancialSummary.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/model/FinancialSummary.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.model&#10;&#10;/**&#10; * Domain model for Financial Insights and Analytics&#10; */&#10;data class FinancialSummary(&#10;    val totalIncome: Double,&#10;    val totalExpenses: Double,&#10;    val netAmount: Double,&#10;    val categoryBreakdown: Map&lt;CategoryEntity, Double&gt;,&#10;    val monthlyTrend: List&lt;MonthlyData&gt;,&#10;    val topCategories: List&lt;Pair&lt;CategoryEntity, Double&gt;&gt;&#10;) {&#10;    fun getSavingsRate(): Double {&#10;        return if (totalIncome &gt; 0) ((totalIncome - totalExpenses) / totalIncome) * 100 else 0.0&#10;    }&#10;    &#10;    fun isHealthyFinancially(): Boolean = netAmount &gt; 0 &amp;&amp; getSavingsRate() &gt;= 20.0&#10;}&#10;&#10;data class MonthlyData(&#10;    val month: String,&#10;    val income: Double,&#10;    val expenses: Double,&#10;    val savings: Double&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/BudgetRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/BudgetRepository.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.repository&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.BudgetEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Repository interface for Budget operations&#10; * Following Repository pattern and Dependency Inversion Principle&#10; */&#10;interface BudgetRepository {&#10;    fun getAllBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;    fun getActiveBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;    fun getBudgetsByCategory(categoryId: Long): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;    suspend fun insertBudget(budget: BudgetEntity): Long&#10;    suspend fun updateBudget(budget: BudgetEntity)&#10;    suspend fun deleteBudget(budget: BudgetEntity)&#10;    suspend fun getBudgetById(id: Long): BudgetEntity?&#10;    suspend fun updateBudgetSpentAmount(budgetId: Long, spentAmount: Double)&#10;    fun getExpiredBudgets(): Flow&lt;List&lt;BudgetEntity&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/CategoryRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/CategoryRepository.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.repository&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.CategoryEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Repository interface for Category operations&#10; * Following Repository pattern and Dependency Inversion Principle&#10; */&#10;interface CategoryRepository {&#10;    fun getAllCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;    fun getCategoriesByType(type: CategoryEntity.CategoryType): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;    suspend fun insertCategory(category: CategoryEntity): Long&#10;    suspend fun updateCategory(category: CategoryEntity)&#10;    suspend fun deleteCategory(category: CategoryEntity)&#10;    suspend fun getCategoryById(id: Long): CategoryEntity?&#10;    fun getDefaultCategories(): Flow&lt;List&lt;CategoryEntity&gt;&gt;&#10;    suspend fun initializeDefaultCategories()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/ExpenseRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/ExpenseRepository.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.repository&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Repository interface for Expense operations&#10; * Following Repository pattern and Dependency Inversion Principle&#10; */&#10;interface ExpenseRepository {&#10;    fun getAllExpenses(): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;    fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;    fun getExpensesByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt;&#10;    suspend fun insertExpense(expense: ExpenseEntity): Long&#10;    suspend fun updateExpense(expense: ExpenseEntity)&#10;    suspend fun deleteExpense(expense: ExpenseEntity)&#10;    suspend fun getExpenseById(id: Long): ExpenseEntity?&#10;    fun getTotalExpensesForMonth(month: Int, year: Int): Flow&lt;Double&gt;&#10;    fun getExpensesGroupedByCategory(): Flow&lt;Map&lt;Long, List&lt;ExpenseEntity&gt;&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/PreferencesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/repository/PreferencesRepository.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.repository&#10;&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Repository interface for user preferences operations&#10; * Following Repository pattern and Dependency Inversion Principle&#10; */&#10;interface PreferencesRepository {&#10;    val isDarkTheme: Flow&lt;Boolean&gt;&#10;    suspend fun setDarkTheme(enabled: Boolean)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/AddExpenseUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/AddExpenseUseCase.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.usecase.expense&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use case for adding new expenses&#10; * Following Single Responsibility Principle&#10; */&#10;class AddExpenseUseCase @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) {&#10;    suspend operator fun invoke(expense: ExpenseEntity): Result&lt;Long&gt; {&#10;        return try {&#10;            if (!expense.isValid()) {&#10;                Result.failure(IllegalArgumentException(&quot;Invalid expense data&quot;))&#10;            } else {&#10;                val id = expenseRepository.insertExpense(expense)&#10;                Result.success(id)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/DeleteExpenseUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/DeleteExpenseUseCase.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.usecase.expense&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use case for deleting expenses&#10; * Following Single Responsibility Principle&#10; */&#10;class DeleteExpenseUseCase @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) {&#10;    suspend operator fun invoke(expense: ExpenseEntity): Result&lt;Unit&gt; {&#10;        return try {&#10;            expenseRepository.deleteExpense(expense)&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/GetExpensesUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/GetExpensesUseCase.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.usecase.expense&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use case for getting expenses with filtering and sorting&#10; * Following Single Responsibility Principle&#10; */&#10;class GetExpensesUseCase @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) {&#10;    operator fun invoke(): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseRepository.getAllExpenses()&#10;    }&#10;    &#10;    fun getByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseRepository.getExpensesByCategory(categoryId)&#10;    }&#10;    &#10;    fun getByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseRepository.getExpensesByDateRange(startDate, endDate)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/DashboardComponents.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/DashboardComponents.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;/**&#10; * Beautiful financial summary card for dashboard&#10; * Following Single Responsibility Principle&#10; */&#10;@Composable&#10;fun FinancialSummaryCard(&#10;    title: String,&#10;    amount: Double,&#10;    subtitle: String? = null,&#10;    trend: String? = null,&#10;    isPositive: Boolean = true,&#10;    backgroundColor: Color = MaterialTheme.colorScheme.primaryContainer,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(20.dp)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(containerColor = backgroundColor)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                fontSize = 14.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = String.format(&quot;$%.2f&quot;, amount),&#10;                fontSize = 28.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;            )&#10;            &#10;            if (subtitle != null || trend != null) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                &#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    if (subtitle != null) {&#10;                        Text(&#10;                            text = subtitle,&#10;                            fontSize = 12.sp,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                    &#10;                    if (trend != null) {&#10;                        Text(&#10;                            text = trend,&#10;                            fontSize = 12.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = if (isPositive) Color(0xFF4CAF50) else Color(0xFFF44336)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Category spending breakdown component&#10; */&#10;@Composable&#10;fun CategorySpendingItem(&#10;    categoryName: String,&#10;    amount: Double,&#10;    percentage: Float,&#10;    color: Color = MaterialTheme.colorScheme.primary,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(12.dp)&#10;                    .clip(RoundedCornerShape(6.dp))&#10;                    .then(Modifier.fillMaxSize())&#10;            ) {&#10;                Card(&#10;                    colors = CardDefaults.cardColors(containerColor = color),&#10;                    modifier = Modifier.fillMaxSize()&#10;                ) {}&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            &#10;            Column {&#10;                Text(&#10;                    text = categoryName,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;${String.format(&quot;%.1f&quot;, percentage)}%&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Text(&#10;            text = String.format(&quot;$%.2f&quot;, amount),&#10;            fontSize = 14.sp,&#10;            fontWeight = FontWeight.SemiBold,&#10;            color = MaterialTheme.colorScheme.onSurface&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/ExpenseCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/ExpenseCard.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;/**&#10; * Beautiful, modern expense item component&#10; * Following Single Responsibility Principle&#10; */&#10;@Composable&#10;fun ExpenseCard(&#10;    expense: ExpenseEntity,&#10;    onEdit: (ExpenseEntity) -&gt; Unit = {},&#10;    onDelete: (ExpenseEntity) -&gt; Unit = {},&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;    &#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .clickable { onEdit(expense) },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = expense.description ?: &quot;No description&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    &#10;                    Text(&#10;                        text = dateFormat.format(Date(expense.date)),&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                    )&#10;                    &#10;                    if (expense.tags.isNotEmpty()) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                        ) {&#10;                            expense.tags.take(3).forEach { tag -&gt;&#10;                                TagChip(tag = tag)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                Column(&#10;                    horizontalAlignment = Alignment.End&#10;                ) {&#10;                    Text(&#10;                        text = expense.getFormattedAmount(),&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.error&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    Row(&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        IconButton(&#10;                            onClick = { onEdit(expense) },&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Edit,&#10;                                contentDescription = &quot;Edit&quot;,&#10;                                tint = MaterialTheme.colorScheme.primary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                        &#10;                        IconButton(&#10;                            onClick = { onDelete(expense) },&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Delete,&#10;                                contentDescription = &quot;Delete&quot;,&#10;                                tint = MaterialTheme.colorScheme.error,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TagChip(tag: String) {&#10;    Box(&#10;        modifier = Modifier&#10;            .background(&#10;                MaterialTheme.colorScheme.primaryContainer,&#10;                RoundedCornerShape(12.dp)&#10;            )&#10;            .padding(horizontal = 8.dp, vertical = 4.dp)&#10;    ) {&#10;        Text(&#10;            text = tag,&#10;            fontSize = 10.sp,&#10;            fontWeight = FontWeight.Medium,&#10;            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/charts/FinancialCharts.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/charts/FinancialCharts.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.components.charts&#10;&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.*&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlin.math.*&#10;&#10;/**&#10; * Beautiful animated pie chart for expense categories&#10; */&#10;@Composable&#10;fun ExpensePieChart(&#10;    data: List&lt;Pair&lt;String, Double&gt;&gt;,&#10;    colors: List&lt;Color&gt;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val total = data.sumOf { it.second }&#10;    &#10;    if (total == 0.0) {&#10;        EmptyChartState(modifier = modifier)&#10;        return&#10;    }&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(16.dp)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Spending Breakdown&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            Row {&#10;                // Pie Chart&#10;                Canvas(&#10;                    modifier = Modifier&#10;                        .size(160.dp)&#10;                        .padding(8.dp)&#10;                ) {&#10;                    drawPieChart(data, colors, total)&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                &#10;                // Legend&#10;                Column(&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .padding(top = 8.dp)&#10;                ) {&#10;                    data.forEachIndexed { index, (category, amount) -&gt;&#10;                        val percentage = (amount / total * 100).toFloat()&#10;                        ChartLegendItem(&#10;                            color = colors[index % colors.size],&#10;                            label = category,&#10;                            value = String.format(&quot;$%.0f&quot;, amount),&#10;                            percentage = String.format(&quot;%.1f%%&quot;, percentage)&#10;                        )&#10;                        if (index &lt; data.size - 1) {&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Animated line chart for spending trends&#10; */&#10;@Composable&#10;fun SpendingTrendChart(&#10;    data: List&lt;Pair&lt;String, Double&gt;&gt;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val maxValue = data.maxOfOrNull { it.second } ?: 0.0&#10;    &#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(16.dp)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Spending Trend&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            Canvas(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;            ) {&#10;                drawLineChart(data, maxValue)&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            // X-axis labels&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                data.forEach { (label, _) -&gt;&#10;                    Text(&#10;                        text = label,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Beautiful progress chart for budget tracking&#10; */&#10;@Composable&#10;fun BudgetProgressChart(&#10;    budgetName: String,&#10;    spent: Double,&#10;    budget: Double,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val progress = if (budget &gt; 0) (spent / budget).toFloat() else 0f&#10;    val isOverBudget = spent &gt; budget&#10;    &#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(16.dp)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isOverBudget) &#10;                MaterialTheme.colorScheme.errorContainer &#10;            else &#10;                MaterialTheme.colorScheme.primaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = budgetName,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                    Text(&#10;                        text = &quot;Spent: ${String.format(&quot;$%.2f&quot;, spent)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Budget: ${String.format(&quot;$%.2f&quot;, budget)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = &quot;${(progress * 100).toInt()}%&quot;,&#10;                    fontSize = 24.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (isOverBudget) &#10;                        MaterialTheme.colorScheme.error &#10;                    else &#10;                        MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            LinearProgressIndicator(&#10;                progress = minOf(progress, 1f),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(8.dp)&#10;                    .clip(RoundedCornerShape(4.dp)),&#10;                color = if (isOverBudget) &#10;                    MaterialTheme.colorScheme.error &#10;                else &#10;                    MaterialTheme.colorScheme.primary&#10;            )&#10;            &#10;            if (isOverBudget) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;⚠️ Over budget by ${String.format(&quot;$%.2f&quot;, spent - budget)}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper functions for drawing charts&#10;private fun DrawScope.drawPieChart(&#10;    data: List&lt;Pair&lt;String, Double&gt;&gt;,&#10;    colors: List&lt;Color&gt;,&#10;    total: Double&#10;) {&#10;    val center = Offset(size.width / 2, size.height / 2)&#10;    val radius = minOf(size.width, size.height) / 2.5f&#10;    var startAngle = -90f&#10;    &#10;    data.forEachIndexed { index, (_, value) -&gt;&#10;        val sweepAngle = (value / total * 360).toFloat()&#10;        val color = colors[index % colors.size]&#10;        &#10;        drawArc(&#10;            color = color,&#10;            startAngle = startAngle,&#10;            sweepAngle = sweepAngle,&#10;            useCenter = true,&#10;            topLeft = Offset(center.x - radius, center.y - radius),&#10;            size = Size(radius * 2, radius * 2)&#10;        )&#10;        &#10;        startAngle += sweepAngle&#10;    }&#10;}&#10;&#10;private fun DrawScope.drawLineChart(&#10;    data: List&lt;Pair&lt;String, Double&gt;&gt;,&#10;    maxValue: Double&#10;) {&#10;    if (data.isEmpty() || maxValue == 0.0) return&#10;    &#10;    val strokeWidth = 4.dp.toPx()&#10;    val pointRadius = 6.dp.toPx()&#10;    val color = Color(0xFF6200EE)&#10;    &#10;    val points = data.mapIndexed { index, (_, value) -&gt;&#10;        val x = (index.toFloat() / (data.size - 1)) * size.width&#10;        val y = size.height - (value.toFloat() / maxValue.toFloat()) * size.height&#10;        Offset(x, y)&#10;    }&#10;    &#10;    // Draw line&#10;    for (i in 0 until points.size - 1) {&#10;        drawLine(&#10;            color = color,&#10;            start = points[i],&#10;            end = points[i + 1],&#10;            strokeWidth = strokeWidth,&#10;            cap = StrokeCap.Round&#10;        )&#10;    }&#10;    &#10;    // Draw points&#10;    points.forEach { point -&gt;&#10;        drawCircle(&#10;            color = color,&#10;            radius = pointRadius,&#10;            center = point&#10;        )&#10;        drawCircle(&#10;            color = Color.White,&#10;            radius = pointRadius - 2.dp.toPx(),&#10;            center = point&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ChartLegendItem(&#10;    color: Color,&#10;    label: String,&#10;    value: String,&#10;    percentage: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(12.dp)&#10;                .clip(RoundedCornerShape(2.dp))&#10;                .background(color)&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        &#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = label,&#10;                fontSize = 13.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Row {&#10;                Text(&#10;                    text = value,&#10;                    fontSize = 11.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Text(&#10;                    text = &quot;($percentage)&quot;,&#10;                    fontSize = 11.sp,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EmptyChartState(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(16.dp)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(40.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;&quot;,&#10;                fontSize = 48.sp&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;No Data Available&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Text(&#10;                text = &quot;Start adding expenses to see your analytics&quot;,&#10;                fontSize = 14.sp,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),&#10;                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Interactive bar chart for comparing categories&#10; */&#10;@Composable&#10;fun CategoryComparisonChart(&#10;    data: List&lt;Triple&lt;String, Double, Double&gt;&gt;, // Category, Current, Previous&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val maxValue = data.maxOfOrNull { maxOf(it.second, it.third) } ?: 1.0&#10;    &#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(16.dp)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Category Comparison&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            &#10;            Text(&#10;                text = &quot;Current vs Previous Month&quot;,&#10;                fontSize = 12.sp,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(20.dp))&#10;            &#10;            data.forEach { (category, current, previous) -&gt;&#10;                CategoryBarItem(&#10;                    category = category,&#10;                    currentAmount = current,&#10;                    previousAmount = previous,&#10;                    maxValue = maxValue&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;            }&#10;            &#10;            // Legend&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(12.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.primary,&#10;                                RoundedCornerShape(2.dp)&#10;                            )&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = &quot;Current&quot;,&#10;                        fontSize = 11.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                &#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(12.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.secondary,&#10;                                RoundedCornerShape(2.dp)&#10;                            )&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = &quot;Previous&quot;,&#10;                        fontSize = 11.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CategoryBarItem(&#10;    category: String,&#10;    currentAmount: Double,&#10;    previousAmount: Double,&#10;    maxValue: Double,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val currentProgress = if (maxValue &gt; 0) (currentAmount / maxValue).toFloat() else 0f&#10;    val previousProgress = if (maxValue &gt; 0) (previousAmount / maxValue).toFloat() else 0f&#10;    val change = currentAmount - previousAmount&#10;    val changePercent = if (previousAmount &gt; 0) (change / previousAmount * 100) else 0.0&#10;    &#10;    Column(modifier = modifier) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.Bottom&#10;        ) {&#10;            Text(&#10;                text = category,&#10;                fontSize = 13.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            &#10;            Row(verticalAlignment = Alignment.Bottom) {&#10;                Text(&#10;                    text = String.format(&quot;$%.0f&quot;, currentAmount),&#10;                    fontSize = 13.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                &#10;                Text(&#10;                    text = if (change &gt;= 0) &quot;+${changePercent.toInt()}%&quot; else &quot;${changePercent.toInt()}%&quot;,&#10;                    fontSize = 10.sp,&#10;                    color = if (change &gt;= 0) Color(0xFFF44336) else Color(0xFF4CAF50)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(6.dp))&#10;        &#10;        Box(modifier = Modifier.fillMaxWidth()) {&#10;            // Previous month bar (background)&#10;            LinearProgressIndicator(&#10;                progress = previousProgress,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(20.dp)&#10;                    .clip(RoundedCornerShape(10.dp)),&#10;                color = MaterialTheme.colorScheme.secondary.copy(alpha = 0.3f),&#10;                trackColor = MaterialTheme.colorScheme.surfaceVariant&#10;            )&#10;            &#10;            // Current month bar (foreground)&#10;            LinearProgressIndicator(&#10;                progress = currentProgress,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(20.dp)&#10;                    .clip(RoundedCornerShape(10.dp)),&#10;                color = MaterialTheme.colorScheme.primary,&#10;                trackColor = Color.Transparent&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Donut chart variant for better visual appeal&#10; */&#10;@Composable&#10;fun ExpenseDonutChart(&#10;    data: List&lt;Pair&lt;String, Double&gt;&gt;,&#10;    colors: List&lt;Color&gt;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val total = data.sumOf { it.second }&#10;    &#10;    if (total == 0.0) {&#10;        EmptyChartState(modifier = modifier)&#10;        return&#10;    }&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(16.dp)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Expense Distribution&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            Box(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Canvas(&#10;                    modifier = Modifier.size(200.dp)&#10;                ) {&#10;                    drawDonutChart(data, colors, total)&#10;                }&#10;                &#10;                // Center text&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Total&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = String.format(&quot;$%.0f&quot;, total),&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(20.dp))&#10;            &#10;            // Compact legend&#10;            data.take(5).forEachIndexed { index, (category, amount) -&gt;&#10;                val percentage = (amount / total * 100).toFloat()&#10;                ChartLegendItem(&#10;                    color = colors[index % colors.size],&#10;                    label = category,&#10;                    value = String.format(&quot;$%.0f&quot;, amount),&#10;                    percentage = String.format(&quot;%.1f%%&quot;, percentage)&#10;                )&#10;                if (index &lt; minOf(data.size - 1, 4)) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun DrawScope.drawDonutChart(&#10;    data: List&lt;Pair&lt;String, Double&gt;&gt;,&#10;    colors: List&lt;Color&gt;,&#10;    total: Double&#10;) {&#10;    val center = Offset(size.width / 2, size.height / 2)&#10;    val radius = minOf(size.width, size.height) / 2.2f&#10;    val strokeWidth = radius * 0.3f&#10;    var startAngle = -90f&#10;    &#10;    data.forEachIndexed { index, (_, value) -&gt;&#10;        val sweepAngle = (value / total * 360).toFloat()&#10;        val color = colors[index % colors.size]&#10;        &#10;        drawArc(&#10;            color = color,&#10;            startAngle = startAngle,&#10;            sweepAngle = sweepAngle,&#10;            useCenter = false,&#10;            topLeft = Offset(center.x - radius, center.y - radius),&#10;            size = Size(radius * 2, radius * 2),&#10;            style = androidx.compose.ui.graphics.drawscope.Stroke(width = strokeWidth, cap = StrokeCap.Round)&#10;        )&#10;        &#10;        startAngle += sweepAngle&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/AnalyticsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/AnalyticsScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.components.charts.*&#10;import `in`.sitharaj.aurabudget.presentation.components.*&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.AnalyticsViewModel&#10;&#10;/**&#10; * Advanced Analytics Dashboard with comprehensive financial insights&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AnalyticsScreen(&#10;    navController: NavController,&#10;    viewModel: AnalyticsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    &#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { &#10;                    Text(&#10;                        &quot;Analytics&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* TODO: Export data */ }) {&#10;                        Icon(Icons.Default.FileDownload, contentDescription = &quot;Export&quot;)&#10;                    }&#10;                    IconButton(onClick = { /* TODO: Settings */ }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;            &#10;            // Financial Overview Cards&#10;            item {&#10;                Text(&#10;                    text = &quot;Financial Overview&quot;,&#10;                    fontSize = 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                &#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    item {&#10;                        FinancialMetricCard(&#10;                            title = &quot;Total Income&quot;,&#10;                            amount = uiState.totalIncome,&#10;                            icon = Icons.Default.TrendingUp,&#10;                            color = Color(0xFF4CAF50),&#10;                            change = &quot;+12.5%&quot;&#10;                        )&#10;                    }&#10;                    item {&#10;                        FinancialMetricCard(&#10;                            title = &quot;Total Expenses&quot;,&#10;                            amount = uiState.totalExpenses,&#10;                            icon = Icons.Default.TrendingDown,&#10;                            color = Color(0xFFF44336),&#10;                            change = &quot;+5.2%&quot;&#10;                        )&#10;                    }&#10;                    item {&#10;                        FinancialMetricCard(&#10;                            title = &quot;Net Savings&quot;,&#10;                            amount = uiState.netSavings,&#10;                            icon = Icons.Default.Savings,&#10;                            color = Color(0xFF2196F3),&#10;                            change = &quot;+25.8%&quot;&#10;                        )&#10;                    }&#10;                    item {&#10;                        FinancialMetricCard(&#10;                            title = &quot;Savings Rate&quot;,&#10;                            amount = uiState.savingsRate,&#10;                            icon = Icons.Default.Percent,&#10;                            color = Color(0xFF9C27B0),&#10;                            change = &quot;+3.2%&quot;,&#10;                            isPercentage = true&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            &#10;            // Spending by Category Chart&#10;            item {&#10;                ExpensePieChart(&#10;                    data = uiState.expensesByCategory,&#10;                    colors = listOf(&#10;                        Color(0xFF6200EE),&#10;                        Color(0xFF03DAC6),&#10;                        Color(0xFFFF6B6B),&#10;                        Color(0xFF4ECDC4),&#10;                        Color(0xFF45B7D1),&#10;                        Color(0xFF96CEB4),&#10;                        Color(0xFFFD79A8),&#10;                        Color(0xFFE84393)&#10;                    )&#10;                )&#10;            }&#10;            &#10;            // Monthly Trend Chart&#10;            item {&#10;                SpendingTrendChart(&#10;                    data = uiState.monthlyTrend&#10;                )&#10;            }&#10;            &#10;            // Budget Progress Section&#10;            item {&#10;                Text(&#10;                    text = &quot;Budget Progress&quot;,&#10;                    fontSize = 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            &#10;            items(uiState.budgetProgress) { budget -&gt;&#10;                BudgetProgressChart(&#10;                    budgetName = budget.name,&#10;                    spent = budget.spent,&#10;                    budget = budget.amount&#10;                )&#10;            }&#10;            &#10;            // Goals Section&#10;            item {&#10;                Text(&#10;                    text = &quot;Financial Goals&quot;,&#10;                    fontSize = 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            &#10;            items(uiState.financialGoals) { goal -&gt;&#10;                GoalProgressCard(&#10;                    goal = goal,&#10;                    onGoalClick = { /* TODO: Navigate to goal details */ }&#10;                )&#10;            }&#10;            &#10;            // Insights &amp; Recommendations&#10;            item {&#10;                InsightsCard(insights = uiState.insights)&#10;            }&#10;            &#10;            item {&#10;                Spacer(modifier = Modifier.height(100.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FinancialMetricCard(&#10;    title: String,&#10;    amount: Double,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    color: Color,&#10;    change: String,&#10;    isPercentage: Boolean = false,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.width(160.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = color.copy(alpha = 0.1f)&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                &#10;                Text(&#10;                    text = change,&#10;                    fontSize = 12.sp,&#10;                    color = if (change.startsWith(&quot;+&quot;)) Color(0xFF4CAF50) else Color(0xFFF44336),&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            Text(&#10;                text = title,&#10;                fontSize = 12.sp,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;            )&#10;            &#10;            Text(&#10;                text = if (isPercentage) &quot;${amount.toInt()}%&quot; else String.format(&quot;$%.2f&quot;, amount),&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GoalProgressCard(&#10;    goal: `in`.sitharaj.aurabudget.domain.model.FinancialGoal,&#10;    onGoalClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        onClick = onGoalClick&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = goal.name,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    &#10;                    Text(&#10;                        text = &quot;${String.format(&quot;$%.0f&quot;, goal.currentAmount)} of ${String.format(&quot;$%.0f&quot;, goal.targetAmount)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = &quot;${(goal.getProgress() * 100).toInt()}%&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            LinearProgressIndicator(&#10;                progress = goal.getProgress(),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(8.dp),&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;Remaining: ${String.format(&quot;$%.0f&quot;, goal.getRemainingAmount())}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                )&#10;                &#10;                Text(&#10;                    text = if (goal.isOnTrack()) &quot;✅ On track&quot; else &quot;⚠️ Behind&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = if (goal.isOnTrack()) Color(0xFF4CAF50) else Color(0xFFFF9800)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InsightsCard(&#10;    insights: List&lt;String&gt;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Lightbulb,&#10;                    contentDescription = &quot;Insights&quot;,&#10;                    tint = MaterialTheme.colorScheme.secondary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                &#10;                Text(&#10;                    text = &quot;Smart Insights&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            insights.forEach { insight -&gt;&#10;                Row(&#10;                    modifier = Modifier.padding(vertical = 4.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;&quot;,&#10;                        fontSize = 16.sp&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    &#10;                    Text(&#10;                        text = insight,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                        lineHeight = 20.sp&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.components.charts.*&#10;import `in`.sitharaj.aurabudget.presentation.components.*&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.AnalyticsViewModel&#10;import `in`.sitharaj.aurabudget.domain.model.FinancialGoal&#10;import java.util.Locale&#10;&#10;/**&#10; * Advanced Analytics Dashboard with comprehensive financial insights&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AnalyticsScreen(&#10;    navController: NavController,&#10;    viewModel: AnalyticsViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    &#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { &#10;                    Text(&#10;                        &quot;Analytics&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { viewModel.exportData() }) {&#10;                        Icon(Icons.Default.Download, contentDescription = &quot;Export&quot;)&#10;                    }&#10;                    IconButton(onClick = { /* TODO: Settings */ }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;            &#10;            // Financial Overview Cards&#10;            item {&#10;                Text(&#10;                    text = &quot;Financial Overview&quot;,&#10;                    fontSize = 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                &#10;                LazyRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    item {&#10;                        FinancialMetricCard(&#10;                            title = &quot;Total Income&quot;,&#10;                            amount = uiState.totalIncome,&#10;                            icon = Icons.Default.TrendingUp,&#10;                            color = Color(0xFF4CAF50),&#10;                            change = &quot;+12.5%&quot;&#10;                        )&#10;                    }&#10;                    item {&#10;                        FinancialMetricCard(&#10;                            title = &quot;Total Expenses&quot;,&#10;                            amount = uiState.totalExpenses,&#10;                            icon = Icons.Default.TrendingDown,&#10;                            color = Color(0xFFF44336),&#10;                            change = &quot;+5.2%&quot;&#10;                        )&#10;                    }&#10;                    item {&#10;                        FinancialMetricCard(&#10;                            title = &quot;Net Savings&quot;,&#10;                            amount = uiState.netSavings,&#10;                            icon = Icons.Default.AccountBalance,&#10;                            color = Color(0xFF2196F3),&#10;                            change = &quot;+25.8%&quot;&#10;                        )&#10;                    }&#10;                    item {&#10;                        FinancialMetricCard(&#10;                            title = &quot;Savings Rate&quot;,&#10;                            amount = uiState.savingsRate,&#10;                            icon = Icons.Default.Percent,&#10;                            color = Color(0xFF9C27B0),&#10;                            change = &quot;+3.2%&quot;,&#10;                            isPercentage = true&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            &#10;            // Spending by Category Chart&#10;            item {&#10;                ExpensePieChart(&#10;                    data = uiState.expensesByCategory,&#10;                    colors = listOf(&#10;                        Color(0xFF6200EE),&#10;                        Color(0xFF03DAC6),&#10;                        Color(0xFFFF6B6B),&#10;                        Color(0xFF4ECDC4),&#10;                        Color(0xFF45B7D1),&#10;                        Color(0xFF96CEB4),&#10;                        Color(0xFFFD79A8),&#10;                        Color(0xFFE84393)&#10;                    )&#10;                )&#10;            }&#10;            &#10;            // Monthly Trend Chart&#10;            item {&#10;                SpendingTrendChart(&#10;                    data = uiState.monthlyTrend&#10;                )&#10;            }&#10;            &#10;            // Budget Progress Section&#10;            item {&#10;                Text(&#10;                    text = &quot;Budget Progress&quot;,&#10;                    fontSize = 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            &#10;            items(uiState.budgetProgress) { budget -&gt;&#10;                BudgetProgressChart(&#10;                    budgetName = budget.name,&#10;                    spent = budget.spent,&#10;                    budget = budget.amount&#10;                )&#10;            }&#10;            &#10;            // Goals Section&#10;            item {&#10;                Text(&#10;                    text = &quot;Financial Goals&quot;,&#10;                    fontSize = 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            &#10;            items(uiState.financialGoals) { goal -&gt;&#10;                GoalProgressCard(&#10;                    goal = goal,&#10;                    onGoalClick = { /* TODO: Navigate to goal details */ }&#10;                )&#10;            }&#10;            &#10;            // Insights &amp; Recommendations&#10;            item {&#10;                InsightsCard(insights = uiState.insights)&#10;            }&#10;            &#10;            item {&#10;                Spacer(modifier = Modifier.height(100.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FinancialMetricCard(&#10;    title: String,&#10;    amount: Double,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    color: Color,&#10;    change: String,&#10;    isPercentage: Boolean = false,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.width(160.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = color.copy(alpha = 0.1f)&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                &#10;                Text(&#10;                    text = change,&#10;                    fontSize = 12.sp,&#10;                    color = if (change.startsWith(&quot;+&quot;)) Color(0xFF4CAF50) else Color(0xFFF44336),&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            Text(&#10;                text = title,&#10;                fontSize = 12.sp,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;            )&#10;            &#10;            Text(&#10;                text = if (isPercentage) &quot;${amount.toInt()}%&quot; else String.format(Locale.US, &quot;$%.2f&quot;, amount),&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GoalProgressCard(&#10;    goal: FinancialGoal,&#10;    onGoalClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        onClick = onGoalClick&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = goal.name,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    &#10;                    Text(&#10;                        text = &quot;${String.format(Locale.US, &quot;$%.0f&quot;, goal.currentAmount)} of ${String.format(Locale.US, &quot;$%.0f&quot;, goal.targetAmount)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = &quot;${(goal.getProgress() * 100).toInt()}%&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            LinearProgressIndicator(&#10;                progress = { goal.getProgress() },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(8.dp),&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;Remaining: ${String.format(Locale.US, &quot;$%.0f&quot;, goal.getRemainingAmount())}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                )&#10;                &#10;                Text(&#10;                    text = if (goal.isOnTrack()) &quot;✅ On track&quot; else &quot;⚠️ Behind&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = if (goal.isOnTrack()) Color(0xFF4CAF50) else Color(0xFFFF9800)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InsightsCard(&#10;    insights: List&lt;String&gt;,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Psychology,&#10;                    contentDescription = &quot;Insights&quot;,&#10;                    tint = MaterialTheme.colorScheme.secondary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                &#10;                Text(&#10;                    text = &quot;Smart Insights&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            insights.forEach { insight -&gt;&#10;                Row(&#10;                    modifier = Modifier.padding(vertical = 4.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;&quot;,&#10;                        fontSize = 16.sp&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    &#10;                    Text(&#10;                        text = insight,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                        lineHeight = 20.sp&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedExpenseScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedExpenseScreen.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.components.ExpenseCard&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;&#10;/**&#10; * Enhanced Expense Management Screen with search and filtering&#10; * Following MVVM pattern and clean architecture&#10; */&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun EnhancedExpenseScreen(&#10;    navController: NavController,&#10;    viewModel: ExpenseViewModel = hiltViewModel()&#10;) {&#10;    val expenses by viewModel.expenses.collectAsState()&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    var showAddExpenseDialog by remember { mutableStateOf(false) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Filter expenses based on search query&#10;    val filteredExpenses = remember(expenses, searchQuery) {&#10;        if (searchQuery.isEmpty()) {&#10;            expenses&#10;        } else {&#10;            expenses.filter { expense -&gt;&#10;                expense.description?.contains(searchQuery, ignoreCase = true) == true ||&#10;                expense.tags.any { it.contains(searchQuery, ignoreCase = true) }&#10;            }&#10;        }&#10;    }&#10;&#10;    LaunchedEffect(uiState.isExpenseAdded) {&#10;        if (uiState.isExpenseAdded) {&#10;            showAddExpenseDialog = false&#10;            viewModel.resetExpenseAddedState()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { &#10;                    Text(&#10;                        &quot;Expenses&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    ) &#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* TODO: Implement filter */ }) {&#10;                        Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showAddExpenseDialog = true }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp)&#10;        ) {&#10;            // Search Bar&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { &#10;                    searchQuery = it&#10;                    viewModel.searchExpenses(it)&#10;                },&#10;                label = { Text(&quot;Search expenses...&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 16.dp)&#10;            )&#10;&#10;            // Expense Summary&#10;            if (filteredExpenses.isNotEmpty()) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        Column {&#10;                            Text(&#10;                                text = &quot;Total Expenses&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                            )&#10;                            Text(&#10;                                text = String.format(&quot;$%.2f&quot;, filteredExpenses.sumOf { it.amount }),&#10;                                fontSize = 24.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                        Column(&#10;                            horizontalAlignment = Alignment.End&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;Count&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                            )&#10;                            Text(&#10;                                text = &quot;${filteredExpenses.size}&quot;,&#10;                                fontSize = 24.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Expenses List&#10;            if (uiState.isLoading) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (filteredExpenses.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = if (searchQuery.isEmpty()) &quot;No expenses yet&quot; else &quot;No matching expenses&quot;,&#10;                            fontSize = 18.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = if (searchQuery.isEmpty()) &quot;Tap + to add your first expense&quot; else &quot;Try adjusting your search&quot;,&#10;                            fontSize = 14.sp,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(filteredExpenses) { expense -&gt;&#10;                        ExpenseCard(&#10;                            expense = expense,&#10;                            onEdit = { /* TODO: Implement edit */ },&#10;                            onDelete = { /* TODO: Implement delete */ }&#10;                        )&#10;                    }&#10;                    &#10;                    item {&#10;                        Spacer(modifier = Modifier.height(80.dp))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Add Expense Dialog&#10;    if (showAddExpenseDialog) {&#10;        AddExpenseDialog(&#10;            onDismiss = { showAddExpenseDialog = false },&#10;            onAdd = { amount, description, tags -&gt;&#10;                viewModel.addExpense(&#10;                    amount = amount,&#10;                    categoryId = 1, // TODO: Category selection&#10;                    description = description,&#10;                    tags = tags&#10;                )&#10;            },&#10;            isLoading = uiState.isLoading,&#10;            error = uiState.error&#10;        )&#10;    }&#10;&#10;    // Error handling&#10;    uiState.error?.let { error -&gt;&#10;        LaunchedEffect(error) {&#10;            // Show snackbar or handle error&#10;            viewModel.clearError()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AddExpenseDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onAdd: (Double, String, List&lt;String&gt;) -&gt; Unit,&#10;    isLoading: Boolean = false,&#10;    error: String? = null&#10;) {&#10;    var amount by remember { mutableStateOf(&quot;&quot;) }&#10;    var description by remember { mutableStateOf(&quot;&quot;) }&#10;    var tags by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { &#10;            Text(&#10;                &quot;Add New Expense&quot;,&#10;                fontWeight = FontWeight.Bold&#10;            ) &#10;        },&#10;        text = {&#10;            Column(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = amount,&#10;                    onValueChange = { amount = it },&#10;                    label = { Text(&quot;Amount&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    prefix = { Text(&quot;$&quot;) }&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = description,&#10;                    onValueChange = { description = it },&#10;                    label = { Text(&quot;Description&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    maxLines = 2&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = tags,&#10;                    onValueChange = { tags = it },&#10;                    label = { Text(&quot;Tags (comma separated)&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    placeholder = { Text(&quot;food, groceries, shopping&quot;) }&#10;                )&#10;                &#10;                if (error != null) {&#10;                    Text(&#10;                        text = error,&#10;                        color = MaterialTheme.colorScheme.error,&#10;                        fontSize = 12.sp&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    val amountValue = amount.toDoubleOrNull()&#10;                    if (amountValue != null &amp;&amp; amountValue &gt; 0 &amp;&amp; description.isNotBlank()) {&#10;                        val tagsList = tags.split(&quot;,&quot;).map { it.trim() }.filter { it.isNotEmpty() }&#10;                        onAdd(amountValue, description, tagsList)&#10;                    }&#10;                },&#10;                enabled = !isLoading &amp;&amp; amount.toDoubleOrNull() != null &amp;&amp; description.isNotBlank()&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                } else {&#10;                    Text(&quot;Add&quot;)&#10;                }&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(&#10;                onClick = onDismiss,&#10;                enabled = !isLoading&#10;            ) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/state/UiState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/state/UiState.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.state&#10;&#10;/**&#10; * UI State for Expense screen following MVVM pattern&#10; * Represents all possible UI states for expense management&#10; */&#10;data class ExpenseUiState(&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val isExpenseAdded: Boolean = false,&#10;    val searchQuery: String = &quot;&quot;,&#10;    val selectedCategoryId: Long? = null,&#10;    val isDialogVisible: Boolean = false,&#10;    val expenseToEdit: `in`.sitharaj.aurabudget.domain.model.ExpenseEntity? = null&#10;)&#10;&#10;/**&#10; * UI State for Dashboard with financial insights&#10; */&#10;data class DashboardUiState(&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val totalExpenses: Double = 0.0,&#10;    val totalIncome: Double = 0.0,&#10;    val monthlyBudget: Double = 0.0,&#10;    val savingsRate: Double = 0.0,&#10;    val topCategories: List&lt;Pair&lt;String, Double&gt;&gt; = emptyList(),&#10;    val recentExpenses: List&lt;`in`.sitharaj.aurabudget.domain.model.ExpenseEntity&gt; = emptyList(),&#10;    val monthlyTrend: List&lt;`in`.sitharaj.aurabudget.domain.model.MonthlyData&gt; = emptyList()&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/AnalyticsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/AnalyticsViewModel.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import java.time.LocalDate&#10;import `in`.sitharaj.aurabudget.domain.model.*&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import `in`.sitharaj.aurabudget.domain.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for comprehensive analytics and financial insights&#10; */&#10;@HiltViewModel&#10;class AnalyticsViewModel @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository,&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(AnalyticsUiState())&#10;    val uiState: StateFlow&lt;AnalyticsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadAnalyticsData()&#10;    }&#10;&#10;    private fun loadAnalyticsData() {&#10;        viewModelScope.launch {&#10;            combine(&#10;                expenseRepository.getAllExpenses(),&#10;                budgetRepository.getAllBudgets(),&#10;                getFinancialGoals(),&#10;                getAccountsData()&#10;            ) { expenses, budgets, goals, accounts -&gt;&#10;                &#10;                val currentMonthExpenses = expenses.filter { expense -&gt;&#10;                    isCurrentMonth(expense.date)&#10;                }&#10;                &#10;                val totalExpenses = currentMonthExpenses.sumOf { it.amount }&#10;                val totalIncome = calculateTotalIncome(accounts)&#10;                val netSavings = totalIncome - totalExpenses&#10;                val savingsRate = if (totalIncome &gt; 0) (netSavings / totalIncome) * 100 else 0.0&#10;                &#10;                // Group expenses by category&#10;                val expensesByCategory = currentMonthExpenses&#10;                    .groupBy { it.categoryId }&#10;                    .map { (categoryId, expenses) -&gt;&#10;                        getCategoryName(categoryId) to expenses.sumOf { it.amount }&#10;                    }&#10;                    .sortedByDescending { it.second }&#10;                &#10;                // Calculate monthly trend (last 6 months)&#10;                val monthlyTrend = calculateMonthlyTrend(expenses)&#10;                &#10;                // Calculate budget progress&#10;                val budgetProgress = budgets.map { budget -&gt;&#10;                    val spent = currentMonthExpenses&#10;                        .filter { it.categoryId == budget.categoryId }&#10;                        .sumOf { it.amount }&#10;                    &#10;                    BudgetProgress(&#10;                        name = getCategoryName(budget.categoryId ?: 0L),&#10;                        spent = spent,&#10;                        amount = budget.amount&#10;                    )&#10;                }&#10;                &#10;                // Generate AI insights&#10;                val insights = generateFinancialInsights(&#10;                    totalExpenses, totalIncome, expensesByCategory, budgetProgress&#10;                )&#10;                &#10;                AnalyticsUiState(&#10;                    totalIncome = totalIncome,&#10;                    totalExpenses = totalExpenses,&#10;                    netSavings = netSavings,&#10;                    savingsRate = savingsRate,&#10;                    expensesByCategory = expensesByCategory,&#10;                    monthlyTrend = monthlyTrend,&#10;                    budgetProgress = budgetProgress,&#10;                    financialGoals = goals,&#10;                    insights = insights,&#10;                    isLoading = false&#10;                )&#10;                &#10;            }.collect { newState -&gt;&#10;                _uiState.value = newState&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun isCurrentMonth(timestamp: Long): Boolean {&#10;        // Implementation to check if timestamp is in current month&#10;        val currentTime = System.currentTimeMillis()&#10;        val thirtyDaysAgo = currentTime - (30 * 24 * 60 * 60 * 1000L)&#10;        return timestamp &gt;= thirtyDaysAgo&#10;    }&#10;&#10;    private fun calculateTotalIncome(accounts: List&lt;Account&gt;): Double {&#10;        // Calculate total income from all sources&#10;        return accounts.sumOf { it.balance.coerceAtLeast(0.0) }&#10;    }&#10;&#10;    private fun getCategoryName(categoryId: Long): String {&#10;        // This should fetch from category repository&#10;        return when (categoryId) {&#10;            1L -&gt; &quot;Food &amp; Dining&quot;&#10;            2L -&gt; &quot;Transportation&quot;&#10;            3L -&gt; &quot;Shopping&quot;&#10;            4L -&gt; &quot;Entertainment&quot;&#10;            5L -&gt; &quot;Bills &amp; Utilities&quot;&#10;            6L -&gt; &quot;Healthcare&quot;&#10;            7L -&gt; &quot;Travel&quot;&#10;            8L -&gt; &quot;Education&quot;&#10;            else -&gt; &quot;Other&quot;&#10;        }&#10;    }&#10;&#10;    private fun calculateMonthlyTrend(expenses: List&lt;ExpenseEntity&gt;): List&lt;Pair&lt;String, Double&gt;&gt; {&#10;        val months = listOf(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;)&#10;        return months.mapIndexed { index, month -&gt;&#10;            // Calculate expenses for each month (simplified)&#10;            val monthlyExpenses = expenses.filter { &#10;                // Filter by month logic here&#10;                true&#10;            }.sumOf { it.amount }&#10;            month to (monthlyExpenses + (index * 200.0)) // Mock data with trend&#10;        }&#10;    }&#10;&#10;    private fun getFinancialGoals(): Flow&lt;List&lt;FinancialGoal&gt;&gt; = flow {&#10;        emit(listOf(&#10;            FinancialGoal(&#10;                id = 1,&#10;                name = &quot;Emergency Fund&quot;,&#10;                targetAmount = 10000.0,&#10;                currentAmount = 6500.0,&#10;                targetDate = LocalDate.parse(&quot;2025-12-31&quot;),&#10;                categoryId = null,&#10;                description = &quot;6 months of expenses&quot;&#10;            ),&#10;            FinancialGoal(&#10;                id = 2,&#10;                name = &quot;Vacation Fund&quot;,&#10;                targetAmount = 3000.0,&#10;                currentAmount = 1200.0,&#10;                targetDate = LocalDate.parse(&quot;2025-07-01&quot;),&#10;                categoryId = 7L,&#10;                description = &quot;Summer vacation to Europe&quot;&#10;            ),&#10;            FinancialGoal(&#10;                id = 3,&#10;                name = &quot;New Car&quot;,&#10;                targetAmount = 25000.0,&#10;                currentAmount = 8500.0,&#10;                targetDate = LocalDate.parse(&quot;2026-03-01&quot;),&#10;                categoryId = 2L,&#10;                description = &quot;Down payment for new car&quot;&#10;            )&#10;        ))&#10;    }&#10;&#10;    private fun getAccountsData(): Flow&lt;List&lt;Account&gt;&gt; = flow {&#10;        emit(listOf(&#10;            Account(1, &quot;Checking Account&quot;, 3500.0, Account.AccountType.CHECKING),&#10;            Account(2, &quot;Savings Account&quot;, 12000.0, Account.AccountType.SAVINGS),&#10;            Account(3, &quot;Credit Card&quot;, -850.0, Account.AccountType.CREDIT_CARD)&#10;        ))&#10;    }&#10;&#10;    private fun generateFinancialInsights(&#10;        totalExpenses: Double,&#10;        totalIncome: Double,&#10;        expensesByCategory: List&lt;Pair&lt;String, Double&gt;&gt;,&#10;        budgetProgress: List&lt;BudgetProgress&gt;&#10;    ): List&lt;String&gt; {&#10;        val insights = mutableListOf&lt;String&gt;()&#10;        &#10;        // Savings rate insight&#10;        val savingsRate = if (totalIncome &gt; 0) (totalIncome - totalExpenses) / totalIncome * 100 else 0.0&#10;        when {&#10;            savingsRate &gt;= 20 -&gt; insights.add(&quot;Excellent! You're saving ${savingsRate.toInt()}% of your income. Keep up the great work!&quot;)&#10;            savingsRate &gt;= 10 -&gt; insights.add(&quot;Good job! You're saving ${savingsRate.toInt()}% of your income. Consider increasing to 20% for better financial health.&quot;)&#10;            else -&gt; insights.add(&quot;Your savings rate is ${savingsRate.toInt()}%. Try to reduce expenses or increase income to save more.&quot;)&#10;        }&#10;        &#10;        // Top spending category insight&#10;        if (expensesByCategory.isNotEmpty()) {&#10;            val topCategory = expensesByCategory.first()&#10;            val percentage = (topCategory.second / totalExpenses * 100).toInt()&#10;            insights.add(&quot;Your largest expense category is ${topCategory.first} at ${percentage}% of total spending.&quot;)&#10;        }&#10;        &#10;        // Budget compliance insight&#10;        val overBudgetCount = budgetProgress.count { it.spent &gt; it.amount }&#10;        if (overBudgetCount &gt; 0) {&#10;            insights.add(&quot;You're over budget in $overBudgetCount categories. Consider reviewing your spending habits.&quot;)&#10;        } else {&#10;            insights.add(&quot;Great! You're staying within budget across all categories this month.&quot;)&#10;        }&#10;        &#10;        // Spending trend insight&#10;        insights.add(&quot;Based on your spending patterns, consider setting up automatic savings to reach your financial goals faster.&quot;)&#10;        &#10;        return insights&#10;    }&#10;&#10;    fun refreshData() {&#10;        _uiState.value = _uiState.value.copy(isLoading = true)&#10;        loadAnalyticsData()&#10;    }&#10;&#10;    fun exportData() {&#10;        viewModelScope.launch {&#10;            // TODO: Implement data export functionality&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * UI State for Analytics Screen&#10; */&#10;data class AnalyticsUiState(&#10;    val totalIncome: Double = 0.0,&#10;    val totalExpenses: Double = 0.0,&#10;    val netSavings: Double = 0.0,&#10;    val savingsRate: Double = 0.0,&#10;    val expensesByCategory: List&lt;Pair&lt;String, Double&gt;&gt; = emptyList(),&#10;    val monthlyTrend: List&lt;Pair&lt;String, Double&gt;&gt; = emptyList(),&#10;    val budgetProgress: List&lt;BudgetProgress&gt; = emptyList(),&#10;    val financialGoals: List&lt;FinancialGoal&gt; = emptyList(),&#10;    val insights: List&lt;String&gt; = emptyList(),&#10;    val isLoading: Boolean = true,&#10;    val error: String? = null&#10;)&#10;&#10;/**&#10; * Budget progress data class&#10; */&#10;data class BudgetProgress(&#10;    val name: String,&#10;    val spent: Double,&#10;    val amount: Double&#10;)&#10;&#10;/**&#10; * Account data class&#10; */&#10;data class Account(&#10;    val id: Long,&#10;    val name: String,&#10;    val balance: Double,&#10;    val type: AccountType&#10;) {&#10;    enum class AccountType {&#10;        CHECKING, SAVINGS, CREDIT_CARD, INVESTMENT&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import java.time.LocalDate&#10;import `in`.sitharaj.aurabudget.domain.model.*&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import `in`.sitharaj.aurabudget.domain.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for comprehensive analytics and financial insights&#10; */&#10;@HiltViewModel&#10;class AnalyticsViewModel @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository,&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(AnalyticsUiState())&#10;    val uiState: StateFlow&lt;AnalyticsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadAnalyticsData()&#10;    }&#10;&#10;    private fun loadAnalyticsData() {&#10;        viewModelScope.launch {&#10;            combine(&#10;                expenseRepository.getAllExpenses(),&#10;                budgetRepository.getAllBudgets(),&#10;                getFinancialGoals(),&#10;                getAccountsData()&#10;            ) { expenses, budgets, goals, accounts -&gt;&#10;                &#10;                val currentMonthExpenses = expenses.filter { expense -&gt;&#10;                    isCurrentMonth(expense.date)&#10;                }&#10;                &#10;                val totalExpenses = currentMonthExpenses.sumOf { it.amount }&#10;                val totalIncome = calculateTotalIncome(accounts)&#10;                val netSavings = totalIncome - totalExpenses&#10;                val savingsRate = if (totalIncome &gt; 0) (netSavings / totalIncome) * 100 else 0.0&#10;                &#10;                // Group expenses by category&#10;                val expensesByCategory = currentMonthExpenses&#10;                    .groupBy { it.categoryId }&#10;                    .map { (categoryId, expenses) -&gt;&#10;                        getCategoryName(categoryId) to expenses.sumOf { it.amount }&#10;                    }&#10;                    .sortedByDescending { it.second }&#10;                &#10;                // Calculate monthly trend (last 6 months)&#10;                val monthlyTrend = calculateMonthlyTrend(expenses)&#10;                &#10;                // Calculate budget progress&#10;                val budgetProgress = budgets.map { budget -&gt;&#10;                    val spent = currentMonthExpenses&#10;                        .filter { it.categoryId == budget.categoryId }&#10;                        .sumOf { it.amount }&#10;                    &#10;                    BudgetProgress(&#10;                        name = getCategoryName(budget.categoryId ?: 0L),&#10;                        spent = spent,&#10;                        amount = budget.amount&#10;                    )&#10;                }&#10;                &#10;                // Generate AI insights&#10;                val insights = generateFinancialInsights(&#10;                    totalExpenses, totalIncome, expensesByCategory, budgetProgress&#10;                )&#10;                &#10;                AnalyticsUiState(&#10;                    totalIncome = totalIncome,&#10;                    totalExpenses = totalExpenses,&#10;                    netSavings = netSavings,&#10;                    savingsRate = savingsRate,&#10;                    expensesByCategory = expensesByCategory,&#10;                    monthlyTrend = monthlyTrend,&#10;                    budgetProgress = budgetProgress,&#10;                    financialGoals = goals,&#10;                    insights = insights,&#10;                    isLoading = false&#10;                )&#10;                &#10;            }.collect { newState -&gt;&#10;                _uiState.value = newState&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun isCurrentMonth(timestamp: Long): Boolean {&#10;        // Implementation to check if timestamp is in current month&#10;        val currentTime = System.currentTimeMillis()&#10;        val thirtyDaysAgo = currentTime - (30 * 24 * 60 * 60 * 1000L)&#10;        return timestamp &gt;= thirtyDaysAgo&#10;    }&#10;&#10;    private fun calculateTotalIncome(accounts: List&lt;Account&gt;): Double {&#10;        // Calculate total income from all sources&#10;        return accounts.sumOf { it.balance.coerceAtLeast(0.0) }&#10;    }&#10;&#10;    private fun getCategoryName(categoryId: Long): String {&#10;        // This should fetch from category repository&#10;        return when (categoryId) {&#10;            1L -&gt; &quot;Food &amp; Dining&quot;&#10;            2L -&gt; &quot;Transportation&quot;&#10;            3L -&gt; &quot;Shopping&quot;&#10;            4L -&gt; &quot;Entertainment&quot;&#10;            5L -&gt; &quot;Bills &amp; Utilities&quot;&#10;            6L -&gt; &quot;Healthcare&quot;&#10;            7L -&gt; &quot;Travel&quot;&#10;            8L -&gt; &quot;Education&quot;&#10;            else -&gt; &quot;Other&quot;&#10;        }&#10;    }&#10;&#10;    private fun calculateMonthlyTrend(expenses: List&lt;ExpenseEntity&gt;): List&lt;Pair&lt;String, Double&gt;&gt; {&#10;        val months = listOf(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;)&#10;        return months.mapIndexed { index, month -&gt;&#10;            // Calculate expenses for each month (simplified)&#10;            val monthlyExpenses = expenses.filter { &#10;                // Filter by month logic here&#10;                true&#10;            }.sumOf { it.amount }&#10;            month to (monthlyExpenses + (index * 200.0)) // Mock data with trend&#10;        }&#10;    }&#10;&#10;    private fun getFinancialGoals(): Flow&lt;List&lt;FinancialGoal&gt;&gt; = flow {&#10;        emit(listOf(&#10;            FinancialGoal(&#10;                id = 1,&#10;                name = &quot;Emergency Fund&quot;,&#10;                targetAmount = 10000.0,&#10;                currentAmount = 6500.0,&#10;                targetDate = LocalDate.parse(&quot;2025-12-31&quot;),&#10;                categoryId = null,&#10;                description = &quot;6 months of expenses&quot;&#10;            ),&#10;            FinancialGoal(&#10;                id = 2,&#10;                name = &quot;Vacation Fund&quot;,&#10;                targetAmount = 3000.0,&#10;                currentAmount = 1200.0,&#10;                targetDate = LocalDate.parse(&quot;2025-07-01&quot;),&#10;                categoryId = 7L,&#10;                description = &quot;Summer vacation to Europe&quot;&#10;            ),&#10;            FinancialGoal(&#10;                id = 3,&#10;                name = &quot;New Car&quot;,&#10;                targetAmount = 25000.0,&#10;                currentAmount = 8500.0,&#10;                targetDate = LocalDate.parse(&quot;2026-03-01&quot;),&#10;                categoryId = 2L,&#10;                description = &quot;Down payment for new car&quot;&#10;            )&#10;        ))&#10;    }&#10;&#10;    private fun getAccountsData(): Flow&lt;List&lt;Account&gt;&gt; = flow {&#10;        emit(listOf(&#10;            Account(1, &quot;Checking Account&quot;, Account.AccountType.BANK, 3500.0),&#10;            Account(2, &quot;Savings Account&quot;, Account.AccountType.SAVINGS, 12000.0),&#10;            Account(3, &quot;Credit Card&quot;, Account.AccountType.CREDIT_CARD, -850.0)&#10;        ))&#10;    }&#10;&#10;    private fun generateFinancialInsights(&#10;        totalExpenses: Double,&#10;        totalIncome: Double,&#10;        expensesByCategory: List&lt;Pair&lt;String, Double&gt;&gt;,&#10;        budgetProgress: List&lt;BudgetProgress&gt;&#10;    ): List&lt;String&gt; {&#10;        val insights = mutableListOf&lt;String&gt;()&#10;        &#10;        // Savings rate insight&#10;        val savingsRate = if (totalIncome &gt; 0) (totalIncome - totalExpenses) / totalIncome * 100 else 0.0&#10;        when {&#10;            savingsRate &gt;= 20 -&gt; insights.add(&quot;Excellent! You're saving ${savingsRate.toInt()}% of your income. Keep up the great work!&quot;)&#10;            savingsRate &gt;= 10 -&gt; insights.add(&quot;Good job! You're saving ${savingsRate.toInt()}% of your income. Consider increasing to 20% for better financial health.&quot;)&#10;            else -&gt; insights.add(&quot;Your savings rate is ${savingsRate.toInt()}%. Try to reduce expenses or increase income to save more.&quot;)&#10;        }&#10;        &#10;        // Top spending category insight&#10;        if (expensesByCategory.isNotEmpty()) {&#10;            val topCategory = expensesByCategory.first()&#10;            val percentage = (topCategory.second / totalExpenses * 100).toInt()&#10;            insights.add(&quot;Your largest expense category is ${topCategory.first} at ${percentage}% of total spending.&quot;)&#10;        }&#10;        &#10;        // Budget compliance insight&#10;        val overBudgetCount = budgetProgress.count { it.spent &gt; it.amount }&#10;        if (overBudgetCount &gt; 0) {&#10;            insights.add(&quot;You're over budget in $overBudgetCount categories. Consider reviewing your spending habits.&quot;)&#10;        } else {&#10;            insights.add(&quot;Great! You're staying within budget across all categories this month.&quot;)&#10;        }&#10;        &#10;        // Spending trend insight&#10;        insights.add(&quot;Based on your spending patterns, consider setting up automatic savings to reach your financial goals faster.&quot;)&#10;        &#10;        return insights&#10;    }&#10;&#10;    fun refreshData() {&#10;        _uiState.value = _uiState.value.copy(isLoading = true)&#10;        loadAnalyticsData()&#10;    }&#10;&#10;    fun exportData() {&#10;        viewModelScope.launch {&#10;            // TODO: Implement data export functionality&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * UI State for Analytics Screen&#10; */&#10;data class AnalyticsUiState(&#10;    val totalIncome: Double = 0.0,&#10;    val totalExpenses: Double = 0.0,&#10;    val netSavings: Double = 0.0,&#10;    val savingsRate: Double = 0.0,&#10;    val expensesByCategory: List&lt;Pair&lt;String, Double&gt;&gt; = emptyList(),&#10;    val monthlyTrend: List&lt;Pair&lt;String, Double&gt;&gt; = emptyList(),&#10;    val budgetProgress: List&lt;BudgetProgress&gt; = emptyList(),&#10;    val financialGoals: List&lt;FinancialGoal&gt; = emptyList(),&#10;    val insights: List&lt;String&gt; = emptyList(),&#10;    val isLoading: Boolean = true,&#10;    val error: String? = null&#10;)&#10;&#10;/**&#10; * Budget progress data class&#10; */&#10;data class BudgetProgress(&#10;    val name: String,&#10;    val spent: Double,&#10;    val amount: Double&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/BudgetViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/BudgetViewModel.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import `in`.sitharaj.aurabudget.domain.model.BudgetEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.BudgetRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for budget management&#10; * Following MVVM pattern and clean architecture&#10; */&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    val budgets = budgetRepository.getAllBudgets()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addBudget(budget: BudgetEntity) {&#10;        viewModelScope.launch {&#10;            budgetRepository.insertBudget(budget)&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: BudgetEntity) {&#10;        viewModelScope.launch {&#10;            budgetRepository.deleteBudget(budget)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/DashboardViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/DashboardViewModel.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import `in`.sitharaj.aurabudget.domain.usecase.analytics.GetFinancialAnalyticsUseCase&#10;import `in`.sitharaj.aurabudget.domain.usecase.expense.GetExpensesUseCase&#10;import `in`.sitharaj.aurabudget.presentation.state.DashboardUiState&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Enhanced DashboardViewModel with financial analytics and insights&#10; * Following MVVM pattern and SOLID principles&#10; */&#10;@HiltViewModel&#10;class DashboardViewModel @Inject constructor(&#10;    private val getFinancialAnalyticsUseCase: GetFinancialAnalyticsUseCase,&#10;    private val getExpensesUseCase: GetExpensesUseCase&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(DashboardUiState())&#10;    val uiState: StateFlow&lt;DashboardUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadDashboardData()&#10;    }&#10;&#10;    private fun loadDashboardData() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true)&#10;&#10;            combine(&#10;                getFinancialAnalyticsUseCase.getFinancialSummary(),&#10;                getExpensesUseCase().map { it.take(5) }&#10;            ) { financialSummary, recentExpenses -&gt;&#10;                DashboardUiState(&#10;                    isLoading = false,&#10;                    totalExpenses = financialSummary.totalExpenses,&#10;                    totalIncome = financialSummary.totalIncome,&#10;                    savingsRate = financialSummary.getSavingsRate(),&#10;                    topCategories = financialSummary.topCategories.map { (category, amount) -&gt;&#10;                        category.name to amount&#10;                    },&#10;                    recentExpenses = recentExpenses,&#10;                    monthlyTrend = financialSummary.monthlyTrend&#10;                )&#10;            }.catch { error -&gt;&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = error.message&#10;                )&#10;            }.collect { newState -&gt;&#10;                _uiState.value = newState&#10;            }&#10;        }&#10;    }&#10;&#10;    fun refreshData() {&#10;        loadDashboardData()&#10;    }&#10;&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/ExpenseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/ExpenseViewModel.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.usecase.expense.AddExpenseUseCase&#10;import `in`.sitharaj.aurabudget.domain.usecase.expense.DeleteExpenseUseCase&#10;import `in`.sitharaj.aurabudget.domain.usecase.expense.GetExpensesUseCase&#10;import `in`.sitharaj.aurabudget.presentation.state.ExpenseUiState&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Enhanced ExpenseViewModel following MVVM pattern and SOLID principles&#10; * Handles UI state management and business logic coordination&#10; */&#10;@HiltViewModel&#10;class ExpenseViewModel @Inject constructor(&#10;    private val getExpensesUseCase: GetExpensesUseCase,&#10;    private val addExpenseUseCase: AddExpenseUseCase,&#10;    private val deleteExpenseUseCase: DeleteExpenseUseCase&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(ExpenseUiState())&#10;    val uiState: StateFlow&lt;ExpenseUiState&gt; = _uiState.asStateFlow()&#10;&#10;    val expenses = getExpensesUseCase()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addExpense(&#10;        amount: Double,&#10;        categoryId: Long,&#10;        description: String,&#10;        tags: List&lt;String&gt; = emptyList()&#10;    ) {&#10;        viewModelScope.launch {&#10;            val expense = ExpenseEntity(&#10;                amount = amount,&#10;                categoryId = categoryId,&#10;                date = System.currentTimeMillis(),&#10;                description = description,&#10;                tags = tags&#10;            )&#10;&#10;            addExpenseUseCase(expense)&#10;                .onSuccess {&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        isExpenseAdded = true&#10;                    )&#10;                }&#10;                .onFailure { error -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        error = error.message&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun deleteExpense(expense: ExpenseEntity) {&#10;        viewModelScope.launch {&#10;            // TODO: Create DeleteExpenseUseCase&#10;        }&#10;    }&#10;&#10;    fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return getExpensesUseCase.getByCategory(categoryId)&#10;    }&#10;&#10;    fun searchExpenses(query: String) {&#10;        _uiState.value = _uiState.value.copy(searchQuery = query)&#10;    }&#10;&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;&#10;    fun resetExpenseAddedState() {&#10;        _uiState.value = _uiState.value.copy(isExpenseAdded = false)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.usecase.expense.AddExpenseUseCase&#10;import `in`.sitharaj.aurabudget.domain.usecase.expense.DeleteExpenseUseCase&#10;import `in`.sitharaj.aurabudget.domain.usecase.expense.GetExpensesUseCase&#10;import `in`.sitharaj.aurabudget.presentation.state.ExpenseUiState&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Enhanced ExpenseViewModel following MVVM pattern and SOLID principles&#10; * Handles UI state management and business logic coordination&#10; */&#10;@HiltViewModel&#10;class ExpenseViewModel @Inject constructor(&#10;    private val getExpensesUseCase: GetExpensesUseCase,&#10;    private val addExpenseUseCase: AddExpenseUseCase,&#10;    private val deleteExpenseUseCase: DeleteExpenseUseCase&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(ExpenseUiState())&#10;    val uiState: StateFlow&lt;ExpenseUiState&gt; = _uiState.asStateFlow()&#10;&#10;    val expenses = getExpensesUseCase()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addExpense(&#10;        amount: Double,&#10;        categoryId: Long,&#10;        description: String,&#10;        tags: List&lt;String&gt; = emptyList()&#10;    ) {&#10;        viewModelScope.launch {&#10;            val expense = ExpenseEntity(&#10;                amount = amount,&#10;                categoryId = categoryId,&#10;                date = System.currentTimeMillis(),&#10;                description = description,&#10;                tags = tags&#10;            )&#10;&#10;            addExpenseUseCase(expense)&#10;                .onSuccess {&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        isExpenseAdded = true&#10;                    )&#10;                }&#10;                .onFailure { error -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        error = error.message&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun deleteExpense(expense: ExpenseEntity) {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;            &#10;            deleteExpenseUseCase(expense)&#10;                .onSuccess {&#10;                    _uiState.value = _uiState.value.copy(isLoading = false)&#10;                }&#10;                .onFailure { error -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        error = error.message&#10;                    )&#10;                }&#10;        }&#10;    }&#10;&#10;    fun getExpensesByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return getExpensesUseCase.getByCategory(categoryId)&#10;    }&#10;&#10;    fun searchExpenses(query: String) {&#10;        _uiState.value = _uiState.value.copy(searchQuery = query)&#10;    }&#10;&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;&#10;    fun resetExpenseAddedState() {&#10;        _uiState.value = _uiState.value.copy(isExpenseAdded = false)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/ThemeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/viewmodel/ThemeViewModel.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import `in`.sitharaj.aurabudget.domain.repository.PreferencesRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;/**&#10; * ViewModel for theme management&#10; * Following MVVM pattern and clean architecture&#10; */&#10;@HiltViewModel&#10;class ThemeViewModel @Inject constructor(&#10;    private val preferencesRepository: PreferencesRepository&#10;) : ViewModel() {&#10;&#10;    val isDarkTheme = preferencesRepository.isDarkTheme&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = false&#10;        )&#10;&#10;    fun toggleTheme() {&#10;        viewModelScope.launch {&#10;            preferencesRepository.setDarkTheme(!isDarkTheme.value)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/BudgetRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/BudgetRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Budget&#10;import in.sitharaj.aurabudget.data.BudgetDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class BudgetRepository @Inject constructor(&#10;    private val budgetDao: BudgetDao&#10;) {&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt; = budgetDao.getAllBudgets()&#10;&#10;    suspend fun insertBudget(budget: Budget) = budgetDao.insertBudget(budget)&#10;&#10;    suspend fun deleteBudget(budget: Budget) = budgetDao.deleteBudget(budget)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/CategoryRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/CategoryRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Category&#10;import in.sitharaj.aurabudget.data.CategoryDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class CategoryRepository @Inject constructor(&#10;    private val categoryDao: CategoryDao&#10;) {&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt; = categoryDao.getAllCategories()&#10;&#10;    suspend fun insertCategory(category: Category) = categoryDao.insertCategory(category)&#10;&#10;    suspend fun deleteCategory(category: Category) = categoryDao.deleteCategory(category)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/ExpenseRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/ExpenseRepository.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Expense&#10;import in.sitharaj.aurabudget.data.ExpenseDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class ExpenseRepository @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) {&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt; = expenseDao.getAllExpenses()&#10;&#10;    suspend fun insertExpense(expense: Expense) = expenseDao.insertExpense(expense)&#10;&#10;    suspend fun deleteExpense(expense: Expense) = expenseDao.deleteExpense(expense)&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.Expense&#10;import `in`.sitharaj.aurabudget.data.ExpenseDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class ExpenseRepository @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) {&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt; = expenseDao.getAllExpenses()&#10;&#10;    suspend fun insertExpense(expense: Expense) = expenseDao.insertExpense(expense)&#10;&#10;    suspend fun deleteExpense(expense: Expense) = expenseDao.deleteExpense(expense)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/PreferencesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/PreferencesRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.UserPreferencesManager&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class PreferencesRepository @Inject constructor(&#10;    private val userPreferencesManager: UserPreferencesManager&#10;) {&#10;    val isDarkTheme: Flow&lt;Boolean&gt; = userPreferencesManager.isDarkTheme&#10;&#10;    suspend fun setDarkTheme(enabled: Boolean) = userPreferencesManager.setDarkTheme(enabled)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/DashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/DashboardScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.BudgetViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DashboardScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel(),&#10;    budgetViewModel: BudgetViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;    val budgets by budgetViewModel.budgets.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Dashboard&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* TODO: Open drawer */ }) {&#10;                        Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { navController.navigate(&quot;settings&quot;) }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { navController.navigate(&quot;expenses&quot;) }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            item {&#10;                // Total Balance Card&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Total Expenses&quot;,&#10;                            fontSize = 16.sp,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${expenses.sumOf { it.amount }}&quot;,&#10;                            fontSize = 32.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            item {&#10;                Text(&#10;                    text = &quot;Recent Expenses&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;&#10;            if (expenses.isEmpty()) {&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No expenses yet. Tap + to add your first expense!&quot;,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                items(expenses.take(5)) { expense -&gt;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Column {&#10;                                Text(&#10;                                    text = expense.note ?: &quot;No description&quot;,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Category ID: ${expense.categoryId}&quot;,&#10;                                    fontSize = 12.sp,&#10;                                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                                )&#10;                            }&#10;                            Text(&#10;                                text = &quot;$${expense.amount}&quot;,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.error&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.BudgetViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DashboardScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel(),&#10;    budgetViewModel: BudgetViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;    val budgets by budgetViewModel.budgets.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Dashboard&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* TODO: Open drawer */ }) {&#10;                        Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { navController.navigate(&quot;settings&quot;) }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { navController.navigate(&quot;expenses&quot;) }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            item {&#10;                // Total Balance Card&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Total Expenses&quot;,&#10;                            fontSize = 16.sp,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${expenses.sumOf { it.amount }}&quot;,&#10;                            fontSize = 32.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            item {&#10;                Text(&#10;                    text = &quot;Recent Expenses&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;&#10;            if (expenses.isEmpty()) {&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No expenses yet. Tap + to add your first expense!&quot;,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                items(expenses.take(5)) { expense -&gt;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Column {&#10;                                Text(&#10;                                    text = expense.description ?: &quot;No description&quot;,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Category ID: ${expense.categoryId}&quot;,&#10;                                    fontSize = 12.sp,&#10;                                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                                )&#10;                            }&#10;                            Text(&#10;                                text = expense.getFormattedAmount(),&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.error&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/ExpensesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/ExpensesScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.data.Expense&#10;import `in`.sitharaj.aurabudget.ui.viewmodel.ExpenseViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ExpensesScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;    var showAddExpenseDialog by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Expenses&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showAddExpenseDialog = true }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            if (expenses.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No expenses yet&quot;,&#10;                            fontSize = 18.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Tap the + button to add your first expense&quot;,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(expenses) { expense -&gt;&#10;                        ExpenseItem(&#10;                            expense = expense,&#10;                            onDelete = { expenseViewModel.deleteExpense(expense) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAddExpenseDialog) {&#10;        AddExpenseDialog(&#10;            onDismiss = { showAddExpenseDialog = false },&#10;            onAdd = { amount, note -&gt;&#10;                expenseViewModel.addExpense(&#10;                    Expense(&#10;                        amount = amount,&#10;                        categoryId = 1, // Default category for now&#10;                        date = System.currentTimeMillis(),&#10;                        note = note&#10;                    )&#10;                )&#10;                showAddExpenseDialog = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ExpenseItem(&#10;    expense: Expense,&#10;    onDelete: () -&gt; Unit&#10;) {&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = expense.note ?: &quot;No description&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    fontSize = 16.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = dateFormat.format(Date(expense.date)),&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;$${expense.amount}&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 16.sp,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                IconButton(onClick = onDelete) {&#10;                    Icon(&#10;                        Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete&quot;,&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AddExpenseDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onAdd: (Double, String) -&gt; Unit&#10;) {&#10;    var amount by remember { mutableStateOf(&quot;&quot;) }&#10;    var note by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Add Expense&quot;) },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = amount,&#10;                    onValueChange = { amount = it },&#10;                    label = { Text(&quot;Amount&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = note,&#10;                    onValueChange = { note = it },&#10;                    label = { Text(&quot;Description&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    val amountValue = amount.toDoubleOrNull()&#10;                    if (amountValue != null &amp;&amp; amountValue &gt; 0) {&#10;                        onAdd(amountValue, note.ifBlank { null } ?: &quot;Expense&quot;)&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;Add&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ExpensesScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;    val uiState by expenseViewModel.uiState.collectAsState()&#10;    var showAddExpenseDialog by remember { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(uiState.isExpenseAdded) {&#10;        if (uiState.isExpenseAdded) {&#10;            showAddExpenseDialog = false&#10;            expenseViewModel.resetExpenseAddedState()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Expenses&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showAddExpenseDialog = true }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            if (expenses.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No expenses yet&quot;,&#10;                            fontSize = 18.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Tap the + button to add your first expense&quot;,&#10;                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(expenses) { expense -&gt;&#10;                        ExpenseItem(&#10;                            expense = expense,&#10;                            onDelete = { expenseViewModel.deleteExpense(expense) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAddExpenseDialog) {&#10;        AddExpenseDialog(&#10;            onDismiss = { showAddExpenseDialog = false },&#10;            onAdd = { amount, note -&gt;&#10;                expenseViewModel.addExpense(&#10;                    amount = amount,&#10;                    categoryId = 1, // Default category for now&#10;                    description = note,&#10;                    tags = emptyList()&#10;                )&#10;                showAddExpenseDialog = false&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ExpenseItem(&#10;    expense: ExpenseEntity,&#10;    onDelete: () -&gt; Unit&#10;) {&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = expense.description ?: &quot;No description&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    fontSize = 16.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = dateFormat.format(Date(expense.date)),&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = expense.getFormattedAmount(),&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 16.sp,&#10;                    color = MaterialTheme.colorScheme.error&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                IconButton(onClick = onDelete) {&#10;                    Icon(&#10;                        Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete&quot;,&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AddExpenseDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onAdd: (Double, String) -&gt; Unit&#10;) {&#10;    var amount by remember { mutableStateOf(&quot;&quot;) }&#10;    var note by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Add Expense&quot;) },&#10;        text = {&#10;            Column {&#10;                OutlinedTextField(&#10;                    value = amount,&#10;                    onValueChange = { amount = it },&#10;                    label = { Text(&quot;Amount&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                OutlinedTextField(&#10;                    value = note,&#10;                    onValueChange = { note = it },&#10;                    label = { Text(&quot;Description&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    val amountValue = amount.toDoubleOrNull()&#10;                    if (amountValue != null &amp;&amp; amountValue &gt; 0) {&#10;                        onAdd(amountValue, note.ifBlank { null } ?: &quot;Expense&quot;)&#10;                    }&#10;                }&#10;            ) {&#10;                Text(&quot;Add&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/screens/SettingsScreen.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import androidx.palette.graphics.Palette&#10;import `in`.sitharaj.aurabudget.ui.viewmodel.ThemeViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    navController: NavController,&#10;    themeViewModel: ThemeViewModel = hiltViewModel()&#10;) {&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Settings&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Appearance&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Theme&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        Column {&#10;                            Text(&#10;                                text = &quot;Dark Theme&quot;,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = if (isDarkTheme) &quot;Enabled&quot; else &quot;Disabled&quot;,&#10;                                fontSize = 12.sp,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                            )&#10;                        }&#10;                    }&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = { themeViewModel.toggleTheme() }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;About&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;AuraBudget&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;Version 1.0&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Advanced finance and money management app designed to empower users to effortlessly track expenses, set budgets, and reach their financial goals with confidence.&quot;,&#10;                        fontSize = 14.sp,&#10;                        lineHeight = 20.sp&#10;                    )&#10;                }&#10;            }&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Features&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    val features = listOf(&#10;                        &quot;• Modern MVVM Clean Architecture&quot;,&#10;                        &quot;• Elegant, Responsive UI&quot;,&#10;                        &quot;• Instant Theme Switching&quot;,&#10;                        &quot;• Real-Time Insights&quot;,&#10;                        &quot;• Secure Data Handling&quot;,&#10;                        &quot;• Smart Expense Tracking&quot;&#10;                    )&#10;&#10;                    features.forEach { feature -&gt;&#10;                        Text(&#10;                            text = feature,&#10;                            fontSize = 14.sp,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import androidx.palette.graphics.Palette&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ThemeViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    navController: NavController,&#10;    themeViewModel: ThemeViewModel = hiltViewModel()&#10;) {&#10;    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Settings&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Appearance&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Settings,&#10;                            contentDescription = &quot;Theme&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.width(16.dp))&#10;                        Column {&#10;                            Text(&#10;                                text = &quot;Dark Theme&quot;,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = if (isDarkTheme) &quot;Enabled&quot; else &quot;Disabled&quot;,&#10;                                fontSize = 12.sp,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                            )&#10;                        }&#10;                    }&#10;                    Switch(&#10;                        checked = isDarkTheme,&#10;                        onCheckedChange = { themeViewModel.toggleTheme() }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;About&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;AuraBudget&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;Version 1.0&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Advanced finance and money management app designed to empower users to effortlessly track expenses, set budgets, and reach their financial goals with confidence.&quot;,&#10;                        fontSize = 14.sp,&#10;                        lineHeight = 20.sp&#10;                    )&#10;                }&#10;            }&#10;&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Features&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    val features = listOf(&#10;                        &quot;• Modern MVVM Clean Architecture&quot;,&#10;                        &quot;• Elegant, Responsive UI&quot;,&#10;                        &quot;• Instant Theme Switching&quot;,&#10;                        &quot;• Real-Time Insights&quot;,&#10;                        &quot;• Secure Data Handling&quot;,&#10;                        &quot;• Smart Expense Tracking&quot;&#10;                    )&#10;&#10;                    features.forEach { feature -&gt;&#10;                        Text(&#10;                            text = feature,&#10;                            fontSize = 14.sp,&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/BudgetViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/BudgetViewModel.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    val budgets = budgetRepository.getAllBudgets()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.insertBudget(budget)&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.deleteBudget(budget)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.data.Budget&#10;import `in`.sitharaj.aurabudget.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    val budgets = budgetRepository.getAllBudgets()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.insertBudget(budget)&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.deleteBudget(budget)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/CategoryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/CategoryViewModel.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import `in`.sitharaj.aurabudget.data.Category&#10;import `in`.sitharaj.aurabudget.repository.CategoryRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CategoryViewModel @Inject constructor(&#10;    private val categoryRepository: CategoryRepository&#10;) : ViewModel() {&#10;&#10;    val categories = categoryRepository.getAllCategories()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            categoryRepository.insertCategory(category)&#10;        }&#10;    }&#10;&#10;    fun deleteCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            categoryRepository.deleteCategory(category)&#10;        }&#10;    }&#10;&#10;    init {&#10;        // Initialize with default categories if none exist&#10;        viewModelScope.launch {&#10;            addCategory(Category(name = &quot;Food &amp; Dining&quot;))&#10;            addCategory(Category(name = &quot;Transportation&quot;))&#10;            addCategory(Category(name = &quot;Shopping&quot;))&#10;            addCategory(Category(name = &quot;Entertainment&quot;))&#10;            addCategory(Category(name = &quot;Bills &amp; Utilities&quot;))&#10;            addCategory(Category(name = &quot;Healthcare&quot;))&#10;            addCategory(Category(name = &quot;Travel&quot;))&#10;            addCategory(Category(name = &quot;Other&quot;))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ExpenseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ExpenseViewModel.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import in.sitharaj.aurabudget.data.Expense&#10;import in.sitharaj.aurabudget.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ExpenseViewModel @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) : ViewModel() {&#10;&#10;    val expenses = expenseRepository.getAllExpenses()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            expenseRepository.insertExpense(expense)&#10;        }&#10;    }&#10;&#10;    fun deleteExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            expenseRepository.deleteExpense(expense)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ThemeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ThemeViewModel.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import in.sitharaj.aurabudget.repository.PreferencesRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ThemeViewModel @Inject constructor(&#10;    private val preferencesRepository: PreferencesRepository&#10;) : ViewModel() {&#10;&#10;    val isDarkTheme = preferencesRepository.isDarkTheme&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = false&#10;        )&#10;&#10;    fun toggleTheme() {&#10;        viewModelScope.launch {&#10;            preferencesRepository.setDarkTheme(!isDarkTheme.value)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>