<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AuraBudgetApp&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AuraBudget&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/AddExpenseUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/AddExpenseUseCase.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.usecase.expense&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use case for adding new expenses&#10; * Following Single Responsibility Principle&#10; */&#10;class AddExpenseUseCase @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) {&#10;    suspend operator fun invoke(expense: ExpenseEntity): Result&lt;Long&gt; {&#10;        return try {&#10;            if (!expense.isValid()) {&#10;                Result.failure(IllegalArgumentException(&quot;Invalid expense data&quot;))&#10;            } else {&#10;                val id = expenseRepository.insertExpense(expense)&#10;                Result.success(id)&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/GetExpensesUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/domain/usecase/expense/GetExpensesUseCase.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.domain.usecase.expense&#10;&#10;import `in`.sitharaj.aurabudget.domain.model.ExpenseEntity&#10;import `in`.sitharaj.aurabudget.domain.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;&#10;/**&#10; * Use case for getting expenses with filtering and sorting&#10; * Following Single Responsibility Principle&#10; */&#10;class GetExpensesUseCase @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) {&#10;    operator fun invoke(): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseRepository.getAllExpenses()&#10;    }&#10;    &#10;    fun getByCategory(categoryId: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseRepository.getExpensesByCategory(categoryId)&#10;    }&#10;    &#10;    fun getByDateRange(startDate: Long, endDate: Long): Flow&lt;List&lt;ExpenseEntity&gt;&gt; {&#10;        return expenseRepository.getExpensesByDateRange(startDate, endDate)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/DashboardComponents.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/components/DashboardComponents.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.components&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.TrendingDown&#10;import androidx.compose.material.icons.automirrored.filled.TrendingUp&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BalanceCard(&#10;    balance: Double,&#10;    income: Double,&#10;    expenses: Double,&#10;    modifier: Modifier = Modifier,&#10;    onCardClick: () -&gt; Unit = {}&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onCardClick() },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primary&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(&#10;                    Brush.horizontalGradient(&#10;                        colors = listOf(&#10;                            MaterialTheme.colorScheme.primary,&#10;                            MaterialTheme.colorScheme.primary.copy(alpha = 0.8f)&#10;                        )&#10;                    )&#10;                )&#10;                .padding(24.dp)&#10;        ) {&#10;            Column {&#10;                Text(&#10;                    text = &quot;Current Balance&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f),&#10;                    fontSize = 14.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;â‚¹${String.format(&quot;%.2f&quot;, balance)}&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                    fontSize = 32.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(20.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    IncomeExpenseItem(&#10;                        title = &quot;Income&quot;,&#10;                        amount = income,&#10;                        icon = Icons.AutoMirrored.Filled.TrendingUp&#10;                    )&#10;                    IncomeExpenseItem(&#10;                        title = &quot;Expenses&quot;,&#10;                        amount = expenses,&#10;                        icon = Icons.AutoMirrored.Filled.TrendingDown&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun IncomeExpenseItem(&#10;    title: String,&#10;    amount: Double,&#10;    icon: ImageVector,&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(32.dp)&#10;                .background(&#10;                    MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.2f),&#10;                    CircleShape&#10;                ),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = MaterialTheme.colorScheme.onPrimary,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        Column {&#10;            Text(&#10;                text = title,&#10;                color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f),&#10;                fontSize = 12.sp&#10;            )&#10;            Text(&#10;                text = &quot;â‚¹${String.format(&quot;%.0f&quot;, amount)}&quot;,&#10;                color = MaterialTheme.colorScheme.onPrimary,&#10;                fontSize = 14.sp,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun QuickActionCard(&#10;    title: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .aspectRatio(1f)&#10;            .clickable { onClick() },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = color.copy(alpha = 0.1f)&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(12.dp)&#10;                .fillMaxSize(),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(color.copy(alpha = 0.2f), CircleShape),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(6.dp))&#10;            Text(&#10;                text = title,&#10;                fontSize = 10.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis,&#10;                lineHeight = 12.sp&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun QuickActionsRow(&#10;    onAddIncome: () -&gt; Unit,&#10;    onAddExpense: () -&gt; Unit,&#10;    onTransfer: () -&gt; Unit,&#10;    onBudget: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    LazyVerticalGrid(&#10;        columns = GridCells.Fixed(4),&#10;        modifier = modifier.padding(horizontal = 16.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp),&#10;        userScrollEnabled = false&#10;    ) {&#10;        items(&#10;            listOf(&#10;                QuickActionData(&quot;Add Income&quot;, Icons.Default.Add, Color.Green, onAddIncome),&#10;                QuickActionData(&quot;Add Expense&quot;, Icons.Default.Remove, Color.Red, onAddExpense),&#10;                QuickActionData(&quot;Transfer&quot;, Icons.Default.SwapHoriz, Color.Blue, onTransfer),&#10;                QuickActionData(&quot;Budget&quot;, Icons.Default.AccountBalance, Color(0xFFFF9800), onBudget)&#10;            )&#10;        ) { actionData -&gt;&#10;            QuickActionCard(&#10;                title = actionData.title,&#10;                icon = actionData.icon,&#10;                color = actionData.color,&#10;                onClick = actionData.action&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;data class QuickActionData(&#10;    val title: String,&#10;    val icon: ImageVector,&#10;    val color: Color,&#10;    val action: () -&gt; Unit&#10;)&#10;&#10;@Composable&#10;fun SectionHeader(&#10;    title: String,&#10;    subtitle: String? = null,&#10;    actionText: String? = null,&#10;    onActionClick: () -&gt; Unit = {},&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Column {&#10;            Text(&#10;                text = title,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            if (subtitle != null) {&#10;                Text(&#10;                    text = subtitle,&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;        if (actionText != null) {&#10;            TextButton(onClick = onActionClick) {&#10;                Text(&#10;                    text = actionText,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.components&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.TrendingDown&#10;import androidx.compose.material.icons.automirrored.filled.TrendingUp&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BalanceCard(&#10;    balance: Double,&#10;    income: Double,&#10;    expenses: Double,&#10;    modifier: Modifier = Modifier,&#10;    onCardClick: () -&gt; Unit = {}&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onCardClick() },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primary&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(&#10;                    Brush.horizontalGradient(&#10;                        colors = listOf(&#10;                            MaterialTheme.colorScheme.primary,&#10;                            MaterialTheme.colorScheme.primary.copy(alpha = 0.8f)&#10;                        )&#10;                    )&#10;                )&#10;                .padding(24.dp)&#10;        ) {&#10;            Column {&#10;                Text(&#10;                    text = &quot;Current Balance&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f),&#10;                    fontSize = 14.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;â‚¹${String.format(&quot;%.2f&quot;, balance)}&quot;,&#10;                    color = MaterialTheme.colorScheme.onPrimary,&#10;                    fontSize = 32.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(20.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    IncomeExpenseItem(&#10;                        title = &quot;Income&quot;,&#10;                        amount = income,&#10;                        icon = Icons.AutoMirrored.Filled.TrendingUp&#10;                    )&#10;                    IncomeExpenseItem(&#10;                        title = &quot;Expenses&quot;,&#10;                        amount = expenses,&#10;                        icon = Icons.AutoMirrored.Filled.TrendingDown&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun IncomeExpenseItem(&#10;    title: String,&#10;    amount: Double,&#10;    icon: ImageVector,&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(32.dp)&#10;                .background(&#10;                    MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.2f),&#10;                    CircleShape&#10;                ),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = MaterialTheme.colorScheme.onPrimary,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        Column {&#10;            Text(&#10;                text = title,&#10;                color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f),&#10;                fontSize = 12.sp&#10;            )&#10;            Text(&#10;                text = &quot;â‚¹${String.format(&quot;%.0f&quot;, amount)}&quot;,&#10;                color = MaterialTheme.colorScheme.onPrimary,&#10;                fontSize = 14.sp,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun QuickActionCard(&#10;    title: String,&#10;    icon: ImageVector,&#10;    color: Color,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .aspectRatio(1f)&#10;            .clickable { onClick() },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = color.copy(alpha = 0.1f)&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(12.dp)&#10;                .fillMaxSize(),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(color.copy(alpha = 0.2f), CircleShape),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(6.dp))&#10;            Text(&#10;                text = title,&#10;                fontSize = 10.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis,&#10;                lineHeight = 12.sp&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun QuickActionsRow(&#10;    onAddIncome: () -&gt; Unit,&#10;    onAddExpense: () -&gt; Unit,&#10;    onTransfer: () -&gt; Unit,&#10;    onBudget: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val actions = listOf(&#10;        QuickActionData(&quot;Add Income&quot;, Icons.Default.Add, Color.Green, onAddIncome),&#10;        QuickActionData(&quot;Add Expense&quot;, Icons.Default.Remove, Color.Red, onAddExpense),&#10;        QuickActionData(&quot;Transfer&quot;, Icons.Default.SwapHoriz, Color.Blue, onTransfer),&#10;        QuickActionData(&quot;Budget&quot;, Icons.Default.AccountBalance, Color(0xFFFF9800), onBudget)&#10;    )&#10;    &#10;    Column(&#10;        modifier = modifier.padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // First row&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            actions.take(2).forEach { actionData -&gt;&#10;                QuickActionCard(&#10;                    title = actionData.title,&#10;                    icon = actionData.icon,&#10;                    color = actionData.color,&#10;                    onClick = actionData.action,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;        &#10;        // Second row&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            actions.drop(2).forEach { actionData -&gt;&#10;                QuickActionCard(&#10;                    title = actionData.title,&#10;                    icon = actionData.icon,&#10;                    color = actionData.color,&#10;                    onClick = actionData.action,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class QuickActionData(&#10;    val title: String,&#10;    val icon: ImageVector,&#10;    val color: Color,&#10;    val action: () -&gt; Unit&#10;)&#10;&#10;@Composable&#10;fun SectionHeader(&#10;    title: String,&#10;    subtitle: String? = null,&#10;    actionText: String? = null,&#10;    onActionClick: () -&gt; Unit = {},&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Column {&#10;            Text(&#10;                text = title,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            if (subtitle != null) {&#10;                Text(&#10;                    text = subtitle,&#10;                    fontSize = 12.sp,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;        if (actionText != null) {&#10;            TextButton(onClick = onActionClick) {&#10;                Text(&#10;                    text = actionText,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/navigation/MainNavigationBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/navigation/MainNavigationBar.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.navigation&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainNavigationBar(&#10;    navController: NavController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    // Show bottom navigation only on main screens&#10;    val showBottomNav = Screen.bottomNavItems.any { it.route == currentRoute }&#10;&#10;    AnimatedVisibility(&#10;        visible = showBottomNav,&#10;        enter = slideInVertically(initialOffsetY = { it }),&#10;        exit = slideOutVertically(targetOffsetY = { it }),&#10;        modifier = modifier&#10;    ) {&#10;        NavigationBar(&#10;            containerColor = MaterialTheme.colorScheme.surface,&#10;            contentColor = MaterialTheme.colorScheme.onSurface,&#10;            tonalElevation = 8.dp&#10;        ) {&#10;            Screen.bottomNavItems.forEach { screen -&gt;&#10;                NavigationBarItem(&#10;                    icon = {&#10;                        Icon(&#10;                            imageVector = screen.icon ?: return@NavigationBarItem,&#10;                            contentDescription = screen.title&#10;                        )&#10;                    },&#10;                    label = {&#10;                        Text(&#10;                            text = screen.title,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    },&#10;                    selected = currentRoute == screen.route,&#10;                    onClick = {&#10;                        if (currentRoute != screen.route) {&#10;                            navController.navigate(screen.route) {&#10;                                // Pop up to the start destination to avoid building up a large stack&#10;                                popUpTo(navController.graph.startDestinationId) {&#10;                                    saveState = true&#10;                                }&#10;                                // Avoid multiple copies of the same destination&#10;                                launchSingleTop = true&#10;                                // Restore state when re-selecting a previously selected item&#10;                                restoreState = true&#10;                            }&#10;                        }&#10;                    },&#10;                    colors = NavigationBarItemDefaults.colors(&#10;                        selectedIconColor = MaterialTheme.colorScheme.primary,&#10;                        selectedTextColor = MaterialTheme.colorScheme.primary,&#10;                        indicatorColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        unselectedIconColor = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        unselectedTextColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.navigation&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainNavigationBar(&#10;    navController: NavController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    // Show bottom navigation only on main screens&#10;    val showBottomNav = Screen.bottomNavItems.any { it.route == currentRoute }&#10;&#10;    AnimatedVisibility(&#10;        visible = showBottomNav,&#10;        enter = slideInVertically(initialOffsetY = { it }),&#10;        exit = slideOutVertically(targetOffsetY = { it }),&#10;        modifier = modifier&#10;    ) {&#10;        NavigationBar(&#10;            containerColor = MaterialTheme.colorScheme.surface,&#10;            contentColor = MaterialTheme.colorScheme.onSurface,&#10;            tonalElevation = 8.dp&#10;        ) {&#10;            Screen.bottomNavItems.forEach { screen -&gt;&#10;                NavigationBarItem(&#10;                    icon = {&#10;                        Icon(&#10;                            imageVector = screen.icon ?: return@NavigationBarItem,&#10;                            contentDescription = screen.title&#10;                        )&#10;                    },&#10;                    label = { &#10;                        Text(&#10;                            text = screen.title,&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        ) &#10;                    },&#10;                    selected = currentRoute == screen.route,&#10;                    onClick = {&#10;                        if (currentRoute != screen.route) {&#10;                            navController.navigate(screen.route) {&#10;                                // Pop up to the start destination to avoid building up a large stack&#10;                                popUpTo(navController.graph.startDestinationId) {&#10;                                    saveState = true&#10;                                }&#10;                                // Avoid multiple copies of the same destination&#10;                                launchSingleTop = true&#10;                                // Restore state when re-selecting a previously selected item&#10;                                restoreState = true&#10;                            }&#10;                        }&#10;                    },&#10;                    colors = NavigationBarItemDefaults.colors(&#10;                        selectedIconColor = MaterialTheme.colorScheme.primary,&#10;                        selectedTextColor = MaterialTheme.colorScheme.primary,&#10;                        indicatorColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        unselectedIconColor = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        unselectedTextColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedDashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedDashboardScreen.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.ExpenseViewModel&#10;import `in`.sitharaj.aurabudget.presentation.viewmodel.BudgetViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun EnhancedDashboardScreen(&#10;    navController: NavController,&#10;    expenseViewModel: ExpenseViewModel = hiltViewModel(),&#10;    budgetViewModel: BudgetViewModel = hiltViewModel()&#10;) {&#10;    val expenses by expenseViewModel.expenses.collectAsState()&#10;    val budgetUiState by budgetViewModel.uiState.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Dashboard&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* TODO: Open drawer */ }) {&#10;                        Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { navController.navigate(&quot;settings&quot;) }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { navController.navigate(&quot;expenses&quot;) }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Expense&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            item {&#10;                // Total Balance Card&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Total Expenses&quot;,&#10;                            fontSize = 16.sp,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${expenses.sumOf { it.amount }}&quot;,&#10;                            fontSize = 32.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            item {&#10;                Text(&#10;                    text = &quot;Recent Expenses&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;&#10;            if (expenses.isEmpty()) {&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No expenses yet&quot;,&#10;                                fontSize = 18.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = &quot;Tap the + button to add your first expense&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                items(expenses.take(5)) { expense -&gt;&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Text(&#10;                                    text = expense.description ?: &quot;No description&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                                Text(&#10;                                    text = &quot;$${expense.amount}&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.error&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedDashboardScreenNew.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/presentation/screen/EnhancedDashboardScreenNew.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.components.*&#10;import `in`.sitharaj.aurabudget.presentation.navigation.Screen&#10;import java.time.LocalDateTime&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun EnhancedDashboardScreen(&#10;    navController: NavController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    // Sample data - this should come from your ViewModels&#10;    val balance = 45000.0&#10;    val income = 75000.0&#10;    val expenses = 30000.0&#10;&#10;    val recentTransactions = listOf(&#10;        Transaction(&#10;            id = 1,&#10;            amount = 2500.0,&#10;            category = &quot;Groceries&quot;,&#10;            description = &quot;Weekly shopping&quot;,&#10;            type = TransactionType.EXPENSE,&#10;            categoryIcon = Icons.Default.ShoppingCart&#10;        ),&#10;        Transaction(&#10;            id = 2,&#10;            amount = 50000.0,&#10;            category = &quot;Salary&quot;,&#10;            description = &quot;Monthly salary&quot;,&#10;            type = TransactionType.INCOME,&#10;            categoryIcon = Icons.Default.Work&#10;        ),&#10;        Transaction(&#10;            id = 3,&#10;            amount = 1200.0,&#10;            category = &quot;Transportation&quot;,&#10;            description = &quot;Fuel&quot;,&#10;            type = TransactionType.EXPENSE,&#10;            categoryIcon = Icons.Default.DirectionsCar&#10;        ),&#10;        Transaction(&#10;            id = 4,&#10;            amount = 800.0,&#10;            category = &quot;Entertainment&quot;,&#10;            description = &quot;Movie tickets&quot;,&#10;            type = TransactionType.EXPENSE,&#10;            categoryIcon = Icons.Default.Movie&#10;        )&#10;    )&#10;&#10;    val categorySpending = listOf(&#10;        Triple(&quot;Food &amp; Dining&quot;, 8500.0, 12000.0) to Pair(Icons.Default.Restaurant, Color(0xFF4CAF50)),&#10;        Triple(&quot;Transportation&quot;, 4200.0, 5000.0) to Pair(Icons.Default.DirectionsCar, Color(0xFF2196F3)),&#10;        Triple(&quot;Shopping&quot;, 6800.0, 8000.0) to Pair(Icons.Default.ShoppingBag, Color(0xFFFF9800)),&#10;        Triple(&quot;Entertainment&quot;, 2100.0, 3000.0) to Pair(Icons.Default.Movie, Color(0xFF9C27B0))&#10;    )&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .systemBarsPadding()&#10;    ) {&#10;        // Top App Bar with Enhanced Settings&#10;        EnhancedTopAppBar(&#10;            navController = navController,&#10;            title = {&#10;                Column {&#10;                    Text(&quot;Good morning!&quot;)&#10;                    Text(&#10;                        &quot;Welcome back&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        )&#10;&#10;        LazyColumn(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentPadding = PaddingValues(vertical = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            // Balance Card&#10;            item {&#10;                BalanceCard(&#10;                    balance = balance,&#10;                    income = income,&#10;                    expenses = expenses,&#10;                    modifier = Modifier.padding(horizontal = 16.dp),&#10;                    onCardClick = { navController.navigate(Screen.Analytics.route) }&#10;                )&#10;            }&#10;&#10;            // Quick Actions&#10;            item {&#10;                Column {&#10;                    SectionHeader(&#10;                        title = &quot;Quick Actions&quot;,&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    QuickActionsRow(&#10;                        onAddIncome = { navController.navigate(Screen.AddTransaction.route + &quot;?type=income&quot;) },&#10;                        onAddExpense = { navController.navigate(Screen.AddTransaction.route + &quot;?type=expense&quot;) },&#10;                        onTransfer = { navController.navigate(Screen.AddTransaction.route + &quot;?type=transfer&quot;) },&#10;                        onBudget = { navController.navigate(Screen.Budget.route) }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Category Spending Overview&#10;            item {&#10;                Column {&#10;                    SectionHeader(&#10;                        title = &quot;Budget Overview&quot;,&#10;                        subtitle = &quot;This month's spending&quot;,&#10;                        actionText = &quot;View All&quot;,&#10;                        onActionClick = { navController.navigate(Screen.Budget.route) },&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    LazyRow(&#10;                        contentPadding = PaddingValues(horizontal = 16.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(categorySpending) { (categoryData, iconColor) -&gt;&#10;                            val (name, spent, budget) = categoryData&#10;                            val (icon, color) = iconColor&#10;                            CategorySpendingCard(&#10;                                categoryName = name,&#10;                                amount = spent,&#10;                                budget = budget,&#10;                                icon = icon,&#10;                                color = color,&#10;                                modifier = Modifier.width(280.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Recent Transactions&#10;            item {&#10;                SectionHeader(&#10;                    title = &quot;Recent Transactions&quot;,&#10;                    subtitle = &quot;Last ${recentTransactions.size} transactions&quot;,&#10;                    actionText = &quot;See All&quot;,&#10;                    onActionClick = { navController.navigate(Screen.Transactions.route) },&#10;                    modifier = Modifier.padding(horizontal = 16.dp)&#10;                )&#10;            }&#10;&#10;            // Add individual transaction items directly to the main LazyColumn&#10;            items(recentTransactions.take(4)) { transaction -&gt;&#10;                TransactionItem(&#10;                    transaction = transaction,&#10;                    onTransactionClick = {&#10;                        navController.navigate(Screen.TransactionDetail.createRoute(transaction.id))&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 16.dp)&#10;                )&#10;            }&#10;&#10;            // Financial Insights Card&#10;            item {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = 16.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(20.dp)&#10;                    ) {&#10;                        Row {&#10;                            Icon(&#10;                                Icons.Default.Lightbulb,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                &quot;Financial Insight&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            &quot;You're spending 15% less on dining out this month. Keep it up!&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        OutlinedButton(&#10;                            onClick = { navController.navigate(Screen.Analytics.route) },&#10;                            colors = ButtonDefaults.outlinedButtonColors(&#10;                                contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        ) {&#10;                            Text(&quot;View Analytics&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Bottom spacing for navigation bar&#10;            item {&#10;                Spacer(modifier = Modifier.height(80.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.presentation.screen&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import `in`.sitharaj.aurabudget.presentation.components.*&#10;import `in`.sitharaj.aurabudget.presentation.navigation.Screen&#10;import java.time.LocalDateTime&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun EnhancedDashboardScreen(&#10;    navController: NavController,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    // Sample data - this should come from your ViewModels&#10;    val balance = 45000.0&#10;    val income = 75000.0&#10;    val expenses = 30000.0&#10;&#10;    val recentTransactions = listOf(&#10;        Transaction(&#10;            id = 1,&#10;            amount = 2500.0,&#10;            category = &quot;Groceries&quot;,&#10;            description = &quot;Weekly shopping&quot;,&#10;            type = TransactionType.EXPENSE,&#10;            categoryIcon = Icons.Default.ShoppingCart&#10;        ),&#10;        Transaction(&#10;            id = 2,&#10;            amount = 50000.0,&#10;            category = &quot;Salary&quot;,&#10;            description = &quot;Monthly salary&quot;,&#10;            type = TransactionType.INCOME,&#10;            categoryIcon = Icons.Default.Work&#10;        ),&#10;        Transaction(&#10;            id = 3,&#10;            amount = 1200.0,&#10;            category = &quot;Transportation&quot;,&#10;            description = &quot;Fuel&quot;,&#10;            type = TransactionType.EXPENSE,&#10;            categoryIcon = Icons.Default.DirectionsCar&#10;        ),&#10;        Transaction(&#10;            id = 4,&#10;            amount = 800.0,&#10;            category = &quot;Entertainment&quot;,&#10;            description = &quot;Movie tickets&quot;,&#10;            type = TransactionType.EXPENSE,&#10;            categoryIcon = Icons.Default.Movie&#10;        )&#10;    )&#10;&#10;    val categorySpending = listOf(&#10;        Triple(&quot;Food &amp; Dining&quot;, 8500.0, 12000.0) to Pair(Icons.Default.Restaurant, Color(0xFF4CAF50)),&#10;        Triple(&quot;Transportation&quot;, 4200.0, 5000.0) to Pair(Icons.Default.DirectionsCar, Color(0xFF2196F3)),&#10;        Triple(&quot;Shopping&quot;, 6800.0, 8000.0) to Pair(Icons.Default.ShoppingBag, Color(0xFFFF9800)),&#10;        Triple(&quot;Entertainment&quot;, 2100.0, 3000.0) to Pair(Icons.Default.Movie, Color(0xFF9C27B0))&#10;    )&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .systemBarsPadding()&#10;    ) {&#10;        // Top App Bar with Enhanced Settings&#10;        EnhancedTopAppBar(&#10;            navController = navController,&#10;            title = {&#10;                Column {&#10;                    Text(&quot;Good morning!&quot;)&#10;                    Text(&#10;                        &quot;Welcome back&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        )&#10;&#10;        LazyColumn(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentPadding = PaddingValues(vertical = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(20.dp)&#10;        ) {&#10;            // Balance Card&#10;            item {&#10;                BalanceCard(&#10;                    balance = balance,&#10;                    income = income,&#10;                    expenses = expenses,&#10;                    modifier = Modifier.padding(horizontal = 16.dp),&#10;                    onCardClick = { navController.navigate(Screen.Analytics.route) }&#10;                )&#10;            }&#10;&#10;            // Quick Actions&#10;            item {&#10;                Column {&#10;                    SectionHeader(&#10;                        title = &quot;Quick Actions&quot;,&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    QuickActionsRow(&#10;                        onAddIncome = { navController.navigate(Screen.AddTransaction.route + &quot;?type=income&quot;) },&#10;                        onAddExpense = { navController.navigate(Screen.AddTransaction.route + &quot;?type=expense&quot;) },&#10;                        onTransfer = { navController.navigate(Screen.AddTransaction.route + &quot;?type=transfer&quot;) },&#10;                        onBudget = { navController.navigate(Screen.Budget.route) }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Category Spending Overview&#10;            item {&#10;                Column {&#10;                    SectionHeader(&#10;                        title = &quot;Budget Overview&quot;,&#10;                        subtitle = &quot;This month's spending&quot;,&#10;                        actionText = &quot;View All&quot;,&#10;                        onActionClick = { navController.navigate(Screen.Budget.route) },&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    LazyRow(&#10;                        contentPadding = PaddingValues(horizontal = 16.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(categorySpending) { (categoryData, iconColor) -&gt;&#10;                            val (name, spent, budget) = categoryData&#10;                            val (icon, color) = iconColor&#10;                            CategorySpendingCard(&#10;                                categoryName = name,&#10;                                amount = spent,&#10;                                budget = budget,&#10;                                icon = icon,&#10;                                color = color,&#10;                                modifier = Modifier.width(280.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Recent Transactions&#10;            item {&#10;                SectionHeader(&#10;                    title = &quot;Recent Transactions&quot;,&#10;                    subtitle = &quot;Last ${recentTransactions.size} transactions&quot;,&#10;                    actionText = &quot;See All&quot;,&#10;                    onActionClick = { navController.navigate(Screen.Transactions.route) },&#10;                    modifier = Modifier.padding(horizontal = 16.dp)&#10;                )&#10;            }&#10;&#10;            // Add individual transaction items directly to the main LazyColumn&#10;            items(recentTransactions.take(4)) { transaction -&gt;&#10;                TransactionItem(&#10;                    transaction = transaction,&#10;                    onTransactionClick = {&#10;                        navController.navigate(Screen.TransactionDetail.createRoute(transaction.id))&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 16.dp)&#10;                )&#10;            }&#10;&#10;            // Financial Insights Card&#10;            item {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = 16.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(20.dp)&#10;                    ) {&#10;                        Row {&#10;                            Icon(&#10;                                Icons.Default.Lightbulb,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                &quot;Financial Insight&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            &quot;You're spending 15% less on dining out this month. Keep it up!&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        OutlinedButton(&#10;                            onClick = { navController.navigate(Screen.Analytics.route) },&#10;                            colors = ButtonDefaults.outlinedButtonColors(&#10;                                contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        ) {&#10;                            Text(&quot;View Analytics&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Bottom spacing for navigation bar&#10;            item {&#10;                Spacer(modifier = Modifier.height(80.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun EnhancedTopAppBar(&#10;    navController: NavController,&#10;    title: @Composable () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var showMoreMenu by remember { mutableStateOf(false) }&#10;    var showSearchBar by remember { mutableStateOf(false) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    if (showSearchBar) {&#10;        // Search Top App Bar&#10;        TopAppBar(&#10;            title = {&#10;                OutlinedTextField(&#10;                    value = searchQuery,&#10;                    onValueChange = { searchQuery = it },&#10;                    placeholder = { Text(&quot;Search transactions...&quot;) },&#10;                    singleLine = true,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                        unfocusedBorderColor = MaterialTheme.colorScheme.outline&#10;                    )&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = { &#10;                    showSearchBar = false&#10;                    searchQuery = &quot;&quot;&#10;                }) {&#10;                    Icon(Icons.Default.ArrowBack, contentDescription = &quot;Close search&quot;)&#10;                }&#10;            },&#10;            actions = {&#10;                IconButton(onClick = { &#10;                    // Handle search action&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        navController.navigate(&quot;${Screen.Transactions.route}?search=$searchQuery&quot;)&#10;                    }&#10;                }) {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            modifier = modifier&#10;        )&#10;    } else {&#10;        // Normal Top App Bar with Enhanced Actions&#10;        TopAppBar(&#10;            title = title,&#10;            actions = {&#10;                // Search Button&#10;                IconButton(onClick = { showSearchBar = true }) {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                }&#10;                &#10;                // Quick Filter Button&#10;                IconButton(onClick = { navController.navigate(&quot;${Screen.Transactions.route}?filter=recent&quot;) }) {&#10;                    Icon(Icons.Default.FilterList, contentDescription = &quot;Filter&quot;)&#10;                }&#10;                &#10;                // Notifications&#10;                IconButton(onClick = { navController.navigate(Screen.Notifications.route) }) {&#10;                    Badge {&#10;                        Icon(Icons.Default.Notifications, contentDescription = &quot;Notifications&quot;)&#10;                    }&#10;                }&#10;                &#10;                // More Options Menu&#10;                Box {&#10;                    IconButton(onClick = { showMoreMenu = true }) {&#10;                        Icon(Icons.Default.MoreVert, contentDescription = &quot;More options&quot;)&#10;                    }&#10;                    &#10;                    DropdownMenu(&#10;                        expanded = showMoreMenu,&#10;                        onDismissRequest = { showMoreMenu = false }&#10;                    ) {&#10;                        // Theme Toggle&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;Toggle Theme&quot;) },&#10;                            onClick = {&#10;                                showMoreMenu = false&#10;                                // TODO: Toggle theme via ViewModel&#10;                            },&#10;                            leadingIcon = {&#10;                                Icon(Icons.Default.Brightness4, contentDescription = null)&#10;                            }&#10;                        )&#10;                        &#10;                        // Export Data&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;Export Data&quot;) },&#10;                            onClick = {&#10;                                showMoreMenu = false&#10;                                // TODO: Implement export functionality&#10;                            },&#10;                            leadingIcon = {&#10;                                Icon(Icons.Default.CloudDownload, contentDescription = null)&#10;                            }&#10;                        )&#10;                        &#10;                        // Backup &amp; Sync&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;Backup &amp; Sync&quot;) },&#10;                            onClick = {&#10;                                showMoreMenu = false&#10;                                // TODO: Navigate to backup settings&#10;                            },&#10;                            leadingIcon = {&#10;                                Icon(Icons.Default.Backup, contentDescription = null)&#10;                            }&#10;                        )&#10;                        &#10;                        Divider()&#10;                        &#10;                        // Categories Management&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;Manage Categories&quot;) },&#10;                            onClick = {&#10;                                showMoreMenu = false&#10;                                navController.navigate(Screen.Categories.route)&#10;                            },&#10;                            leadingIcon = {&#10;                                Icon(Icons.Default.Category, contentDescription = null)&#10;                            }&#10;                        )&#10;                        &#10;                        // Goals (if available)&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;Financial Goals&quot;) },&#10;                            onClick = {&#10;                                showMoreMenu = false&#10;                                navController.navigate(&quot;goals&quot;) // Assuming you have goals screen&#10;                            },&#10;                            leadingIcon = {&#10;                                Icon(Icons.Default.TrendingUp, contentDescription = null)&#10;                            }&#10;                        )&#10;                        &#10;                        Divider()&#10;                        &#10;                        // Profile&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;Profile&quot;) },&#10;                            onClick = {&#10;                                showMoreMenu = false&#10;                                navController.navigate(Screen.Profile.route)&#10;                            },&#10;                            leadingIcon = {&#10;                                Icon(Icons.Default.AccountCircle, contentDescription = null)&#10;                            }&#10;                        )&#10;                        &#10;                        // Settings&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;Settings&quot;) },&#10;                            onClick = {&#10;                                showMoreMenu = false&#10;                                navController.navigate(Screen.Settings.route)&#10;                            },&#10;                            leadingIcon = {&#10;                                Icon(Icons.Default.Settings, contentDescription = null)&#10;                            }&#10;                        )&#10;                        &#10;                        // Help &amp; Support&#10;                        DropdownMenuItem(&#10;                            text = { Text(&quot;Help &amp; Support&quot;) },&#10;                            onClick = {&#10;                                showMoreMenu = false&#10;                                // TODO: Navigate to help screen&#10;                            },&#10;                            leadingIcon = {&#10;                                Icon(Icons.Default.Help, contentDescription = null)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            ),&#10;            modifier = modifier&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/BudgetRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/BudgetRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Budget&#10;import in.sitharaj.aurabudget.data.BudgetDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class BudgetRepository @Inject constructor(&#10;    private val budgetDao: BudgetDao&#10;) {&#10;    fun getAllBudgets(): Flow&lt;List&lt;Budget&gt;&gt; = budgetDao.getAllBudgets()&#10;&#10;    suspend fun insertBudget(budget: Budget) = budgetDao.insertBudget(budget)&#10;&#10;    suspend fun deleteBudget(budget: Budget) = budgetDao.deleteBudget(budget)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/CategoryRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/CategoryRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Category&#10;import in.sitharaj.aurabudget.data.CategoryDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class CategoryRepository @Inject constructor(&#10;    private val categoryDao: CategoryDao&#10;) {&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt; = categoryDao.getAllCategories()&#10;&#10;    suspend fun insertCategory(category: Category) = categoryDao.insertCategory(category)&#10;&#10;    suspend fun deleteCategory(category: Category) = categoryDao.deleteCategory(category)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/ExpenseRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/ExpenseRepository.kt" />
              <option name="originalContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.Expense&#10;import in.sitharaj.aurabudget.data.ExpenseDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class ExpenseRepository @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) {&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt; = expenseDao.getAllExpenses()&#10;&#10;    suspend fun insertExpense(expense: Expense) = expenseDao.insertExpense(expense)&#10;&#10;    suspend fun deleteExpense(expense: Expense) = expenseDao.deleteExpense(expense)&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.repository&#10;&#10;import `in`.sitharaj.aurabudget.data.Expense&#10;import `in`.sitharaj.aurabudget.data.ExpenseDao&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class ExpenseRepository @Inject constructor(&#10;    private val expenseDao: ExpenseDao&#10;) {&#10;    fun getAllExpenses(): Flow&lt;List&lt;Expense&gt;&gt; = expenseDao.getAllExpenses()&#10;&#10;    suspend fun insertExpense(expense: Expense) = expenseDao.insertExpense(expense)&#10;&#10;    suspend fun deleteExpense(expense: Expense) = expenseDao.deleteExpense(expense)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/PreferencesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/repository/PreferencesRepository.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.repository&#10;&#10;import in.sitharaj.aurabudget.data.UserPreferencesManager&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class PreferencesRepository @Inject constructor(&#10;    private val userPreferencesManager: UserPreferencesManager&#10;) {&#10;    val isDarkTheme: Flow&lt;Boolean&gt; = userPreferencesManager.isDarkTheme&#10;&#10;    suspend fun setDarkTheme(enabled: Boolean) = userPreferencesManager.setDarkTheme(enabled)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/BudgetViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/BudgetViewModel.kt" />
              <option name="originalContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    val budgets = budgetRepository.getAllBudgets()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.insertBudget(budget)&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.deleteBudget(budget)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import `in`.sitharaj.aurabudget.data.Budget&#10;import `in`.sitharaj.aurabudget.repository.BudgetRepository&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class BudgetViewModel @Inject constructor(&#10;    private val budgetRepository: BudgetRepository&#10;) : ViewModel() {&#10;&#10;    val budgets = budgetRepository.getAllBudgets()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.insertBudget(budget)&#10;        }&#10;    }&#10;&#10;    fun deleteBudget(budget: Budget) {&#10;        viewModelScope.launch {&#10;            budgetRepository.deleteBudget(budget)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/CategoryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/CategoryViewModel.kt" />
              <option name="updatedContent" value="package `in`.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import `in`.sitharaj.aurabudget.data.Category&#10;import `in`.sitharaj.aurabudget.repository.CategoryRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class CategoryViewModel @Inject constructor(&#10;    private val categoryRepository: CategoryRepository&#10;) : ViewModel() {&#10;&#10;    val categories = categoryRepository.getAllCategories()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            categoryRepository.insertCategory(category)&#10;        }&#10;    }&#10;&#10;    fun deleteCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            categoryRepository.deleteCategory(category)&#10;        }&#10;    }&#10;&#10;    init {&#10;        // Initialize with default categories if none exist&#10;        viewModelScope.launch {&#10;            addCategory(Category(name = &quot;Food &amp; Dining&quot;))&#10;            addCategory(Category(name = &quot;Transportation&quot;))&#10;            addCategory(Category(name = &quot;Shopping&quot;))&#10;            addCategory(Category(name = &quot;Entertainment&quot;))&#10;            addCategory(Category(name = &quot;Bills &amp; Utilities&quot;))&#10;            addCategory(Category(name = &quot;Healthcare&quot;))&#10;            addCategory(Category(name = &quot;Travel&quot;))&#10;            addCategory(Category(name = &quot;Other&quot;))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ExpenseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ExpenseViewModel.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import in.sitharaj.aurabudget.data.Expense&#10;import in.sitharaj.aurabudget.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ExpenseViewModel @Inject constructor(&#10;    private val expenseRepository: ExpenseRepository&#10;) : ViewModel() {&#10;&#10;    val expenses = expenseRepository.getAllExpenses()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    fun addExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            expenseRepository.insertExpense(expense)&#10;        }&#10;    }&#10;&#10;    fun deleteExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            expenseRepository.deleteExpense(expense)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ThemeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/in/sitharaj/aurabudget/ui/viewmodel/ThemeViewModel.kt" />
              <option name="updatedContent" value="package in.sitharaj.aurabudget.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import in.sitharaj.aurabudget.repository.PreferencesRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ThemeViewModel @Inject constructor(&#10;    private val preferencesRepository: PreferencesRepository&#10;) : ViewModel() {&#10;&#10;    val isDarkTheme = preferencesRepository.isDarkTheme&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = false&#10;        )&#10;&#10;    fun toggleTheme() {&#10;        viewModelScope.launch {&#10;            preferencesRepository.setDarkTheme(!isDarkTheme.value)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>